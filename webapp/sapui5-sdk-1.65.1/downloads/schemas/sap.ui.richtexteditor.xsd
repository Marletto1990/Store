<?xml version="1.0" encoding="UTF-8"?><xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" targetNamespace="sap.ui.richtexteditor" xmlns:n1="sap.ui.richtexteditor" xmlns:n0="sap.ui.core">
<xsd:import namespace="sap.ui.core"/>
<xsd:element name="RichTextEditor" type="n1:_RichTextEditorType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>The RichTextEditor-Control is used to enter formatted text. It uses the third-party component called TinyMCE.
In addition to the native toolbar, you can also use a toolbar built with SAPUI5 controls.
&lt;h3&gt;Overview&lt;/h3&gt;

With version 1.48 onward, aside from the native toolbar of the TinyMCE, the &lt;code&gt;RichTextEditor&lt;/code&gt; can also use a
toolbar built with SAPUI5 controls. Which toolbar is used is taken into consideration only while the
control is being initialized and it will not be possible to change it during runtime, because of
lifecycle incompatibilities between the SAPUI5 and the third-party library.
The custom toolbar acts like a wrapper to the native toolbar and takes care of
synchronizing the state of its internal controls with the current state of the selection in the editor
(bold, italics, font styles etc.).

&lt;h4&gt;Limitations&lt;/h4&gt;

&lt;b&gt;Note: The &lt;code&gt;RichTextEditor&lt;/code&gt; uses a third-party component and therefore
some additional limitations apply for its proper usage and support.
For more information see the Preamble section in {@link topic:d4f3f1598373452bb73f2120930c133c sap.ui.richtexteditor}.
&lt;/b&gt;

&lt;h3&gt;Guidelines&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt; The &lt;code&gt;RichTextEditor&lt;/code&gt; should be used for desktop apps only.&lt;/li&gt;
&lt;li&gt; In order to be usable, the control needs a minimum width 17.5 rem and height of 12.5 rem.&lt;/li&gt;
&lt;li&gt; Do not instantiate the &lt;code&gt;RichTextEditor&lt;/code&gt; from a hidden container.&lt;/li&gt;
&lt;li&gt; Make sure you destroy the &lt;code&gt;RichTextEditor&lt;/code&gt; instance instead of hiding it and create a new one when you show it again.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Usage&lt;/h3&gt;

&lt;h4&gt;When to use&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;You want to enable users to enter text and other elements (tables, images) with different styles and colors.&lt;/li&gt;
&lt;li&gt;You need to provide a tool for texts that require additional formatting.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt; When not to use&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;You want to let users add simple text that doesnâ€™t require formatting. Use {@link sap.m.TextArea text area} instead.&lt;/li&gt;
&lt;li&gt;Use callbacks to the native third-party API with care, as there may be compatibility issues with later versions.&lt;/li&gt;
&lt;/ul&gt;</xsd:documentation>
</xsd:annotation>
</xsd:element>
<!--type definition for UIElement 'sap.ui.richtexteditor.RichTextEditor'-->
<xsd:complexType name="_RichTextEditorType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<xsd:element name="customButtons" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Custom buttons are meant to extend the &lt;code&gt;RichTextEditor&lt;/code&gt;'s custom toolbar.
Though type is set to sap.ui.Control, only sap.m.Button is allowed.
&lt;b&gt;Note:&lt;/b&gt; customButtons are available only when the customToolbar is enabled and all the requirements are fulfilled.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control"/>
<xsd:element ref="n0:Fragment"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="value" type="xsd:string">
<xsd:annotation>
<xsd:documentation>An HTML string representing the editor content. Because this is HTML, the value cannot be generically escaped to prevent cross-site scripting, so the application is responsible for doing so.
Overwriting this property would also reset editor's Undo manager and buttons "Undo"/"Redo" would be set to their initial state.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="textDirection" type="n0:_TextDirectionType">
<xsd:annotation>
<xsd:documentation>The text direction</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Width of RichTextEditor control in CSS units.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="height" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Height of RichTextEditor control in CSS units.
&lt;b&gt;Note:&lt;/b&gt; If the height property results in a value smaller than 200px, the minimum height of 200px will be applied.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="editorType" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The editor implementation to use.

Valid values are the ones found under sap.ui.richtexteditor.EditorType and any
other editor identifier that may be introduced by other groups (hence this is
not an enumeration).

&lt;b&gt;Notes:&lt;/b&gt;
&lt;ul&gt;&lt;li&gt;TinyMCE version 3 is no longer supported and cannot be used. If you set the property to TinyMCE, it will load TinyMCE version 4.&lt;/li&gt;
&lt;li&gt;Any attempts to set this property after the first rendering will not
have any effect.&lt;/li&gt;&lt;/ul&gt;</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="editorLocation" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Relative or absolute URL where the editor is available. Must be on the same server.
&lt;b&gt;Note:&lt;/b&gt; Any attempts to set this property after the first rendering will not have any effect.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="editable" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Determines whether the editor content can be modified by the user. When set to "false" there might not be any editor toolbar.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showGroupFontStyle" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Determines whether the toolbar button group containing commands like Bold, Italic, Underline and Strikethrough is available. Changing this after the initial rendering will result in some visible redrawing.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showGroupTextAlign" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Determines whether the toolbar button group containing text alignment commands is available. Changing this after the initial rendering will result in some visible redrawing.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showGroupStructure" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Determines whether the toolbar button group containing commands like Bullets and Indentation is available. Changing this after the initial rendering will result in some visible redrawing.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showGroupFont" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Determines whether the toolbar button group containing commands like Font, Font Size and Colors is available. Changing this after the initial rendering will result in some visible redrawing.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showGroupClipboard" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Determines whether the toolbar button group containing commands like Cut, Copy and Paste is available. Changing this after the initial rendering will result in some visible redrawing.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showGroupInsert" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Determines whether the toolbar button group containing commands like Insert Image and Insert Smiley is available. Changing this after the initial rendering will result in some visible redrawing.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showGroupLink" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Determines whether the toolbar button group containing commands like Create Link and Remove Link is available. Changing this after the initial rendering will result in some visible redrawing.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showGroupUndo" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Determines whether the toolbar button group containing commands like Undo and Redo is available. Changing this after the initial rendering will result in some visible redrawing.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="wrapping" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Determines whether the text in the editor is wrapped. This does not affect the editor's value, only the representation in the control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="required" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Determines whether a value is required.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="sanitizeValue" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Determines whether to run the HTML sanitizer once the value (HTML markup) is applied or not. To configure allowed URLs please use the whitelist API via &lt;code&gt;jQuery.sap.addUrlWhitelist&lt;/code&gt;</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="plugins" type="">
<xsd:annotation>
<xsd:documentation>An array of plugin configuration objects with the obligatory property "name".
Each object has to contain a property "name" which then contains the plugin name/ID.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="useLegacyTheme" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Determines whether or not to use the legacy theme for the toolbar buttons. If this is set to false, the default theme for the editor will be used (which might change slightly with every update). The legacy theme has the disadvantage that not all functionality has its own icon, so using non default buttons might lead to invisible buttons with the legacy theme - use the default editor theme in this case.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="buttonGroups" type="">
<xsd:annotation>
<xsd:documentation>An array of button configurations. These configurations contain the names of buttons as array in the property "buttons" and the name of the group in "name", they can also contain the "row" where the buttons should be placed, a "priority" and whether the buttons are "visible". See method addButtonGroup() for more details on the structure of the objects in this array.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="customToolbar" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Determines whether a Fiori Toolbar is used instead of the TinyMCE default toolbar one. It is applied only when the EditorType is TinyMCE4 and sap.m library is loaded.
&lt;b&gt;Note:&lt;/b&gt; The &lt;code&gt;customToolbar&lt;/code&gt; property will have effect only on initial loading. Changing it during runtime will not affect the initially loaded toolbar.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="change" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is fired when the text in the field has changed AND the focus leaves the editor or when the Enter key is pressed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ready" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Fired when the used editor is loaded and ready (its HTML is also created).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="readyRecurring" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Analogous to the ready event, the event is fired when the used editor is loaded and ready. But the event is fired after every time the control is ready to use and not only once like the ready event.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="beforeEditorInit" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired right before the TinyMCE instance is created and can be used to change the settings object that will be given to TinyMCE. The parameter "configuration" is the javascript oject that will be given to TinyMCE upon first instantiation. The configuration parameter contains a map that can be changed in the case of TinyMCE.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<xsd:simpleType name="_EditorTypeType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="TinyMCE">
<xsd:annotation>
<xsd:documentation>Uses TinyMCE version 3 as editor (default)</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="TinyMCE4">
<xsd:annotation>
<xsd:documentation>Uses TinyMCE version 4 as editor</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
</xsd:schema>
