<?xml version="1.0" encoding="UTF-8"?><xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" targetNamespace="sap.viz" xmlns:n1="sap.viz" xmlns:n0="sap.ui.core">
<xsd:import namespace="sap.ui.core"/>
<xsd:element name="Area" type="n1:_AreaType" substitutionGroup="n1:BaseChart">
<xsd:annotation>
<xsd:documentation>Chart sap.viz.ui5.Area</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Area100" type="n1:_Area100Type" substitutionGroup="n1:BaseChart">
<xsd:annotation>
<xsd:documentation>Chart sap.viz.ui5.Area100</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Bar" type="n1:_BarType" substitutionGroup="n1:BaseChart">
<xsd:annotation>
<xsd:documentation>Chart sap.viz.ui5.Bar</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Bubble" type="n1:_BubbleType" substitutionGroup="n1:BaseChart">
<xsd:annotation>
<xsd:documentation>Chart sap.viz.ui5.Bubble</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Bullet" type="n1:_BulletType" substitutionGroup="n1:BaseChart">
<xsd:annotation>
<xsd:documentation>Chart sap.viz.ui5.Bullet</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Column" type="n1:_ColumnType" substitutionGroup="n1:BaseChart">
<xsd:annotation>
<xsd:documentation>Chart sap.viz.ui5.Column</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Combination" type="n1:_CombinationType" substitutionGroup="n1:BaseChart">
<xsd:annotation>
<xsd:documentation>Chart sap.viz.ui5.Combination</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Donut" type="n1:_DonutType" substitutionGroup="n1:BaseChart">
<xsd:annotation>
<xsd:documentation>Chart sap.viz.ui5.Donut</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="DualBar" type="n1:_DualBarType" substitutionGroup="n1:BaseChart">
<xsd:annotation>
<xsd:documentation>Chart sap.viz.ui5.DualBar</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="DualColumn" type="n1:_DualColumnType" substitutionGroup="n1:BaseChart">
<xsd:annotation>
<xsd:documentation>Chart sap.viz.ui5.DualColumn</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="DualCombination" type="n1:_DualCombinationType" substitutionGroup="n1:BaseChart">
<xsd:annotation>
<xsd:documentation>Chart sap.viz.ui5.DualCombination</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="DualLine" type="n1:_DualLineType" substitutionGroup="n1:BaseChart">
<xsd:annotation>
<xsd:documentation>Chart sap.viz.ui5.DualLine</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="DualStackedColumn" type="n1:_DualStackedColumnType" substitutionGroup="n1:BaseChart">
<xsd:annotation>
<xsd:documentation>Chart sap.viz.ui5.DualStackedColumn</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="DualStackedColumn100" type="n1:_DualStackedColumn100Type" substitutionGroup="n1:BaseChart">
<xsd:annotation>
<xsd:documentation>Chart sap.viz.ui5.DualStackedColumn100</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Heatmap" type="n1:_HeatmapType" substitutionGroup="n1:BaseChart">
<xsd:annotation>
<xsd:documentation>Chart sap.viz.ui5.Heatmap</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="HorizontalArea" type="n1:_HorizontalAreaType" substitutionGroup="n1:BaseChart">
<xsd:annotation>
<xsd:documentation>Chart sap.viz.ui5.HorizontalArea</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="HorizontalArea100" type="n1:_HorizontalArea100Type" substitutionGroup="n1:BaseChart">
<xsd:annotation>
<xsd:documentation>Chart sap.viz.ui5.HorizontalArea100</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Line" type="n1:_LineType" substitutionGroup="n1:BaseChart">
<xsd:annotation>
<xsd:documentation>Chart sap.viz.ui5.Line</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Pie" type="n1:_PieType" substitutionGroup="n1:BaseChart">
<xsd:annotation>
<xsd:documentation>Chart sap.viz.ui5.Pie</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Scatter" type="n1:_ScatterType" substitutionGroup="n1:BaseChart">
<xsd:annotation>
<xsd:documentation>Chart sap.viz.ui5.Scatter</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="StackedColumn" type="n1:_StackedColumnType" substitutionGroup="n1:BaseChart">
<xsd:annotation>
<xsd:documentation>Chart sap.viz.ui5.StackedColumn</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="StackedColumn100" type="n1:_StackedColumn100Type" substitutionGroup="n1:BaseChart">
<xsd:annotation>
<xsd:documentation>Chart sap.viz.ui5.StackedColumn100</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="TimeBubble" type="n1:_TimeBubbleType" substitutionGroup="n1:BaseChart">
<xsd:annotation>
<xsd:documentation>Chart sap.viz.ui5.TimeBubble</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Treemap" type="n1:_TreemapType" substitutionGroup="n1:BaseChart">
<xsd:annotation>
<xsd:documentation>Chart sap.viz.ui5.Treemap</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="VizContainer" type="n1:_VizContainerType" substitutionGroup="n1:BaseControl">
<xsd:annotation>
<xsd:documentation>Controls ui5/VizContainer</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Popover" type="n1:_PopoverType" substitutionGroup="n1:BaseControl">
<xsd:annotation>
<xsd:documentation>Viz Chart Popover</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="VizFrame" type="n1:_VizFrameType" substitutionGroup="n1:BaseControl">
<xsd:annotation>
<xsd:documentation>VizFrame is a viz control that manages a visualizationâ€™s initialization, layout, feeding, customization and interactions.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="VizTooltip" type="n1:_VizTooltipType" substitutionGroup="n1:BaseControl">
<xsd:annotation>
<xsd:documentation>Viz Chart Tooltip</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="BaseControl" type="n1:_BaseControlType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>An abstract base class for all VIZ controls</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="AnalysisObject" type="n1:_AnalysisObjectType" substitutionGroup="n0:Element">
<xsd:annotation>
<xsd:documentation>AnalysisObject Class</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="FeedItem" type="n1:_FeedItemType" substitutionGroup="n0:Element">
<xsd:annotation>
<xsd:documentation>FeedItem Class</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="BaseChart" type="n1:_BaseChartType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>An abstract base class for all VIZ charts</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="BaseStructuredType" type="n1:_BaseStructuredTypeType" substitutionGroup="n0:Element">
<xsd:annotation>
<xsd:documentation>Abstract base class for all elements that represent VIZ modules or complex property types</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="CustomDataset" type="n1:_CustomDatasetType" substitutionGroup="n1:Dataset">
<xsd:annotation>
<xsd:documentation>A dataset for raw data format.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Dataset" type="n1:_DatasetType" substitutionGroup="n0:Element">
<xsd:annotation>
<xsd:documentation>Abstract Dataset implementation</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="DimensionDefinition" type="n1:_DimensionDefinitionType" substitutionGroup="n0:Element">
<xsd:annotation>
<xsd:documentation>Definition of a single dimension in a dataset</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="FlattenedDataset" type="n1:_FlattenedDatasetType" substitutionGroup="n1:Dataset">
<xsd:annotation>
<xsd:documentation>A dataset for flattened (redundant) data using a tabular format.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="MeasureDefinition" type="n1:_MeasureDefinitionType" substitutionGroup="n0:Element">
<xsd:annotation>
<xsd:documentation>Definition of a single Measure</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Area" type="n1:_AreaType" substitutionGroup="n1:BaseStructuredType">
<xsd:annotation>
<xsd:documentation>Module sap.viz.ui5.types.Area</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Area_animation" type="n1:_Area_animationType" substitutionGroup="n1:BaseStructuredType">
<xsd:annotation>
<xsd:documentation>Settings for animations in the plot area</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Area_hoverline" type="n1:_Area_hoverlineType" substitutionGroup="n1:BaseStructuredType">
<xsd:annotation>
<xsd:documentation>Settings for the hoverline.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Area_marker" type="n1:_Area_markerType" substitutionGroup="n1:BaseStructuredType">
<xsd:annotation>
<xsd:documentation>Settings for marker and data point graphics</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Area_tooltip" type="n1:_Area_tooltipType" substitutionGroup="n1:BaseStructuredType">
<xsd:annotation>
<xsd:documentation>Settings for the tooltip</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Axis" type="n1:_AxisType" substitutionGroup="n1:BaseStructuredType">
<xsd:annotation>
<xsd:documentation>Module sap.viz.ui5.types.Axis</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Axis_axisTick" type="n1:_Axis_axisTickType" substitutionGroup="n1:BaseStructuredType">
<xsd:annotation>
<xsd:documentation>Settings for the ticks on the axis</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Axis_axisline" type="n1:_Axis_axislineType" substitutionGroup="n1:BaseStructuredType">
<xsd:annotation>
<xsd:documentation>Settings for the axis line</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Axis_gridline" type="n1:_Axis_gridlineType" substitutionGroup="n1:BaseStructuredType">
<xsd:annotation>
<xsd:documentation>Settings for the gridlines on the axis</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Axis_indicator" type="n1:_Axis_indicatorType" substitutionGroup="n1:BaseStructuredType">
<xsd:annotation>
<xsd:documentation>Settings for the axis indicator</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Axis_label" type="n1:_Axis_labelType" substitutionGroup="n1:BaseStructuredType">
<xsd:annotation>
<xsd:documentation>Settings for the labels on this axis</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Axis_layoutInfo" type="n1:_Axis_layoutInfoType" substitutionGroup="n1:BaseStructuredType">
<xsd:annotation>
<xsd:documentation>Settings for the layout of the category axis. This property only works for category type axes.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Axis_scale" type="n1:_Axis_scaleType" substitutionGroup="n1:BaseStructuredType">
<xsd:annotation>
<xsd:documentation>Set the scale of the value axis. This property only works on value type axes.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Axis_title" type="n1:_Axis_titleType" substitutionGroup="n1:BaseStructuredType">
<xsd:annotation>
<xsd:documentation>Settings for the axis title</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Background" type="n1:_BackgroundType" substitutionGroup="n1:BaseStructuredType">
<xsd:annotation>
<xsd:documentation>Module sap.viz.ui5.types.Background</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Background_border" type="n1:_Background_borderType" substitutionGroup="n1:BaseStructuredType">
<xsd:annotation>
<xsd:documentation>Settings for the border</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Background_border_bottom" type="n1:_Background_border_bottomType" substitutionGroup="n1:BaseStructuredType">
<xsd:annotation>
<xsd:documentation>Settings for the bottom border</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Background_border_left" type="n1:_Background_border_leftType" substitutionGroup="n1:BaseStructuredType">
<xsd:annotation>
<xsd:documentation>Settings for the left border</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Background_border_right" type="n1:_Background_border_rightType" substitutionGroup="n1:BaseStructuredType">
<xsd:annotation>
<xsd:documentation>Settings for the right border</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Background_border_top" type="n1:_Background_border_topType" substitutionGroup="n1:BaseStructuredType">
<xsd:annotation>
<xsd:documentation>Settings for the top border</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Bar" type="n1:_BarType" substitutionGroup="n1:BaseStructuredType">
<xsd:annotation>
<xsd:documentation>Module sap.viz.ui5.types.Bar</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Bar_animation" type="n1:_Bar_animationType" substitutionGroup="n1:BaseStructuredType">
<xsd:annotation>
<xsd:documentation>Settings for animations in the plot area</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Bar_tooltip" type="n1:_Bar_tooltipType" substitutionGroup="n1:BaseStructuredType">
<xsd:annotation>
<xsd:documentation>Settings for tooltip related properties</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Bubble" type="n1:_BubbleType" substitutionGroup="n1:BaseStructuredType">
<xsd:annotation>
<xsd:documentation>Module sap.viz.ui5.types.Bubble</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Bubble_animation" type="n1:_Bubble_animationType" substitutionGroup="n1:BaseStructuredType">
<xsd:annotation>
<xsd:documentation>Settings for animations in bubble and scatter charts</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Bubble_axisTooltip" type="n1:_Bubble_axisTooltipType" substitutionGroup="n1:BaseStructuredType">
<xsd:annotation>
<xsd:documentation>Set tooltip related properties.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Bubble_hoverline" type="n1:_Bubble_hoverlineType" substitutionGroup="n1:BaseStructuredType">
<xsd:annotation>
<xsd:documentation>Settings for hoverline properties.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Bullet" type="n1:_BulletType" substitutionGroup="n1:BaseStructuredType">
<xsd:annotation>
<xsd:documentation>Module sap.viz.ui5.types.Bullet</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Bullet_tooltip" type="n1:_Bullet_tooltipType" substitutionGroup="n1:BaseStructuredType">
<xsd:annotation>
<xsd:documentation>Settings for tooltip related properties</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Combination" type="n1:_CombinationType" substitutionGroup="n1:BaseStructuredType">
<xsd:annotation>
<xsd:documentation>Module sap.viz.ui5.types.Combination</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Combination_animation" type="n1:_Combination_animationType" substitutionGroup="n1:BaseStructuredType">
<xsd:annotation>
<xsd:documentation>Settings for animations in the plot area</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Combination_bar" type="n1:_Combination_barType" substitutionGroup="n1:BaseStructuredType">
<xsd:annotation>
<xsd:documentation>Settings for bar properties</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Combination_dataShape" type="n1:_Combination_dataShapeType" substitutionGroup="n1:BaseStructuredType">
<xsd:annotation>
<xsd:documentation>Settings for the shape of data series</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Combination_line" type="n1:_Combination_lineType" substitutionGroup="n1:BaseStructuredType">
<xsd:annotation>
<xsd:documentation>Settings for line properties</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Combination_line_marker" type="n1:_Combination_line_markerType" substitutionGroup="n1:BaseStructuredType">
<xsd:annotation>
<xsd:documentation>Settings for the visual markers for data points</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Combination_tooltip" type="n1:_Combination_tooltipType" substitutionGroup="n1:BaseStructuredType">
<xsd:annotation>
<xsd:documentation>Settings for the tooltip</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Datalabel" type="n1:_DatalabelType" substitutionGroup="n1:BaseStructuredType">
<xsd:annotation>
<xsd:documentation>Module sap.viz.ui5.types.Datalabel</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Datatransform" type="n1:_DatatransformType" substitutionGroup="n1:BaseStructuredType">
<xsd:annotation>
<xsd:documentation>Module sap.viz.ui5.types.Datatransform</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Datatransform_autoBinning" type="n1:_Datatransform_autoBinningType" substitutionGroup="n1:BaseStructuredType">
<xsd:annotation>
<xsd:documentation>Settings for the auto-binning algorithm</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Datatransform_dataSampling" type="n1:_Datatransform_dataSamplingType" substitutionGroup="n1:BaseStructuredType">
<xsd:annotation>
<xsd:documentation>Settings for the data sampling algorithm</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Datatransform_dataSampling_grid" type="n1:_Datatransform_dataSampling_gridType" substitutionGroup="n1:BaseStructuredType">
<xsd:annotation>
<xsd:documentation>Structured Type sap.viz.ui5.types.Datatransform_dataSampling_grid</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Heatmap" type="n1:_HeatmapType" substitutionGroup="n1:BaseStructuredType">
<xsd:annotation>
<xsd:documentation>Module sap.viz.ui5.types.Heatmap</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Heatmap_animation" type="n1:_Heatmap_animationType" substitutionGroup="n1:BaseStructuredType">
<xsd:annotation>
<xsd:documentation>Settings for animations in the plot area</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Heatmap_border" type="n1:_Heatmap_borderType" substitutionGroup="n1:BaseStructuredType">
<xsd:annotation>
<xsd:documentation>Settings for the border</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Heatmap_tooltip" type="n1:_Heatmap_tooltipType" substitutionGroup="n1:BaseStructuredType">
<xsd:annotation>
<xsd:documentation>Settings for tooltip</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Legend" type="n1:_LegendType" substitutionGroup="n1:BaseStructuredType">
<xsd:annotation>
<xsd:documentation>Module sap.viz.ui5.types.Legend</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Legend_layout" type="n1:_Legend_layoutType" substitutionGroup="n1:BaseStructuredType">
<xsd:annotation>
<xsd:documentation>Settings for the layout of the legend area</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Line" type="n1:_LineType" substitutionGroup="n1:BaseStructuredType">
<xsd:annotation>
<xsd:documentation>Module sap.viz.ui5.types.Line</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Line_animation" type="n1:_Line_animationType" substitutionGroup="n1:BaseStructuredType">
<xsd:annotation>
<xsd:documentation>Settings for animations.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Line_hoverline" type="n1:_Line_hoverlineType" substitutionGroup="n1:BaseStructuredType">
<xsd:annotation>
<xsd:documentation>Settings for the hoverline.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Line_marker" type="n1:_Line_markerType" substitutionGroup="n1:BaseStructuredType">
<xsd:annotation>
<xsd:documentation>Settings for marker/data point graphics</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Line_tooltip" type="n1:_Line_tooltipType" substitutionGroup="n1:BaseStructuredType">
<xsd:annotation>
<xsd:documentation>Settings for the tooltip</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Pie" type="n1:_PieType" substitutionGroup="n1:BaseStructuredType">
<xsd:annotation>
<xsd:documentation>Module sap.viz.ui5.types.Pie</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Pie_animation" type="n1:_Pie_animationType" substitutionGroup="n1:BaseStructuredType">
<xsd:annotation>
<xsd:documentation>Settings for animations in the plot area</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Pie_tooltip" type="n1:_Pie_tooltipType" substitutionGroup="n1:BaseStructuredType">
<xsd:annotation>
<xsd:documentation>Settings for tooltip related properties</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="RootContainer" type="n1:_RootContainerType" substitutionGroup="n1:BaseStructuredType">
<xsd:annotation>
<xsd:documentation>Module sap.viz.ui5.types.RootContainer</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="RootContainer_layout" type="n1:_RootContainer_layoutType" substitutionGroup="n1:BaseStructuredType">
<xsd:annotation>
<xsd:documentation>Settings for the layout of the root container</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Scatter" type="n1:_ScatterType" substitutionGroup="n1:BaseStructuredType">
<xsd:annotation>
<xsd:documentation>Module sap.viz.ui5.types.Scatter</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Scatter_animation" type="n1:_Scatter_animationType" substitutionGroup="n1:BaseStructuredType">
<xsd:annotation>
<xsd:documentation>Settings for animations in bubble and scatter charts</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Scatter_axisTooltip" type="n1:_Scatter_axisTooltipType" substitutionGroup="n1:BaseStructuredType">
<xsd:annotation>
<xsd:documentation>Set tooltip related properties.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Scatter_hoverline" type="n1:_Scatter_hoverlineType" substitutionGroup="n1:BaseStructuredType">
<xsd:annotation>
<xsd:documentation>Settings for hoverline properties.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="StackedVerticalBar" type="n1:_StackedVerticalBarType" substitutionGroup="n1:BaseStructuredType">
<xsd:annotation>
<xsd:documentation>Module sap.viz.ui5.types.StackedVerticalBar</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="StackedVerticalBar_animation" type="n1:_StackedVerticalBar_animationType" substitutionGroup="n1:BaseStructuredType">
<xsd:annotation>
<xsd:documentation>Settings for animations in the plot area</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="StackedVerticalBar_tooltip" type="n1:_StackedVerticalBar_tooltipType" substitutionGroup="n1:BaseStructuredType">
<xsd:annotation>
<xsd:documentation>Settings for tooltip related properties</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Title" type="n1:_TitleType" substitutionGroup="n1:BaseStructuredType">
<xsd:annotation>
<xsd:documentation>Module sap.viz.ui5.types.Title</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Title_layout" type="n1:_Title_layoutType" substitutionGroup="n1:BaseStructuredType">
<xsd:annotation>
<xsd:documentation>Settings for layout of title</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Tooltip" type="n1:_TooltipType" substitutionGroup="n1:BaseStructuredType">
<xsd:annotation>
<xsd:documentation>Module sap.viz.ui5.types.Tooltip</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Tooltip_background" type="n1:_Tooltip_backgroundType" substitutionGroup="n1:BaseStructuredType">
<xsd:annotation>
<xsd:documentation>Define the background style of the tooltip.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Tooltip_bodyDimensionLabel" type="n1:_Tooltip_bodyDimensionLabelType" substitutionGroup="n1:BaseStructuredType">
<xsd:annotation>
<xsd:documentation>Define the color of the dimension name of the tooltip body.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Tooltip_bodyDimensionValue" type="n1:_Tooltip_bodyDimensionValueType" substitutionGroup="n1:BaseStructuredType">
<xsd:annotation>
<xsd:documentation>Define the color of the dimension value of the tooltip body.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Tooltip_bodyMeasureLabel" type="n1:_Tooltip_bodyMeasureLabelType" substitutionGroup="n1:BaseStructuredType">
<xsd:annotation>
<xsd:documentation>Define the color of the measure name of the tooltip body.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Tooltip_bodyMeasureValue" type="n1:_Tooltip_bodyMeasureValueType" substitutionGroup="n1:BaseStructuredType">
<xsd:annotation>
<xsd:documentation>Define the color of the measure value of the tooltip body.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Tooltip_closeButton" type="n1:_Tooltip_closeButtonType" substitutionGroup="n1:BaseStructuredType">
<xsd:annotation>
<xsd:documentation>Define the background and border color of tooltip close button.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Tooltip_footerLabel" type="n1:_Tooltip_footerLabelType" substitutionGroup="n1:BaseStructuredType">
<xsd:annotation>
<xsd:documentation>Define the style of the label of the tooltip footer.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Tooltip_separationLine" type="n1:_Tooltip_separationLineType" substitutionGroup="n1:BaseStructuredType">
<xsd:annotation>
<xsd:documentation>Define the color of the value of the tooltip separation line.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Treemap" type="n1:_TreemapType" substitutionGroup="n1:BaseStructuredType">
<xsd:annotation>
<xsd:documentation>Module sap.viz.ui5.types.Treemap</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Treemap_animation" type="n1:_Treemap_animationType" substitutionGroup="n1:BaseStructuredType">
<xsd:annotation>
<xsd:documentation>Settings for animations in the plot area</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Treemap_border" type="n1:_Treemap_borderType" substitutionGroup="n1:BaseStructuredType">
<xsd:annotation>
<xsd:documentation>Settings for the border</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Treemap_tooltip" type="n1:_Treemap_tooltipType" substitutionGroup="n1:BaseStructuredType">
<xsd:annotation>
<xsd:documentation>Settings for tooltip</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="VerticalBar" type="n1:_VerticalBarType" substitutionGroup="n1:BaseStructuredType">
<xsd:annotation>
<xsd:documentation>Module sap.viz.ui5.types.VerticalBar</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="VerticalBar_animation" type="n1:_VerticalBar_animationType" substitutionGroup="n1:BaseStructuredType">
<xsd:annotation>
<xsd:documentation>Settings for animations in the plot area</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="VerticalBar_tooltip" type="n1:_VerticalBar_tooltipType" substitutionGroup="n1:BaseStructuredType">
<xsd:annotation>
<xsd:documentation>Settings for tooltip related properties</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="XYContainer" type="n1:_XYContainerType" substitutionGroup="n1:BaseStructuredType">
<xsd:annotation>
<xsd:documentation>Module sap.viz.ui5.types.XYContainer</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Interaction" type="n1:_InteractionType" substitutionGroup="n1:BaseStructuredType">
<xsd:annotation>
<xsd:documentation>Module sap.viz.ui5.types.controller.Interaction</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Interaction_pan" type="n1:_Interaction_panType" substitutionGroup="n1:BaseStructuredType">
<xsd:annotation>
<xsd:documentation>Structured Type sap.viz.ui5.types.controller.Interaction_pan</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Interaction_selectability" type="n1:_Interaction_selectabilityType" substitutionGroup="n1:BaseStructuredType">
<xsd:annotation>
<xsd:documentation>Settings for selectability</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Dock" type="n1:_DockType" substitutionGroup="n1:BaseStructuredType">
<xsd:annotation>
<xsd:documentation>Module sap.viz.ui5.types.layout.Dock</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Stack" type="n1:_StackType" substitutionGroup="n1:BaseStructuredType">
<xsd:annotation>
<xsd:documentation>Module sap.viz.ui5.types.layout.Stack</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Common" type="n1:_CommonType" substitutionGroup="n1:BaseStructuredType">
<xsd:annotation>
<xsd:documentation>Module sap.viz.ui5.types.legend.Common</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Common_title" type="n1:_Common_titleType" substitutionGroup="n1:BaseStructuredType">
<xsd:annotation>
<xsd:documentation>Settings for the legend title</xsd:documentation>
</xsd:annotation>
</xsd:element>
<!--type definition for UIElement 'sap.viz.ui5.Area'-->
<xsd:complexType name="_AreaType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseChartType">
<xsd:sequence>
<xsd:element name="general" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.rootContainer</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:RootContainer"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="interaction" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.controller.interaction</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Interaction"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="title" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.title</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Title"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="legendGroup" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.legend</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Legend"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="legend" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.legend.common</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Common"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="toolTip" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.chart.elements.Tooltip</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Tooltip"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="xyContainer" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.xycontainer</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:XYContainer"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="dataLabel" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.datalabel</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Datalabel"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="yAxis" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.axis</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Axis"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="xAxis" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.axis</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Axis"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="background" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.background</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Background"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="plotArea" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.area</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Area"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="selectData" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.&lt;code&gt;{name: "selectData",data:[{
//selected element's detail
target:"Dom Element",//an object pointed to corresponding dom element
data:[{val: "...",//value of this element
ctx:{type:"Dimension"||"Measure"||"MND",
//for Dimension
path:{aa:"...",di:"...",dii:"..."},
//for Measure
path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
//for MND
path:{mg:"...",mi:"..."}
//path: analysis path
//aa: analysis axis index // 0 for analysis axis 1,  1 for analysis 2
//di: dimension index //zero based
//dii: dimension item index //zero based
//mg: measure group index // 0 for measure group 1,1 for measure group 2
//mi: measure index // measure index in measure group zero based
//dii_a1: each dii of di in analysis axis 1 index
//dii_a2: each dii of di in analysis axis 2 index
}},{
//for bubble, tagcloud and scatter, there will be more than one values in one selected element.
var:"...",ctx:"..."}]},{
//if under multi selection, there will be more than one selected elements
target:"...",data:["..."]}]}</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="deselectData" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.&lt;code&gt;{name: "deselectData",data:["---the same as selectedData---"]}</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showTooltip" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.&lt;code&gt;{name:"showTooltip",data:{body:[{
//All measures
name:"...",val:[{//measure value is an array containing only one item
value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
//this object specifies the plot area of the chart
height:"...",width:"...",x:"...",y:"..."},point:{
//this object specifies a point which affects the position of tooltip
x:"...",y:"..."},selectedValues:...//this number specify how many values are selected}}</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="hideTooltip" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="initialized" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the &lt;a href="sap.viz.core.html#createViz" target="_blank"&gt;createViz&lt;/a&gt; function in the API document.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.Area100'-->
<xsd:complexType name="_Area100Type">
<xsd:complexContent>
<xsd:extension base="n1:_BaseChartType">
<xsd:sequence>
<xsd:element name="general" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.rootContainer</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:RootContainer"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="interaction" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.controller.interaction</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Interaction"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="title" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.title</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Title"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="legendGroup" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.legend</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Legend"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="legend" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.legend.common</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Common"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="toolTip" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.chart.elements.Tooltip</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Tooltip"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="xyContainer" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.xycontainer</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:XYContainer"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="dataLabel" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.datalabel</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Datalabel"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="yAxis" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.axis</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Axis"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="xAxis" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.axis</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Axis"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="background" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.background</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Background"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="plotArea" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.area</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Area"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="selectData" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.&lt;code&gt;{name: "selectData",data:[{
//selected element's detail
target:"Dom Element",//an object pointed to corresponding dom element
data:[{val: "...",//value of this element
ctx:{type:"Dimension"||"Measure"||"MND",
//for Dimension
path:{aa:"...",di:"...",dii:"..."},
//for Measure
path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
//for MND
path:{mg:"...",mi:"..."}
//path: analysis path
//aa: analysis axis index // 0 for analysis axis 1,  1 for analysis 2
//di: dimension index //zero based
//dii: dimension item index //zero based
//mg: measure group index // 0 for measure group 1,1 for measure group 2
//mi: measure index // measure index in measure group zero based
//dii_a1: each dii of di in analysis axis 1 index
//dii_a2: each dii of di in analysis axis 2 index
}},{
//for bubble, tagcloud and scatter, there will be more than one values in one selected element.
var:"...",ctx:"..."}]},{
//if under multi selection, there will be more than one selected elements
target:"...",data:["..."]}]}</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="deselectData" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.&lt;code&gt;{name: "deselectData",data:["---the same as selectedData---"]}</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showTooltip" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.&lt;code&gt;{name:"showTooltip",data:{body:[{
//All measures
name:"...",val:[{//measure value is an array containing only one item
value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
//this object specifies the plot area of the chart
height:"...",width:"...",x:"...",y:"..."},point:{
//this object specifies a point which affects the position of tooltip
x:"...",y:"..."},selectedValues:...//this number specify how many values are selected}}</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="hideTooltip" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="initialized" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the &lt;a href="sap.viz.core.html#createViz" target="_blank"&gt;createViz&lt;/a&gt; function in the API document.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.Bar'-->
<xsd:complexType name="_BarType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseChartType">
<xsd:sequence>
<xsd:element name="general" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.rootContainer</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:RootContainer"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="interaction" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.controller.interaction</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Interaction"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="title" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.title</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Title"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="legendGroup" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.legend</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Legend"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="legend" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.legend.common</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Common"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="toolTip" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.chart.elements.Tooltip</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Tooltip"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="xyContainer" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.xycontainer</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:XYContainer"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="dataLabel" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.datalabel</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Datalabel"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="xAxis" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.axis</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Axis"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="yAxis" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.axis</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Axis"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="background" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.background</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Background"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="plotArea" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.bar</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Bar"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="selectData" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.&lt;code&gt;{name: "selectData",data:[{
//selected element's detail
target:"Dom Element",//an object pointed to corresponding dom element
data:[{val: "...",//value of this element
ctx:{type:"Dimension"||"Measure"||"MND",
//for Dimension
path:{aa:"...",di:"...",dii:"..."},
//for Measure
path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
//for MND
path:{mg:"...",mi:"..."}
//path: analysis path
//aa: analysis axis index // 0 for analysis axis 1,  1 for analysis 2
//di: dimension index //zero based
//dii: dimension item index //zero based
//mg: measure group index // 0 for measure group 1,1 for measure group 2
//mi: measure index // measure index in measure group zero based
//dii_a1: each dii of di in analysis axis 1 index
//dii_a2: each dii of di in analysis axis 2 index
}},{
//for bubble, tagcloud and scatter, there will be more than one values in one selected element.
var:"...",ctx:"..."}]},{
//if under multi selection, there will be more than one selected elements
target:"...",data:["..."]}]}</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="deselectData" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.&lt;code&gt;{name: "deselectData",data:["---the same as selectedData---"]}</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showTooltip" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.&lt;code&gt;{name:"showTooltip",data:{body:[{
//All measures
name:"...",val:[{//measure value is an array containing only one item
value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
//this object specifies the plot area of the chart
height:"...",width:"...",x:"...",y:"..."},point:{
//this object specifies a point which affects the position of tooltip
x:"...",y:"..."},selectedValues:...//this number specify how many values are selected}}</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="hideTooltip" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="initialized" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the &lt;a href="sap.viz.core.html#createViz" target="_blank"&gt;createViz&lt;/a&gt; function in the API document.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.Bubble'-->
<xsd:complexType name="_BubbleType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseChartType">
<xsd:sequence>
<xsd:element name="general" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.rootContainer</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:RootContainer"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="title" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.title</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Title"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="legendGroup" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.legend</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Legend"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="legend" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.legend.common</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Common"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="sizeLegend" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.legend.common</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Common"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="xyContainer" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.xycontainer</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:XYContainer"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="dataLabel" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.datalabel</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Datalabel"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="xAxis" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.axis</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Axis"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="yAxis" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.axis</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Axis"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="background" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.background</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Background"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="plotArea" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.bubble</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Bubble"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="toolTip" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.chart.elements.Tooltip</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Tooltip"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="interaction" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.controller.interaction</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Interaction"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="selectData" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.&lt;code&gt;{name: "selectData",data:[{
//selected element's detail
target:"Dom Element",//an object pointed to corresponding dom element
data:[{val: "...",//value of this element
ctx:{type:"Dimension"||"Measure"||"MND",
//for Dimension
path:{aa:"...",di:"...",dii:"..."},
//for Measure
path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
//for MND
path:{mg:"...",mi:"..."}
//path: analysis path
//aa: analysis axis index // 0 for analysis axis 1,  1 for analysis 2
//di: dimension index //zero based
//dii: dimension item index //zero based
//mg: measure group index // 0 for measure group 1,1 for measure group 2
//mi: measure index // measure index in measure group zero based
//dii_a1: each dii of di in analysis axis 1 index
//dii_a2: each dii of di in analysis axis 2 index
}},{
//for bubble, tagcloud and scatter, there will be more than one values in one selected element.
var:"...",ctx:"..."}]},{
//if under multi selection, there will be more than one selected elements
target:"...",data:["..."]}]}</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="deselectData" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.&lt;code&gt;{name: "deselectData",data:["---the same as selectedData---"]}</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showTooltip" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.&lt;code&gt;{name:"showTooltip",data:{body:[{
//All measures
name:"...",val:[{//measure value is an array containing only one item
value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
//this object specifies the plot area of the chart
height:"...",width:"...",x:"...",y:"..."},point:{
//this object specifies a point which affects the position of tooltip
x:"...",y:"..."},selectedValues:...//this number specify how many values are selected}}</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="hideTooltip" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="initialized" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the &lt;a href="sap.viz.core.html#createViz" target="_blank"&gt;createViz&lt;/a&gt; function in the API document.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.Bullet'-->
<xsd:complexType name="_BulletType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseChartType">
<xsd:sequence>
<xsd:element name="general" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.rootContainer</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:RootContainer"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="interaction" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.controller.interaction</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Interaction"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="title" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.title</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Title"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="toolTip" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.chart.elements.Tooltip</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Tooltip"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="xyContainer" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.xycontainer</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:XYContainer"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="yAxis" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.axis</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Axis"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="background" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.background</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Background"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="plotArea" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.bullet</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Bullet"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="xAxis2" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.axis</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Axis"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="yAxis2" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.axis</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Axis"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="selectData" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.&lt;code&gt;{name: "selectData",data:[{
//selected element's detail
target:"Dom Element",//an object pointed to corresponding dom element
data:[{val: "...",//value of this element
ctx:{type:"Dimension"||"Measure"||"MND",
//for Dimension
path:{aa:"...",di:"...",dii:"..."},
//for Measure
path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
//for MND
path:{mg:"...",mi:"..."}
//path: analysis path
//aa: analysis axis index // 0 for analysis axis 1,  1 for analysis 2
//di: dimension index //zero based
//dii: dimension item index //zero based
//mg: measure group index // 0 for measure group 1,1 for measure group 2
//mi: measure index // measure index in measure group zero based
//dii_a1: each dii of di in analysis axis 1 index
//dii_a2: each dii of di in analysis axis 2 index
}},{
//for bubble, tagcloud and scatter, there will be more than one values in one selected element.
var:"...",ctx:"..."}]},{
//if under multi selection, there will be more than one selected elements
target:"...",data:["..."]}]}</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="deselectData" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.&lt;code&gt;{name: "deselectData",data:["---the same as selectedData---"]}</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showTooltip" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.&lt;code&gt;{name:"showTooltip",data:{body:[{
//All measures
name:"...",val:[{//measure value is an array containing only one item
value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
//this object specifies the plot area of the chart
height:"...",width:"...",x:"...",y:"..."},point:{
//this object specifies a point which affects the position of tooltip
x:"...",y:"..."},selectedValues:...//this number specify how many values are selected}}</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="hideTooltip" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="initialized" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the &lt;a href="sap.viz.core.html#createViz" target="_blank"&gt;createViz&lt;/a&gt; function in the API document.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.Column'-->
<xsd:complexType name="_ColumnType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseChartType">
<xsd:sequence>
<xsd:element name="general" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.rootContainer</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:RootContainer"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="interaction" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.controller.interaction</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Interaction"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="title" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.title</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Title"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="legendGroup" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.legend</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Legend"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="legend" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.legend.common</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Common"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="toolTip" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.chart.elements.Tooltip</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Tooltip"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="xyContainer" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.xycontainer</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:XYContainer"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="dataLabel" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.datalabel</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Datalabel"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="yAxis" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.axis</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Axis"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="xAxis" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.axis</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Axis"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="background" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.background</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Background"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="plotArea" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.verticalbar</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:VerticalBar"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="selectData" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.&lt;code&gt;{name: "selectData",data:[{
//selected element's detail
target:"Dom Element",//an object pointed to corresponding dom element
data:[{val: "...",//value of this element
ctx:{type:"Dimension"||"Measure"||"MND",
//for Dimension
path:{aa:"...",di:"...",dii:"..."},
//for Measure
path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
//for MND
path:{mg:"...",mi:"..."}
//path: analysis path
//aa: analysis axis index // 0 for analysis axis 1,  1 for analysis 2
//di: dimension index //zero based
//dii: dimension item index //zero based
//mg: measure group index // 0 for measure group 1,1 for measure group 2
//mi: measure index // measure index in measure group zero based
//dii_a1: each dii of di in analysis axis 1 index
//dii_a2: each dii of di in analysis axis 2 index
}},{
//for bubble, tagcloud and scatter, there will be more than one values in one selected element.
var:"...",ctx:"..."}]},{
//if under multi selection, there will be more than one selected elements
target:"...",data:["..."]}]}</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="deselectData" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.&lt;code&gt;{name: "deselectData",data:["---the same as selectedData---"]}</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showTooltip" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.&lt;code&gt;{name:"showTooltip",data:{body:[{
//All measures
name:"...",val:[{//measure value is an array containing only one item
value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
//this object specifies the plot area of the chart
height:"...",width:"...",x:"...",y:"..."},point:{
//this object specifies a point which affects the position of tooltip
x:"...",y:"..."},selectedValues:...//this number specify how many values are selected}}</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="hideTooltip" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="initialized" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the &lt;a href="sap.viz.core.html#createViz" target="_blank"&gt;createViz&lt;/a&gt; function in the API document.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.Combination'-->
<xsd:complexType name="_CombinationType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseChartType">
<xsd:sequence>
<xsd:element name="general" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.rootContainer</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:RootContainer"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="interaction" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.controller.interaction</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Interaction"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="title" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.title</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Title"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="legendGroup" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.legend</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Legend"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="legend" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.legend.common</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Common"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="toolTip" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.chart.elements.Tooltip</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Tooltip"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="xyContainer" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.xycontainer</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:XYContainer"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="dataLabel" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.datalabel</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Datalabel"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="yAxis" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.axis</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Axis"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="xAxis" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.axis</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Axis"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="background" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.background</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Background"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="plotArea" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.combination</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Combination"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="selectData" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.&lt;code&gt;{name: "selectData",data:[{
//selected element's detail
target:"Dom Element",//an object pointed to corresponding dom element
data:[{val: "...",//value of this element
ctx:{type:"Dimension"||"Measure"||"MND",
//for Dimension
path:{aa:"...",di:"...",dii:"..."},
//for Measure
path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
//for MND
path:{mg:"...",mi:"..."}
//path: analysis path
//aa: analysis axis index // 0 for analysis axis 1,  1 for analysis 2
//di: dimension index //zero based
//dii: dimension item index //zero based
//mg: measure group index // 0 for measure group 1,1 for measure group 2
//mi: measure index // measure index in measure group zero based
//dii_a1: each dii of di in analysis axis 1 index
//dii_a2: each dii of di in analysis axis 2 index
}},{
//for bubble, tagcloud and scatter, there will be more than one values in one selected element.
var:"...",ctx:"..."}]},{
//if under multi selection, there will be more than one selected elements
target:"...",data:["..."]}]}</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="deselectData" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.&lt;code&gt;{name: "deselectData",data:["---the same as selectedData---"]}</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showTooltip" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.&lt;code&gt;{name:"showTooltip",data:{body:[{
//All measures
name:"...",val:[{//measure value is an array containing only one item
value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
//this object specifies the plot area of the chart
height:"...",width:"...",x:"...",y:"..."},point:{
//this object specifies a point which affects the position of tooltip
x:"...",y:"..."},selectedValues:...//this number specify how many values are selected}}</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="hideTooltip" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="initialized" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the &lt;a href="sap.viz.core.html#createViz" target="_blank"&gt;createViz&lt;/a&gt; function in the API document.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.Donut'-->
<xsd:complexType name="_DonutType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseChartType">
<xsd:sequence>
<xsd:element name="general" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.rootContainer</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:RootContainer"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="title" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.title</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Title"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="legendGroup" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.legend</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Legend"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="legend" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.legend.common</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Common"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="xyContainer" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.xycontainer</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:XYContainer"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="plotArea" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.pie</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Pie"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="dataLabel" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.datalabel</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Datalabel"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="interaction" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.controller.interaction</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Interaction"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="toolTip" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.chart.elements.Tooltip</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Tooltip"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="dataTransform" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.datatransform</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Datatransform"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="selectData" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.&lt;code&gt;{name: "selectData",data:[{
//selected element's detail
target:"Dom Element",//an object pointed to corresponding dom element
data:[{val: "...",//value of this element
ctx:{type:"Dimension"||"Measure"||"MND",
//for Dimension
path:{aa:"...",di:"...",dii:"..."},
//for Measure
path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
//for MND
path:{mg:"...",mi:"..."}
//path: analysis path
//aa: analysis axis index // 0 for analysis axis 1,  1 for analysis 2
//di: dimension index //zero based
//dii: dimension item index //zero based
//mg: measure group index // 0 for measure group 1,1 for measure group 2
//mi: measure index // measure index in measure group zero based
//dii_a1: each dii of di in analysis axis 1 index
//dii_a2: each dii of di in analysis axis 2 index
}},{
//for bubble, tagcloud and scatter, there will be more than one values in one selected element.
var:"...",ctx:"..."}]},{
//if under multi selection, there will be more than one selected elements
target:"...",data:["..."]}]}</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="deselectData" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.&lt;code&gt;{name: "deselectData",data:["---the same as selectedData---"]}</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showTooltip" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.&lt;code&gt;{name:"showTooltip",data:{body:[{
//All measures
name:"...",val:[{//measure value is an array containing only one item
value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
//this object specifies the plot area of the chart
height:"...",width:"...",x:"...",y:"..."},point:{
//this object specifies a point which affects the position of tooltip
x:"...",y:"..."},selectedValues:...//this number specify how many values are selected}}</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="hideTooltip" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="initialized" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the &lt;a href="sap.viz.core.html#createViz" target="_blank"&gt;createViz&lt;/a&gt; function in the API document.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.DualBar'-->
<xsd:complexType name="_DualBarType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseChartType">
<xsd:sequence>
<xsd:element name="general" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.rootContainer</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:RootContainer"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="interaction" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.controller.interaction</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Interaction"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="title" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.title</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Title"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="legendGroup" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.legend</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Legend"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="legend" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.legend.common</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Common"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="toolTip" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.chart.elements.Tooltip</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Tooltip"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="xyContainer" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.xycontainer</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:XYContainer"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="dataLabel" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.datalabel</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Datalabel"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="xAxis" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.axis</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Axis"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="yAxis" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.axis</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Axis"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="background" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.background</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Background"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="plotArea" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.bar</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Bar"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="xAxis2" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.axis</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Axis"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="selectData" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.&lt;code&gt;{name: "selectData",data:[{
//selected element's detail
target:"Dom Element",//an object pointed to corresponding dom element
data:[{val: "...",//value of this element
ctx:{type:"Dimension"||"Measure"||"MND",
//for Dimension
path:{aa:"...",di:"...",dii:"..."},
//for Measure
path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
//for MND
path:{mg:"...",mi:"..."}
//path: analysis path
//aa: analysis axis index // 0 for analysis axis 1,  1 for analysis 2
//di: dimension index //zero based
//dii: dimension item index //zero based
//mg: measure group index // 0 for measure group 1,1 for measure group 2
//mi: measure index // measure index in measure group zero based
//dii_a1: each dii of di in analysis axis 1 index
//dii_a2: each dii of di in analysis axis 2 index
}},{
//for bubble, tagcloud and scatter, there will be more than one values in one selected element.
var:"...",ctx:"..."}]},{
//if under multi selection, there will be more than one selected elements
target:"...",data:["..."]}]}</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="deselectData" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.&lt;code&gt;{name: "deselectData",data:["---the same as selectedData---"]}</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showTooltip" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.&lt;code&gt;{name:"showTooltip",data:{body:[{
//All measures
name:"...",val:[{//measure value is an array containing only one item
value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
//this object specifies the plot area of the chart
height:"...",width:"...",x:"...",y:"..."},point:{
//this object specifies a point which affects the position of tooltip
x:"...",y:"..."},selectedValues:...//this number specify how many values are selected}}</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="hideTooltip" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="initialized" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the &lt;a href="sap.viz.core.html#createViz" target="_blank"&gt;createViz&lt;/a&gt; function in the API document.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.DualColumn'-->
<xsd:complexType name="_DualColumnType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseChartType">
<xsd:sequence>
<xsd:element name="general" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.rootContainer</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:RootContainer"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="interaction" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.controller.interaction</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Interaction"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="title" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.title</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Title"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="legendGroup" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.legend</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Legend"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="legend" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.legend.common</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Common"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="toolTip" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.chart.elements.Tooltip</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Tooltip"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="xyContainer" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.xycontainer</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:XYContainer"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="dataLabel" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.datalabel</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Datalabel"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="yAxis" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.axis</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Axis"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="xAxis" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.axis</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Axis"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="background" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.background</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Background"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="plotArea" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.verticalbar</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:VerticalBar"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="yAxis2" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.axis</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Axis"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="selectData" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.&lt;code&gt;{name: "selectData",data:[{
//selected element's detail
target:"Dom Element",//an object pointed to corresponding dom element
data:[{val: "...",//value of this element
ctx:{type:"Dimension"||"Measure"||"MND",
//for Dimension
path:{aa:"...",di:"...",dii:"..."},
//for Measure
path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
//for MND
path:{mg:"...",mi:"..."}
//path: analysis path
//aa: analysis axis index // 0 for analysis axis 1,  1 for analysis 2
//di: dimension index //zero based
//dii: dimension item index //zero based
//mg: measure group index // 0 for measure group 1,1 for measure group 2
//mi: measure index // measure index in measure group zero based
//dii_a1: each dii of di in analysis axis 1 index
//dii_a2: each dii of di in analysis axis 2 index
}},{
//for bubble, tagcloud and scatter, there will be more than one values in one selected element.
var:"...",ctx:"..."}]},{
//if under multi selection, there will be more than one selected elements
target:"...",data:["..."]}]}</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="deselectData" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.&lt;code&gt;{name: "deselectData",data:["---the same as selectedData---"]}</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showTooltip" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.&lt;code&gt;{name:"showTooltip",data:{body:[{
//All measures
name:"...",val:[{//measure value is an array containing only one item
value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
//this object specifies the plot area of the chart
height:"...",width:"...",x:"...",y:"..."},point:{
//this object specifies a point which affects the position of tooltip
x:"...",y:"..."},selectedValues:...//this number specify how many values are selected}}</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="hideTooltip" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="initialized" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the &lt;a href="sap.viz.core.html#createViz" target="_blank"&gt;createViz&lt;/a&gt; function in the API document.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.DualCombination'-->
<xsd:complexType name="_DualCombinationType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseChartType">
<xsd:sequence>
<xsd:element name="general" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.rootContainer</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:RootContainer"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="interaction" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.controller.interaction</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Interaction"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="title" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.title</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Title"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="legendGroup" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.legend</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Legend"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="legend" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.legend.common</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Common"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="toolTip" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.chart.elements.Tooltip</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Tooltip"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="xyContainer" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.xycontainer</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:XYContainer"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="dataLabel" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.datalabel</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Datalabel"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="yAxis" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.axis</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Axis"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="xAxis" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.axis</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Axis"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="background" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.background</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Background"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="plotArea" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.combination</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Combination"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="yAxis2" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.axis</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Axis"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="selectData" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.&lt;code&gt;{name: "selectData",data:[{
//selected element's detail
target:"Dom Element",//an object pointed to corresponding dom element
data:[{val: "...",//value of this element
ctx:{type:"Dimension"||"Measure"||"MND",
//for Dimension
path:{aa:"...",di:"...",dii:"..."},
//for Measure
path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
//for MND
path:{mg:"...",mi:"..."}
//path: analysis path
//aa: analysis axis index // 0 for analysis axis 1,  1 for analysis 2
//di: dimension index //zero based
//dii: dimension item index //zero based
//mg: measure group index // 0 for measure group 1,1 for measure group 2
//mi: measure index // measure index in measure group zero based
//dii_a1: each dii of di in analysis axis 1 index
//dii_a2: each dii of di in analysis axis 2 index
}},{
//for bubble, tagcloud and scatter, there will be more than one values in one selected element.
var:"...",ctx:"..."}]},{
//if under multi selection, there will be more than one selected elements
target:"...",data:["..."]}]}</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="deselectData" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.&lt;code&gt;{name: "deselectData",data:["---the same as selectedData---"]}</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showTooltip" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.&lt;code&gt;{name:"showTooltip",data:{body:[{
//All measures
name:"...",val:[{//measure value is an array containing only one item
value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
//this object specifies the plot area of the chart
height:"...",width:"...",x:"...",y:"..."},point:{
//this object specifies a point which affects the position of tooltip
x:"...",y:"..."},selectedValues:...//this number specify how many values are selected}}</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="hideTooltip" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="initialized" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the &lt;a href="sap.viz.core.html#createViz" target="_blank"&gt;createViz&lt;/a&gt; function in the API document.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.DualLine'-->
<xsd:complexType name="_DualLineType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseChartType">
<xsd:sequence>
<xsd:element name="general" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.rootContainer</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:RootContainer"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="interaction" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.controller.interaction</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Interaction"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="title" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.title</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Title"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="legendGroup" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.legend</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Legend"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="legend" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.legend.common</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Common"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="toolTip" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.chart.elements.Tooltip</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Tooltip"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="xyContainer" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.xycontainer</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:XYContainer"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="dataLabel" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.datalabel</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Datalabel"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="yAxis" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.axis</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Axis"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="xAxis" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.axis</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Axis"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="background" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.background</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Background"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="plotArea" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.line</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Line"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="yAxis2" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.axis</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Axis"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="selectData" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.&lt;code&gt;{name: "selectData",data:[{
//selected element's detail
target:"Dom Element",//an object pointed to corresponding dom element
data:[{val: "...",//value of this element
ctx:{type:"Dimension"||"Measure"||"MND",
//for Dimension
path:{aa:"...",di:"...",dii:"..."},
//for Measure
path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
//for MND
path:{mg:"...",mi:"..."}
//path: analysis path
//aa: analysis axis index // 0 for analysis axis 1,  1 for analysis 2
//di: dimension index //zero based
//dii: dimension item index //zero based
//mg: measure group index // 0 for measure group 1,1 for measure group 2
//mi: measure index // measure index in measure group zero based
//dii_a1: each dii of di in analysis axis 1 index
//dii_a2: each dii of di in analysis axis 2 index
}},{
//for bubble, tagcloud and scatter, there will be more than one values in one selected element.
var:"...",ctx:"..."}]},{
//if under multi selection, there will be more than one selected elements
target:"...",data:["..."]}]}</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="deselectData" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.&lt;code&gt;{name: "deselectData",data:["---the same as selectedData---"]}</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showTooltip" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.&lt;code&gt;{name:"showTooltip",data:{body:[{
//All measures
name:"...",val:[{//measure value is an array containing only one item
value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
//this object specifies the plot area of the chart
height:"...",width:"...",x:"...",y:"..."},point:{
//this object specifies a point which affects the position of tooltip
x:"...",y:"..."},selectedValues:...//this number specify how many values are selected}}</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="hideTooltip" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="initialized" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the &lt;a href="sap.viz.core.html#createViz" target="_blank"&gt;createViz&lt;/a&gt; function in the API document.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.DualStackedColumn'-->
<xsd:complexType name="_DualStackedColumnType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseChartType">
<xsd:sequence>
<xsd:element name="general" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.rootContainer</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:RootContainer"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="interaction" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.controller.interaction</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Interaction"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="title" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.title</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Title"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="legendGroup" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.legend</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Legend"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="legend" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.legend.common</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Common"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="toolTip" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.chart.elements.Tooltip</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Tooltip"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="xyContainer" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.xycontainer</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:XYContainer"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="dataLabel" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.datalabel</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Datalabel"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="yAxis" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.axis</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Axis"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="xAxis" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.axis</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Axis"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="background" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.background</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Background"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="plotArea" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.stackedverticalbar</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:StackedVerticalBar"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="yAxis2" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.axis</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Axis"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="selectData" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.&lt;code&gt;{name: "selectData",data:[{
//selected element's detail
target:"Dom Element",//an object pointed to corresponding dom element
data:[{val: "...",//value of this element
ctx:{type:"Dimension"||"Measure"||"MND",
//for Dimension
path:{aa:"...",di:"...",dii:"..."},
//for Measure
path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
//for MND
path:{mg:"...",mi:"..."}
//path: analysis path
//aa: analysis axis index // 0 for analysis axis 1,  1 for analysis 2
//di: dimension index //zero based
//dii: dimension item index //zero based
//mg: measure group index // 0 for measure group 1,1 for measure group 2
//mi: measure index // measure index in measure group zero based
//dii_a1: each dii of di in analysis axis 1 index
//dii_a2: each dii of di in analysis axis 2 index
}},{
//for bubble, tagcloud and scatter, there will be more than one values in one selected element.
var:"...",ctx:"..."}]},{
//if under multi selection, there will be more than one selected elements
target:"...",data:["..."]}]}</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="deselectData" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.&lt;code&gt;{name: "deselectData",data:["---the same as selectedData---"]}</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showTooltip" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.&lt;code&gt;{name:"showTooltip",data:{body:[{
//All measures
name:"...",val:[{//measure value is an array containing only one item
value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
//this object specifies the plot area of the chart
height:"...",width:"...",x:"...",y:"..."},point:{
//this object specifies a point which affects the position of tooltip
x:"...",y:"..."},selectedValues:...//this number specify how many values are selected}}</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="hideTooltip" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="initialized" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the &lt;a href="sap.viz.core.html#createViz" target="_blank"&gt;createViz&lt;/a&gt; function in the API document.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.DualStackedColumn100'-->
<xsd:complexType name="_DualStackedColumn100Type">
<xsd:complexContent>
<xsd:extension base="n1:_BaseChartType">
<xsd:sequence>
<xsd:element name="general" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.rootContainer</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:RootContainer"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="interaction" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.controller.interaction</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Interaction"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="title" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.title</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Title"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="legendGroup" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.legend</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Legend"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="legend" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.legend.common</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Common"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="toolTip" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.chart.elements.Tooltip</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Tooltip"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="xyContainer" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.xycontainer</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:XYContainer"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="dataLabel" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.datalabel</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Datalabel"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="yAxis" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.axis</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Axis"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="xAxis" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.axis</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Axis"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="background" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.background</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Background"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="plotArea" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.stackedverticalbar</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:StackedVerticalBar"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="yAxis2" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.axis</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Axis"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="selectData" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.&lt;code&gt;{name: "selectData",data:[{
//selected element's detail
target:"Dom Element",//an object pointed to corresponding dom element
data:[{val: "...",//value of this element
ctx:{type:"Dimension"||"Measure"||"MND",
//for Dimension
path:{aa:"...",di:"...",dii:"..."},
//for Measure
path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
//for MND
path:{mg:"...",mi:"..."}
//path: analysis path
//aa: analysis axis index // 0 for analysis axis 1,  1 for analysis 2
//di: dimension index //zero based
//dii: dimension item index //zero based
//mg: measure group index // 0 for measure group 1,1 for measure group 2
//mi: measure index // measure index in measure group zero based
//dii_a1: each dii of di in analysis axis 1 index
//dii_a2: each dii of di in analysis axis 2 index
}},{
//for bubble, tagcloud and scatter, there will be more than one values in one selected element.
var:"...",ctx:"..."}]},{
//if under multi selection, there will be more than one selected elements
target:"...",data:["..."]}]}</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="deselectData" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.&lt;code&gt;{name: "deselectData",data:["---the same as selectedData---"]}</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showTooltip" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.&lt;code&gt;{name:"showTooltip",data:{body:[{
//All measures
name:"...",val:[{//measure value is an array containing only one item
value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
//this object specifies the plot area of the chart
height:"...",width:"...",x:"...",y:"..."},point:{
//this object specifies a point which affects the position of tooltip
x:"...",y:"..."},selectedValues:...//this number specify how many values are selected}}</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="hideTooltip" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="initialized" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the &lt;a href="sap.viz.core.html#createViz" target="_blank"&gt;createViz&lt;/a&gt; function in the API document.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.Heatmap'-->
<xsd:complexType name="_HeatmapType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseChartType">
<xsd:sequence>
<xsd:element name="general" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.rootContainer</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:RootContainer"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="title" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.title</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Title"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="legendGroup" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.legend</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Legend"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="legend" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.legend.common</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Common"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="xyContainer" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.xycontainer</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:XYContainer"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="dataLabel" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.datalabel</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Datalabel"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="xAxis" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.axis</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Axis"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="yAxis" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.axis</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Axis"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="plotArea" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.heatmap</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Heatmap"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="toolTip" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.chart.elements.Tooltip</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Tooltip"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="interaction" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.controller.interaction</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Interaction"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="selectData" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.&lt;code&gt;{name: "selectData",data:[{
//selected element's detail
target:"Dom Element",//an object pointed to corresponding dom element
data:[{val: "...",//value of this element
ctx:{type:"Dimension"||"Measure"||"MND",
//for Dimension
path:{aa:"...",di:"...",dii:"..."},
//for Measure
path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
//for MND
path:{mg:"...",mi:"..."}
//path: analysis path
//aa: analysis axis index // 0 for analysis axis 1,  1 for analysis 2
//di: dimension index //zero based
//dii: dimension item index //zero based
//mg: measure group index // 0 for measure group 1,1 for measure group 2
//mi: measure index // measure index in measure group zero based
//dii_a1: each dii of di in analysis axis 1 index
//dii_a2: each dii of di in analysis axis 2 index
}},{
//for bubble, tagcloud and scatter, there will be more than one values in one selected element.
var:"...",ctx:"..."}]},{
//if under multi selection, there will be more than one selected elements
target:"...",data:["..."]}]}</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="deselectData" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.&lt;code&gt;{name: "deselectData",data:["---the same as selectedData---"]}</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showTooltip" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.&lt;code&gt;{name:"showTooltip",data:{body:[{
//All measures
name:"...",val:[{//measure value is an array containing only one item
value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
//this object specifies the plot area of the chart
height:"...",width:"...",x:"...",y:"..."},point:{
//this object specifies a point which affects the position of tooltip
x:"...",y:"..."},selectedValues:...//this number specify how many values are selected}}</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="hideTooltip" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="initialized" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the &lt;a href="sap.viz.core.html#createViz" target="_blank"&gt;createViz&lt;/a&gt; function in the API document.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.HorizontalArea'-->
<xsd:complexType name="_HorizontalAreaType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseChartType">
<xsd:sequence>
<xsd:element name="general" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.rootContainer</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:RootContainer"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="interaction" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.controller.interaction</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Interaction"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="title" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.title</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Title"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="legendGroup" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.legend</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Legend"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="legend" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.legend.common</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Common"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="toolTip" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.chart.elements.Tooltip</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Tooltip"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="xyContainer" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.xycontainer</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:XYContainer"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="dataLabel" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.datalabel</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Datalabel"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="xAxis" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.axis</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Axis"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="yAxis" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.axis</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Axis"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="background" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.background</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Background"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="plotArea" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.area</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Area"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="selectData" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.&lt;code&gt;{name: "selectData",data:[{
//selected element's detail
target:"Dom Element",//an object pointed to corresponding dom element
data:[{val: "...",//value of this element
ctx:{type:"Dimension"||"Measure"||"MND",
//for Dimension
path:{aa:"...",di:"...",dii:"..."},
//for Measure
path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
//for MND
path:{mg:"...",mi:"..."}
//path: analysis path
//aa: analysis axis index // 0 for analysis axis 1,  1 for analysis 2
//di: dimension index //zero based
//dii: dimension item index //zero based
//mg: measure group index // 0 for measure group 1,1 for measure group 2
//mi: measure index // measure index in measure group zero based
//dii_a1: each dii of di in analysis axis 1 index
//dii_a2: each dii of di in analysis axis 2 index
}},{
//for bubble, tagcloud and scatter, there will be more than one values in one selected element.
var:"...",ctx:"..."}]},{
//if under multi selection, there will be more than one selected elements
target:"...",data:["..."]}]}</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="deselectData" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.&lt;code&gt;{name: "deselectData",data:["---the same as selectedData---"]}</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showTooltip" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.&lt;code&gt;{name:"showTooltip",data:{body:[{
//All measures
name:"...",val:[{//measure value is an array containing only one item
value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
//this object specifies the plot area of the chart
height:"...",width:"...",x:"...",y:"..."},point:{
//this object specifies a point which affects the position of tooltip
x:"...",y:"..."},selectedValues:...//this number specify how many values are selected}}</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="hideTooltip" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="initialized" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the &lt;a href="sap.viz.core.html#createViz" target="_blank"&gt;createViz&lt;/a&gt; function in the API document.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.HorizontalArea100'-->
<xsd:complexType name="_HorizontalArea100Type">
<xsd:complexContent>
<xsd:extension base="n1:_BaseChartType">
<xsd:sequence>
<xsd:element name="general" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.rootContainer</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:RootContainer"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="interaction" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.controller.interaction</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Interaction"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="title" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.title</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Title"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="legendGroup" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.legend</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Legend"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="legend" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.legend.common</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Common"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="toolTip" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.chart.elements.Tooltip</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Tooltip"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="xyContainer" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.xycontainer</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:XYContainer"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="dataLabel" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.datalabel</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Datalabel"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="xAxis" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.axis</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Axis"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="yAxis" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.axis</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Axis"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="background" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.background</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Background"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="plotArea" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.area</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Area"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="selectData" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.&lt;code&gt;{name: "selectData",data:[{
//selected element's detail
target:"Dom Element",//an object pointed to corresponding dom element
data:[{val: "...",//value of this element
ctx:{type:"Dimension"||"Measure"||"MND",
//for Dimension
path:{aa:"...",di:"...",dii:"..."},
//for Measure
path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
//for MND
path:{mg:"...",mi:"..."}
//path: analysis path
//aa: analysis axis index // 0 for analysis axis 1,  1 for analysis 2
//di: dimension index //zero based
//dii: dimension item index //zero based
//mg: measure group index // 0 for measure group 1,1 for measure group 2
//mi: measure index // measure index in measure group zero based
//dii_a1: each dii of di in analysis axis 1 index
//dii_a2: each dii of di in analysis axis 2 index
}},{
//for bubble, tagcloud and scatter, there will be more than one values in one selected element.
var:"...",ctx:"..."}]},{
//if under multi selection, there will be more than one selected elements
target:"...",data:["..."]}]}</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="deselectData" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.&lt;code&gt;{name: "deselectData",data:["---the same as selectedData---"]}</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showTooltip" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.&lt;code&gt;{name:"showTooltip",data:{body:[{
//All measures
name:"...",val:[{//measure value is an array containing only one item
value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
//this object specifies the plot area of the chart
height:"...",width:"...",x:"...",y:"..."},point:{
//this object specifies a point which affects the position of tooltip
x:"...",y:"..."},selectedValues:...//this number specify how many values are selected}}</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="hideTooltip" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="initialized" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the &lt;a href="sap.viz.core.html#createViz" target="_blank"&gt;createViz&lt;/a&gt; function in the API document.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.Line'-->
<xsd:complexType name="_LineType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseChartType">
<xsd:sequence>
<xsd:element name="general" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.rootContainer</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:RootContainer"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="interaction" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.controller.interaction</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Interaction"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="title" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.title</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Title"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="legendGroup" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.legend</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Legend"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="legend" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.legend.common</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Common"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="toolTip" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.chart.elements.Tooltip</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Tooltip"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="xyContainer" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.xycontainer</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:XYContainer"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="dataLabel" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.datalabel</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Datalabel"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="yAxis" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.axis</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Axis"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="xAxis" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.axis</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Axis"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="background" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.background</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Background"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="plotArea" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.line</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Line"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="selectData" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.&lt;code&gt;{name: "selectData",data:[{
//selected element's detail
target:"Dom Element",//an object pointed to corresponding dom element
data:[{val: "...",//value of this element
ctx:{type:"Dimension"||"Measure"||"MND",
//for Dimension
path:{aa:"...",di:"...",dii:"..."},
//for Measure
path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
//for MND
path:{mg:"...",mi:"..."}
//path: analysis path
//aa: analysis axis index // 0 for analysis axis 1,  1 for analysis 2
//di: dimension index //zero based
//dii: dimension item index //zero based
//mg: measure group index // 0 for measure group 1,1 for measure group 2
//mi: measure index // measure index in measure group zero based
//dii_a1: each dii of di in analysis axis 1 index
//dii_a2: each dii of di in analysis axis 2 index
}},{
//for bubble, tagcloud and scatter, there will be more than one values in one selected element.
var:"...",ctx:"..."}]},{
//if under multi selection, there will be more than one selected elements
target:"...",data:["..."]}]}</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="deselectData" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.&lt;code&gt;{name: "deselectData",data:["---the same as selectedData---"]}</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showTooltip" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.&lt;code&gt;{name:"showTooltip",data:{body:[{
//All measures
name:"...",val:[{//measure value is an array containing only one item
value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
//this object specifies the plot area of the chart
height:"...",width:"...",x:"...",y:"..."},point:{
//this object specifies a point which affects the position of tooltip
x:"...",y:"..."},selectedValues:...//this number specify how many values are selected}}</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="hideTooltip" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="initialized" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the &lt;a href="sap.viz.core.html#createViz" target="_blank"&gt;createViz&lt;/a&gt; function in the API document.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.Pie'-->
<xsd:complexType name="_PieType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseChartType">
<xsd:sequence>
<xsd:element name="general" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.rootContainer</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:RootContainer"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="title" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.title</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Title"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="legendGroup" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.legend</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Legend"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="legend" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.legend.common</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Common"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="xyContainer" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.xycontainer</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:XYContainer"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="plotArea" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.pie</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Pie"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="dataLabel" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.datalabel</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Datalabel"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="interaction" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.controller.interaction</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Interaction"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="toolTip" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.chart.elements.Tooltip</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Tooltip"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="dataTransform" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.datatransform</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Datatransform"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="selectData" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.&lt;code&gt;{name: "selectData",data:[{
//selected element's detail
target:"Dom Element",//an object pointed to corresponding dom element
data:[{val: "...",//value of this element
ctx:{type:"Dimension"||"Measure"||"MND",
//for Dimension
path:{aa:"...",di:"...",dii:"..."},
//for Measure
path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
//for MND
path:{mg:"...",mi:"..."}
//path: analysis path
//aa: analysis axis index // 0 for analysis axis 1,  1 for analysis 2
//di: dimension index //zero based
//dii: dimension item index //zero based
//mg: measure group index // 0 for measure group 1,1 for measure group 2
//mi: measure index // measure index in measure group zero based
//dii_a1: each dii of di in analysis axis 1 index
//dii_a2: each dii of di in analysis axis 2 index
}},{
//for bubble, tagcloud and scatter, there will be more than one values in one selected element.
var:"...",ctx:"..."}]},{
//if under multi selection, there will be more than one selected elements
target:"...",data:["..."]}]}</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="deselectData" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.&lt;code&gt;{name: "deselectData",data:["---the same as selectedData---"]}</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showTooltip" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.&lt;code&gt;{name:"showTooltip",data:{body:[{
//All measures
name:"...",val:[{//measure value is an array containing only one item
value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
//this object specifies the plot area of the chart
height:"...",width:"...",x:"...",y:"..."},point:{
//this object specifies a point which affects the position of tooltip
x:"...",y:"..."},selectedValues:...//this number specify how many values are selected}}</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="hideTooltip" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="initialized" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the &lt;a href="sap.viz.core.html#createViz" target="_blank"&gt;createViz&lt;/a&gt; function in the API document.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.Scatter'-->
<xsd:complexType name="_ScatterType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseChartType">
<xsd:sequence>
<xsd:element name="general" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.rootContainer</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:RootContainer"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="title" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.title</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Title"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="legendGroup" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.legend</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Legend"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="legend" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.legend.common</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Common"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="xyContainer" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.xycontainer</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:XYContainer"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="dataLabel" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.datalabel</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Datalabel"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="xAxis" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.axis</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Axis"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="yAxis" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.axis</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Axis"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="background" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.background</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Background"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="plotArea" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.scatter</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Scatter"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="toolTip" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.chart.elements.Tooltip</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Tooltip"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="interaction" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.controller.interaction</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Interaction"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="dataTransform" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.datatransform</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Datatransform"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="selectData" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.&lt;code&gt;{name: "selectData",data:[{
//selected element's detail
target:"Dom Element",//an object pointed to corresponding dom element
data:[{val: "...",//value of this element
ctx:{type:"Dimension"||"Measure"||"MND",
//for Dimension
path:{aa:"...",di:"...",dii:"..."},
//for Measure
path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
//for MND
path:{mg:"...",mi:"..."}
//path: analysis path
//aa: analysis axis index // 0 for analysis axis 1,  1 for analysis 2
//di: dimension index //zero based
//dii: dimension item index //zero based
//mg: measure group index // 0 for measure group 1,1 for measure group 2
//mi: measure index // measure index in measure group zero based
//dii_a1: each dii of di in analysis axis 1 index
//dii_a2: each dii of di in analysis axis 2 index
}},{
//for bubble, tagcloud and scatter, there will be more than one values in one selected element.
var:"...",ctx:"..."}]},{
//if under multi selection, there will be more than one selected elements
target:"...",data:["..."]}]}</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="deselectData" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.&lt;code&gt;{name: "deselectData",data:["---the same as selectedData---"]}</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showTooltip" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.&lt;code&gt;{name:"showTooltip",data:{body:[{
//All measures
name:"...",val:[{//measure value is an array containing only one item
value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
//this object specifies the plot area of the chart
height:"...",width:"...",x:"...",y:"..."},point:{
//this object specifies a point which affects the position of tooltip
x:"...",y:"..."},selectedValues:...//this number specify how many values are selected}}</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="hideTooltip" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="initialized" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the &lt;a href="sap.viz.core.html#createViz" target="_blank"&gt;createViz&lt;/a&gt; function in the API document.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.StackedColumn'-->
<xsd:complexType name="_StackedColumnType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseChartType">
<xsd:sequence>
<xsd:element name="general" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.rootContainer</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:RootContainer"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="interaction" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.controller.interaction</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Interaction"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="title" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.title</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Title"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="legendGroup" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.legend</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Legend"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="legend" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.legend.common</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Common"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="toolTip" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.chart.elements.Tooltip</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Tooltip"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="xyContainer" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.xycontainer</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:XYContainer"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="dataLabel" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.datalabel</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Datalabel"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="yAxis" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.axis</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Axis"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="xAxis" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.axis</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Axis"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="background" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.background</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Background"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="plotArea" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.stackedverticalbar</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:StackedVerticalBar"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="selectData" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.&lt;code&gt;{name: "selectData",data:[{
//selected element's detail
target:"Dom Element",//an object pointed to corresponding dom element
data:[{val: "...",//value of this element
ctx:{type:"Dimension"||"Measure"||"MND",
//for Dimension
path:{aa:"...",di:"...",dii:"..."},
//for Measure
path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
//for MND
path:{mg:"...",mi:"..."}
//path: analysis path
//aa: analysis axis index // 0 for analysis axis 1,  1 for analysis 2
//di: dimension index //zero based
//dii: dimension item index //zero based
//mg: measure group index // 0 for measure group 1,1 for measure group 2
//mi: measure index // measure index in measure group zero based
//dii_a1: each dii of di in analysis axis 1 index
//dii_a2: each dii of di in analysis axis 2 index
}},{
//for bubble, tagcloud and scatter, there will be more than one values in one selected element.
var:"...",ctx:"..."}]},{
//if under multi selection, there will be more than one selected elements
target:"...",data:["..."]}]}</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="deselectData" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.&lt;code&gt;{name: "deselectData",data:["---the same as selectedData---"]}</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showTooltip" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.&lt;code&gt;{name:"showTooltip",data:{body:[{
//All measures
name:"...",val:[{//measure value is an array containing only one item
value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
//this object specifies the plot area of the chart
height:"...",width:"...",x:"...",y:"..."},point:{
//this object specifies a point which affects the position of tooltip
x:"...",y:"..."},selectedValues:...//this number specify how many values are selected}}</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="hideTooltip" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="initialized" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the &lt;a href="sap.viz.core.html#createViz" target="_blank"&gt;createViz&lt;/a&gt; function in the API document.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.StackedColumn100'-->
<xsd:complexType name="_StackedColumn100Type">
<xsd:complexContent>
<xsd:extension base="n1:_BaseChartType">
<xsd:sequence>
<xsd:element name="general" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.rootContainer</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:RootContainer"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="interaction" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.controller.interaction</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Interaction"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="title" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.title</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Title"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="legendGroup" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.legend</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Legend"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="legend" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.legend.common</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Common"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="toolTip" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.chart.elements.Tooltip</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Tooltip"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="xyContainer" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.xycontainer</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:XYContainer"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="dataLabel" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.datalabel</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Datalabel"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="yAxis" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.axis</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Axis"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="xAxis" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.axis</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Axis"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="background" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.background</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Background"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="plotArea" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.stackedverticalbar</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:StackedVerticalBar"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="selectData" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.&lt;code&gt;{name: "selectData",data:[{
//selected element's detail
target:"Dom Element",//an object pointed to corresponding dom element
data:[{val: "...",//value of this element
ctx:{type:"Dimension"||"Measure"||"MND",
//for Dimension
path:{aa:"...",di:"...",dii:"..."},
//for Measure
path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
//for MND
path:{mg:"...",mi:"..."}
//path: analysis path
//aa: analysis axis index // 0 for analysis axis 1,  1 for analysis 2
//di: dimension index //zero based
//dii: dimension item index //zero based
//mg: measure group index // 0 for measure group 1,1 for measure group 2
//mi: measure index // measure index in measure group zero based
//dii_a1: each dii of di in analysis axis 1 index
//dii_a2: each dii of di in analysis axis 2 index
}},{
//for bubble, tagcloud and scatter, there will be more than one values in one selected element.
var:"...",ctx:"..."}]},{
//if under multi selection, there will be more than one selected elements
target:"...",data:["..."]}]}</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="deselectData" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.&lt;code&gt;{name: "deselectData",data:["---the same as selectedData---"]}</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showTooltip" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.&lt;code&gt;{name:"showTooltip",data:{body:[{
//All measures
name:"...",val:[{//measure value is an array containing only one item
value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
//this object specifies the plot area of the chart
height:"...",width:"...",x:"...",y:"..."},point:{
//this object specifies a point which affects the position of tooltip
x:"...",y:"..."},selectedValues:...//this number specify how many values are selected}}</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="hideTooltip" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="initialized" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the &lt;a href="sap.viz.core.html#createViz" target="_blank"&gt;createViz&lt;/a&gt; function in the API document.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.TimeBubble'-->
<xsd:complexType name="_TimeBubbleType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseChartType">
<xsd:sequence>
<xsd:element name="general" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.rootContainer</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:RootContainer"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="title" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.title</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Title"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="legendGroup" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.legend</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Legend"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="legend" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.legend.common</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Common"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="sizeLegend" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.legend.common</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Common"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="xyContainer" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.xycontainer</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:XYContainer"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="dataLabel" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.datalabel</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Datalabel"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="xAxis" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.axis</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Axis"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="yAxis" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.axis</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Axis"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="background" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.background</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Background"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="plotArea" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.bubble</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Bubble"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="toolTip" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.chart.elements.Tooltip</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Tooltip"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="interaction" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.controller.interaction</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Interaction"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="selectData" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.&lt;code&gt;{name: "selectData",data:[{
//selected element's detail
target:"Dom Element",//an object pointed to corresponding dom element
data:[{val: "...",//value of this element
ctx:{type:"Dimension"||"Measure"||"MND",
//for Dimension
path:{aa:"...",di:"...",dii:"..."},
//for Measure
path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
//for MND
path:{mg:"...",mi:"..."}
//path: analysis path
//aa: analysis axis index // 0 for analysis axis 1,  1 for analysis 2
//di: dimension index //zero based
//dii: dimension item index //zero based
//mg: measure group index // 0 for measure group 1,1 for measure group 2
//mi: measure index // measure index in measure group zero based
//dii_a1: each dii of di in analysis axis 1 index
//dii_a2: each dii of di in analysis axis 2 index
}},{
//for bubble, tagcloud and scatter, there will be more than one values in one selected element.
var:"...",ctx:"..."}]},{
//if under multi selection, there will be more than one selected elements
target:"...",data:["..."]}]}</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="deselectData" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.&lt;code&gt;{name: "deselectData",data:["---the same as selectedData---"]}</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showTooltip" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.&lt;code&gt;{name:"showTooltip",data:{body:[{
//All measures
name:"...",val:[{//measure value is an array containing only one item
value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
//this object specifies the plot area of the chart
height:"...",width:"...",x:"...",y:"..."},point:{
//this object specifies a point which affects the position of tooltip
x:"...",y:"..."},selectedValues:...//this number specify how many values are selected}}</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="hideTooltip" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="initialized" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the &lt;a href="sap.viz.core.html#createViz" target="_blank"&gt;createViz&lt;/a&gt; function in the API document.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.Treemap'-->
<xsd:complexType name="_TreemapType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseChartType">
<xsd:sequence>
<xsd:element name="general" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.rootContainer</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:RootContainer"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="title" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.title</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Title"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="legendGroup" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.legend</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Legend"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="legend" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.legend.common</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Common"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="xyContainer" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.xycontainer</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:XYContainer"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="dataLabel" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.datalabel</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Datalabel"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="plotArea" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.treemap</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Treemap"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="toolTip" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.chart.elements.Tooltip</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Tooltip"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="interaction" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Module sap.viz.modules.controller.interaction</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Interaction"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="selectData" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.&lt;code&gt;{name: "selectData",data:[{
//selected element's detail
target:"Dom Element",//an object pointed to corresponding dom element
data:[{val: "...",//value of this element
ctx:{type:"Dimension"||"Measure"||"MND",
//for Dimension
path:{aa:"...",di:"...",dii:"..."},
//for Measure
path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
//for MND
path:{mg:"...",mi:"..."}
//path: analysis path
//aa: analysis axis index // 0 for analysis axis 1,  1 for analysis 2
//di: dimension index //zero based
//dii: dimension item index //zero based
//mg: measure group index // 0 for measure group 1,1 for measure group 2
//mi: measure index // measure index in measure group zero based
//dii_a1: each dii of di in analysis axis 1 index
//dii_a2: each dii of di in analysis axis 2 index
}},{
//for bubble, tagcloud and scatter, there will be more than one values in one selected element.
var:"...",ctx:"..."}]},{
//if under multi selection, there will be more than one selected elements
target:"...",data:["..."]}]}</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="deselectData" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.&lt;code&gt;{name: "deselectData",data:["---the same as selectedData---"]}</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showTooltip" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.&lt;code&gt;{name:"showTooltip",data:{body:[{
//All measures
name:"...",val:[{//measure value is an array containing only one item
value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
//this object specifies the plot area of the chart
height:"...",width:"...",x:"...",y:"..."},point:{
//this object specifies a point which affects the position of tooltip
x:"...",y:"..."},selectedValues:...//this number specify how many values are selected}}</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="hideTooltip" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="initialized" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the &lt;a href="sap.viz.core.html#createViz" target="_blank"&gt;createViz&lt;/a&gt; function in the API document.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.VizContainer'-->
<xsd:complexType name="_VizContainerType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseControlType">
<xsd:sequence>
<xsd:element name="vizData" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Dataset for chart.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Dataset"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="analysisObjectsForPicker" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Available sap.viz.ui5.controls.common.feeds.AnalysisObject for object picker popup UI</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n1:AnalysisObject"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="feeds" minOccurs="0">
<xsd:annotation>
<xsd:documentation>All feeds for chart.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n1:FeedItem"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="vizType" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Type for visualization.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="vizCss" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Css for visualization.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="vizProperties" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Properties for visualization.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="enableMorphing" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Enable morphing for visualization.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="feedsChanged" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Dispatches "feedsChanged" event when the feeding changes due to add/remove/change feeding items on feeding panel, drag and drop object onto VizFrame, or switch chart type by UI operation.
Application should listen to "feedsChanged" event to get the corresponding data and set it back to VizFrame to to update the visualization with the new data.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="vizTypeChanged" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Dispatches "vizTypeChanged" event when viz type was changed</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="vizDefinitionChanged" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Dispatches "vizDefinitionChanged" event when viz definition was changed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="selectData" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.&lt;code&gt;{name: "selectData",data:[{
//selected element's detail
target:"Dom Element",//an object pointed to corresponding dom element
data:[{val: "...",//value of this element
ctx:{type:"Dimension"||"Measure"||"MND",
//for Dimension
path:{aa:"...",di:"...",dii:"..."},
//for Measure
path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},
//for MND
path:{mg:"...",mi:"..."}
//path: analysis path
//aa: analysis axis index // 0 for analysis axis 1, 1 for analysis 2
//di: dimension index //zero based
//dii: dimension item index //zero based
//mg: measure group index // 0 for measure group 1,1 for measure group 2
//mi: measure index // measure index in measure group zero based
//dii_a1: each dii of di in analysis axis 1 index
//dii_a2: each dii of di in analysis axis 2 index
}},{
//for bubble, tagcloud and scatter, there will be more than one values in one selected element.
var:"...",ctx:"..."}]},{
//if under multi selection, there will be more than one selected elements
target:"...",data:["..."]}]}</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="deselectData" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.&lt;code&gt;{name: "deselectData",data:["---the same as selectedData---"]}</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showTooltip" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.&lt;code&gt;{name:"showTooltip",data:{body:[{
//data of one group
name:"...",val:[{
//data of one row
color:"...",label:"...",shape:"...",value:"..."},"..."]},"..."],footer:[{label:"...",value:"..."},"..."],plotArea:{
//this object specifies the plot area of the chart
height:"...",width:"...",x:"...",y:"..."},point:{
//this object specifies a point which affects the position of tooltip
x:"...",y:"..."}}}</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="hideTooltip" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fires when the mouse hover out of the specific part of chart, no data is passed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="initialized" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the &lt;a href="sap.viz.core.html#createViz" target="_blank"&gt;createViz&lt;/a&gt; function in the API document.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.controls.Popover'-->
<xsd:complexType name="_PopoverType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseControlType">
<xsd:attribute name="customDataControl" type="xsd:string">
<xsd:annotation>
<xsd:documentation>A callback function let user customize Popover's content panel.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="actionItems" type="">
<xsd:annotation>
<xsd:documentation>The items of this list or rows of Action List in Home Page inside the Popover.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="formatString" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The pattern is used to format the measures displayed in Popover. 
If value type of format string is String, the format string will be used to format all measures. 
If value type is Object, each format string in the Object will be used to format the specified measure or time dimension.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showLine" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Show line with popover marker in line/combination charts.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.controls.VizFrame'-->
<xsd:complexType name="_VizFrameType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseControlType">
<xsd:sequence>
<xsd:element name="dataset" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Dataset for chart.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Dataset"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="feeds" minOccurs="0">
<xsd:annotation>
<xsd:documentation>All feeds for chart.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n1:FeedItem"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="vizType" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Type for viz frame. User can pass 'chartType' or 'info/chartType'. For example both 'bar' and 'info/bar' will create a info bar chart.
Supported chart type: column, dual_column, bar, dual_bar, stacked_bar, stacked_column, line, dual_line, combination, bullet, time_bullet, bubble, time_bubble, pie, donut,
timeseries_column, timeseries_line, timeseries_scatter, timeseries_bubble, timeseries_stacked_column, timeseries_100_stacked_column, timeseries_bullet, timeseries_waterfall, timeseries_stacked_combination
scatter, vertical_bullet, dual_stacked_bar, 100_stacked_bar, 100_dual_stacked_bar, dual_stacked_column, 100_stacked_column,
100_dual_stacked_column, stacked_combination, horizontal_stacked_combination, dual_stacked_combination, dual_horizontal_stacked_combination, heatmap, treemap,
waterfall, horizontal_waterfall, area, radar</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="vizProperties" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Chart properties, refer to chart property doc for more details.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="vizScales" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Chart scales, refer to chart property doc for more details.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="vizCustomizations" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Chart customizations property, aim to customize existing (build-in) charts
to meet specific LoB requirements.
Currently, supported chart type : column, dual_column, bar, dual_bar, stacked_column, stacked_bar, 100_stacked_bar, 100_stacked_column, 100_dual_stacked_bar, 100_dual_stacked_column, dual_stacked_bar, dual_stacked_column, line, horizontal_line, dual_line, dual_horizontal_line, combination, horizontal_combination, stacked_combination, horizontal_stacked_combination, dual_stacked_combination, dual_horizontal_stacked_combination, scatter, bubble.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="legendVisible" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set chart's legend properties.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="renderComplete" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fires when the rendering ends.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="selectData" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="deselectData" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.controls.VizTooltip'-->
<xsd:complexType name="_VizTooltipType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseControlType">
<xsd:attribute name="formatString" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The pattern is used to format the measures/timeDimensions displayed in Tooltip. 
If value type of format string is String or an object with 'formatPattern' and 'dataUnit' values defined, the value will be used to format all measures(not works with TimeDimension). The value of â€˜formatPatternâ€™ here is a string to define the format pattern of numbers, and value of â€˜dataUnitâ€™ is a postfix string to indicate the unit of measure.
If value type is Object whose key is measure/timeDimension name, the possible value type is string or an object with â€˜formatPatternâ€™ and â€˜dataUnitâ€™ values defined. And each string value will be used to format the specified measure or time dimension.
And TimeDimension does not support 'dataUnit'.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.controls.common.BaseControl'-->
<xsd:complexType name="_BaseControlType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:attribute name="uiConfig" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Configuration for initialization to VizControl. This property could only set via settings parameter in Constructor.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Width of the VizControl as a CSS size.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="height" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Height of the VizControl as a CSS size.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.controls.common.feeds.AnalysisObject'-->
<xsd:complexType name="_AnalysisObjectType">
<xsd:complexContent>
<xsd:extension base="n0:_ElementType">
<xsd:attribute name="uid" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Uid of analysis object</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="name" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Name of an analysis object.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="type" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Type of an analysis object. Enumeration: Measure, Dimension</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="dataType" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Data type of an analysis object. Enumeration: string, number, date</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.controls.common.feeds.FeedItem'-->
<xsd:complexType name="_FeedItemType">
<xsd:complexContent>
<xsd:extension base="n0:_ElementType">
<xsd:attribute name="uid" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Uid of a feed item.
Please reference to bindings section in VIZDOCS to get the exact sUid string for each chart type.

For example:
	Bar chart &gt; bindings &gt; categoryAxis ; color ; valueAxis.
	The 'categoryAxis' should be the sUid for x axis feeding for bar chart.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="type" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Type of a feed item. Enumeration: Measure, Dimension</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="values" type="">
<xsd:annotation>
<xsd:documentation>Value of a feed item.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.core.BaseChart'-->
<xsd:complexType name="_BaseChartType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<xsd:element name="dataset" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Dataset for this chart</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Dataset"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="noData" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Control tree to display when there is no data available</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n0:Control"/>
<xsd:element ref="n0:Fragment"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Width of the Chart as a CSS size.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="height" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Height of the Chart as a CSS size.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="css" type="xsd:string">
<xsd:annotation>
<xsd:documentation>CSS style of Chart.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="beforeCreateViz" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Fired before a new VIZ instance is created. Event parameter "usrOptions" contains the intended value for the parameter with the same name of the createViz call.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.core.BaseStructuredType'-->
<xsd:complexType name="_BaseStructuredTypeType">
<xsd:complexContent>
<xsd:extension base="n0:_ElementType"/>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.data.CustomDataset'-->
<xsd:complexType name="_CustomDatasetType">
<xsd:complexContent>
<xsd:extension base="n1:_DatasetType">
<xsd:attribute name="data" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Data containing dimensions and measures. The format and structure of this data is depends on the chart.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.data.Dataset'-->
<xsd:complexType name="_DatasetType">
<xsd:complexContent>
<xsd:extension base="n0:_ElementType"/>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.data.DimensionDefinition'-->
<xsd:complexType name="_DimensionDefinitionType">
<xsd:complexContent>
<xsd:extension base="n0:_ElementType">
<xsd:attribute name="axis" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Number of axis this dimension belongs to. Currently must be 1 or 2.
Skip this property when use VizFrame.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="value" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Value for the dimension. Usually bound to some model field.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="name" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Name of the dimension as displayed in the chart</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="identity" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Id of the dimension as displayed in the chart</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="displayValue" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Display value for the dimension. Usually bound to some model field. It doesn't work with 'waterfallType'</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="dataType" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Data type of the dimension as displayed in the chart. Enumeration: string, number, date. Currently only in time series chart, it is required to set data type to 'date' if this column is going to be fed on 'timeAxis'.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="sorter" type="xsd:string">
<xsd:annotation>
<xsd:documentation>&lt;code&gt;Sorter&lt;/code&gt; Object of the dimension. There is a default comparator function, if no custom comparator is given. The function returns -1, 0 or 1, depending on the order of the two items and is suitable to be used as a comparator method for Array.sort. The object contains two entries:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;bDescending:&lt;/code&gt;{boolean} (optional) define whether the sort order is descending. Default is false.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fnComparator:&lt;/code&gt;{function} (optional) a user defined comparator function, which have two input values to compare. The input value is an object, which contains value and displayValue (optional).&lt;/li&gt;
&lt;/ul&gt;</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.data.FlattenedDataset'-->
<xsd:complexType name="_FlattenedDatasetType">
<xsd:complexContent>
<xsd:extension base="n1:_DatasetType">
<xsd:sequence>
<xsd:element name="dimensions" minOccurs="0">
<xsd:annotation>
<xsd:documentation>List of definitions of all dimensions in this dataset</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n1:DimensionDefinition"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="measures" minOccurs="0">
<xsd:annotation>
<xsd:documentation>list of definitions of all measures in this dataset</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n1:MeasureDefinition"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="data" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Data containing dimensions and measures.

&lt;b&gt;Note:&lt;/b&gt; This aggregation can only be bound against a model, it cannot be managed
programmatically using the aggregation mutator methods like addData.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Element"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="context" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Additional data which works with data context in this dataset. The input could be an array. Each item represents a dimension that is added as the additional information based on data context. The input could be a string of dimension id,
or object like this {id: "name", showInTooltip: true}. If showInTooltip is false, the dimensions set in this API will not show in
popover or tooltip. However other dimensions in data context will show. In selection event, all dimension information (including the dimension set in this API) will be included.
Context will be shown by default in tooltip if only set context with string or string of array.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="dataChange" type="xsd:string">
<xsd:annotation>
<xsd:documentation>data change event</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="dataRefresh" type="xsd:string">
<xsd:annotation>
<xsd:documentation>data refresh event</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="dataError" type="xsd:string">
<xsd:annotation>
<xsd:documentation>data error event</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.data.MeasureDefinition'-->
<xsd:complexType name="_MeasureDefinitionType">
<xsd:complexContent>
<xsd:extension base="n0:_ElementType">
<xsd:attribute name="group" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Measure group this measure belongs to. Order is significant, number should start from 1.
Skip this property when use VizFrame.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="value" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Value for the measure. Usually bound to some model field.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="name" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Name of the measure as displayed in the chart</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="identity" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Id of the measure as displayed in the chart</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="format" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Format pattern for values of the measure</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="range" type="">
<xsd:annotation>
<xsd:documentation>Value range</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="unit" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Unit of measure</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.types.Area'-->
<xsd:complexType name="_AreaType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseStructuredTypeType">
<xsd:sequence>
<xsd:element name="toolTip" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Settings for the tooltip</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Area_tooltip"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="animation" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Settings for animations in the plot area</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Area_animation"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="marker" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Settings for marker and data point graphics</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Area_marker"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="hoverline" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Settings for the hoverline.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Area_hoverline"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="orientation" type="n1:_Area_orientationType">
<xsd:annotation>
<xsd:documentation>Set whether the area chart is vertical or horizontal</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="colorPalette" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Set the color palette for the chart. This is not supported for dual axis charts that have measureNamesDimension bound to the legend.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="primaryValuesColorPalette" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Set the color palette for axis 1 in dual charts.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="secondaryValuesColorPalette" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Set the color palette for axis 2 in dual chart.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="drawingEffect" type="n1:_Area_drawingEffectType">
<xsd:annotation>
<xsd:documentation>Set the drawing effect for the plot area. If this value is set to 'glossy', the plot area is glossy. If this value is set to 'normal', the plot area is matte.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="mode" type="n1:_Area_modeType">
<xsd:annotation>
<xsd:documentation>Set the display mode of the area chart</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="formatRules" type="">
<xsd:annotation>
<xsd:documentation>Sample value for formatRules:  [{condition: [{Key1:Value1, Key2:Value2}], color:"#00ff00"}, {condition: [{Key3:Value3}], color:"#00ffff"}].   Each rule has two properties: the "condition" and the "color".   Value1, Value2 and Value3 are values. &lt;br /&gt;  The value of a dimension may be &lt;br /&gt;  1, Single value (string), like "China" . &lt;br /&gt;  2. Array (enumeration), like ["UK","USA"] . &lt;br /&gt;  The value of a measure may be &lt;br /&gt;  1, Single value (number), like 20 . &lt;br /&gt;  2. Arry (enumeration), like [121,122] . &lt;br /&gt;  3. Object (range), like {min:100, max 200} . Min and max are inclusive.   If users want to inlcude 200, but not 100 in the range, they may use {min:100.00001, max:200}.   If users want values larger than 100, they may write {min:100}. &lt;br /&gt;   The color is applied if one or more conditions in the condition array is met.   If multiple rules could apply on the same data point, it is the last rule that takes effect.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.types.Area_animation'-->
<xsd:complexType name="_Area_animationType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseStructuredTypeType">
<xsd:attribute name="dataLoading" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set whether the data loading animation is enabled</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="dataUpdating" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set whether the data updating animation is enabled</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="resizing" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set whether the resizing animation is enabled</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.types.Area_hoverline'-->
<xsd:complexType name="_Area_hoverlineType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseStructuredTypeType">
<xsd:attribute name="visible" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set the visibility of the hoverline.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.types.Area_marker'-->
<xsd:complexType name="_Area_markerType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseStructuredTypeType">
<xsd:attribute name="visible" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set the visibility of the markers</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="shape" type="n1:_Area_marker_shapeType">
<xsd:annotation>
<xsd:documentation>Set the shape of the markers</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="size" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Set the marker size for data points, ranging from '4' and '32'. If you enter a value outside that range, the marker size defaults to '4'.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="number" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Set the number to enable events for markers when they are invisible. If the total amount of markers is bigger than this value, markers will remain hidden when selected or hovered over. The default value is Number.POSITIVE_INFINITY, which is the largest possible value.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.types.Area_tooltip'-->
<xsd:complexType name="_Area_tooltipType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseStructuredTypeType">
<xsd:attribute name="enabled" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set whether the tooltip is enabled</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.types.Axis'-->
<xsd:complexType name="_AxisType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseStructuredTypeType">
<xsd:sequence>
<xsd:element name="title" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Settings for the axis title</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Axis_title"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="gridline" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Settings for the gridlines on the axis</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Axis_gridline"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="axisline" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Settings for the axis line</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Axis_axisline"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="label" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Settings for the labels on this axis</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Axis_label"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="indicator" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Settings for the axis indicator</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Axis_indicator"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="scale" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Set the scale of the value axis. This property only works on value type axes.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Axis_scale"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="layoutInfo" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Settings for the layout of the category axis. This property only works for category type axes.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Axis_layoutInfo"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="axisTick" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Settings for the ticks on the axis</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Axis_axisTick"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="isIndependentMode" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set whether the axis works in independent mode. Currently, this property is used only for boxplot charts.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="isPercentMode" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Show the label as a percentage. For example '0.1' would show as '10'.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="isKeepFirstAndLastLabel" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Try to keep the first label and last label when the space is limited.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="lineSize" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Set the thickness of the axis line</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="color" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Set the color of the axis line</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="type" type="n1:_Axis_typeType">
<xsd:annotation>
<xsd:documentation>Set the axis type</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="visible" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set the visibility of the entire axis, including the axis line, gridlines, and labels</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="position" type="n1:_Axis_positionType">
<xsd:annotation>
<xsd:documentation>Set the position of the axis</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="isTruncateAvailable" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set whether truncation logic is available for the category axis</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="forceLabelArea" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set whether the label area is limited to the text area</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="enableLabelSelection" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set whether the label selection effect is enabled. For mobile devices, the default value is 'false'.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="hideTitleFirst" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Hide axis title firstly if the space is limited.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="maxSizeRatio" type="xsd:float">
<xsd:annotation>
<xsd:documentation>The ratio to limit axis' space in its container, which only accepts values between 0 and 1(0 and 1 included). All the invalid values would be replaced by default value.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.types.Axis_axisTick'-->
<xsd:complexType name="_Axis_axisTickType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseStructuredTypeType">
<xsd:attribute name="visible" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set visibility of the ticks on the axis. For mobile devices, the default value is 'false'.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.types.Axis_axisline'-->
<xsd:complexType name="_Axis_axislineType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseStructuredTypeType">
<xsd:attribute name="visible" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set the visibility of the axis line</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.types.Axis_gridline'-->
<xsd:complexType name="_Axis_gridlineType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseStructuredTypeType">
<xsd:attribute name="visible" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set the visibility of gridlines on the axis</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="disable" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Disable gridline or not</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showFirstLine" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set whether the first gridline on the axis appears</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showLastLine" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set whether the last gridline on the axis appears</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="type" type="n1:_Axis_gridline_typeType">
<xsd:annotation>
<xsd:documentation>Set the line type of gridlines on the axis</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="color" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Set the color of the gridlines on the axis</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="size" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Set the line size of gridlines on the axis</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.types.Axis_indicator'-->
<xsd:complexType name="_Axis_indicatorType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseStructuredTypeType">
<xsd:attribute name="enable" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set the visibility of the axis indicator</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.types.Axis_label'-->
<xsd:complexType name="_Axis_labelType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseStructuredTypeType">
<xsd:attribute name="visible" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set the visibility of the labels on this axis</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="numberFormat" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Set the number format for the value axis</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="formatString" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Set the format strings for labels on the value axis. If a single format string is entered, it is applied to all measures. A two-dimensional array of format strings can be entered for scatter matrix charts and multiple charts with measureNamesDimension, to apply different formats to each sub-chart. For all other chart types, the first value of the first dimension of a two-dimensional array is used as a global format string. The following characters are reserved as tokens for format code: MDYHSAmdyhsa#?%0@. The letter "u" is used at the end of a format string to format values in SI units. If the letter "u" is added to a value between 1e12 and 1e-3 before SI units are applied, the value is formatted in exponential style. The remaining syntax matches Excel format strings. The following is a simple example of a two-dimensional array for a chart with two measures: [["#,##0.00 DM;-#,##.00 DM","#,##.00;-#,##.00"]].</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="unitFormatType" type="n1:_Axis_label_unitFormatTypeType">
<xsd:annotation>
<xsd:documentation>Set the unit format type. If set MetricUnits, unit K,M,G,T will be applied, eg, 5000 will display as 5K, 5000000 will display as 5M, 5000000000 will display as 5G and so on. If set FinancialUnits, unit K,M,B,T will be applied. 5000000000 will display as 5B.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="hideSubLevels" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set the visibility of the sub levels of labels on this axis</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.types.Axis_layoutInfo'-->
<xsd:complexType name="_Axis_layoutInfoType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseStructuredTypeType">
<xsd:attribute name="width" type="xsd:float">
<xsd:annotation>
<xsd:documentation>Set the width of the xAxis</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="height" type="xsd:float">
<xsd:annotation>
<xsd:documentation>Set the height of the xAxis</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.types.Axis_scale'-->
<xsd:complexType name="_Axis_scaleType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseStructuredTypeType">
<xsd:attribute name="fixedRange" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set whether the axis range is limited to the range between the minValue and maxValue</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="minValue" type="xsd:float">
<xsd:annotation>
<xsd:documentation>Set the minValue of the value axis</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="maxValue" type="xsd:float">
<xsd:annotation>
<xsd:documentation>Set the maxValue of the value axis</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="fixedTicks" type="">
<xsd:annotation>
<xsd:documentation>Set the specific ticks for value axis. The format should be [{value : "/value/", text : "/text/"}...]. If its length is less than 2, this property will not take effect.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.types.Axis_title'-->
<xsd:complexType name="_Axis_titleType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseStructuredTypeType">
<xsd:attribute name="visible" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set the visibility of the axis title</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="text" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Set the text of the axis title</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="applyAxislineColor" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set the title color to match the color of the axis line</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.types.Background'-->
<xsd:complexType name="_BackgroundType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseStructuredTypeType">
<xsd:sequence>
<xsd:element name="border" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Settings for the border</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Background_border"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="visible" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set the visibility</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="drawingEffect" type="n1:_Background_drawingEffectType">
<xsd:annotation>
<xsd:documentation>Set the drawing effect for the background. If this value is set to 'glossy', the background is glossy. If this value is set to 'normal', the background is matte.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="direction" type="n1:_Background_directionType">
<xsd:annotation>
<xsd:documentation>Set the direction of the color gradient in the background. This only takes effect if the 'drawingEffect' value is set to 'glossy'.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="color" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Define the color for the plot background body.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.types.Background_border'-->
<xsd:complexType name="_Background_borderType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseStructuredTypeType">
<xsd:sequence>
<xsd:element name="left" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Settings for the left border</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Background_border_left"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="right" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Settings for the right border</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Background_border_right"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="top" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Settings for the top border</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Background_border_top"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="bottom" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Settings for the bottom border</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Background_border_bottom"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="stroke" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Settings for the color of the stroke.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="strokeWidth" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Settings for the width of the stroke.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.types.Background_border_bottom'-->
<xsd:complexType name="_Background_border_bottomType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseStructuredTypeType">
<xsd:attribute name="visible" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set the visibility</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.types.Background_border_left'-->
<xsd:complexType name="_Background_border_leftType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseStructuredTypeType">
<xsd:attribute name="visible" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set the visibility</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.types.Background_border_right'-->
<xsd:complexType name="_Background_border_rightType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseStructuredTypeType">
<xsd:attribute name="visible" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set the visibility</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.types.Background_border_top'-->
<xsd:complexType name="_Background_border_topType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseStructuredTypeType">
<xsd:attribute name="visible" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set the visibility</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.types.Bar'-->
<xsd:complexType name="_BarType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseStructuredTypeType">
<xsd:sequence>
<xsd:element name="toolTip" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Settings for tooltip related properties</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Bar_tooltip"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="animation" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Settings for animations in the plot area</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Bar_animation"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="orientation" type="n1:_Bar_orientationType">
<xsd:annotation>
<xsd:documentation>Set the orientation of the plot area.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="colorPalette" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Set the color palette for the chart. This is not supported for dual axis charts that have measureNamesDimension bound to the legend.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="primaryValuesColorPalette" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Set the color palette for axis 1 in dual charts.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="secondaryValuesColorPalette" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Set the color palette for axis 2 in dual chart.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="drawingEffect" type="n1:_Bar_drawingEffectType">
<xsd:annotation>
<xsd:documentation>Set the drawing effect for the plot area. If this value is set to 'glossy', the plot area is glossy. If this value is set to 'normal', the plot area is matte.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="isRoundCorner" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set whether bars have rounded corners</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="imageFill" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set where the image fill is enabled.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="imagePalette" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Set the images that fill the bars.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="formatRules" type="">
<xsd:annotation>
<xsd:documentation>Sample value for formatRules:  [{condition: [{Key1:Value1, Key2:Value2}], color:"#00ff00"}, {condition: [{Key3:Value3}], color:"#00ffff"}].   Each rule has two properties: the "condition" and the "color".   Value1, Value2 and Value3 are values. &lt;br /&gt;  The value of a dimension may be &lt;br /&gt;  1, Single value (string), like "China" . &lt;br /&gt;  2. Array (enumeration), like ["UK","USA"] . &lt;br /&gt;  The value of a measure may be &lt;br /&gt;  1, Single value (number), like 20 . &lt;br /&gt;  2. Arry (enumeration), like [121,122] . &lt;br /&gt;  3. Object (range), like {min:100, max 200} . Min and max are inclusive.   If users want to inlcude 200, but not 100 in the range, they may use {min:100.00001, max:200}.   If users want values larger than 100, they may write {min:100}. &lt;br /&gt;   The color is applied if one or more conditions in the condition array is met.   If multiple rules could apply on the same data point, it is the last rule that takes effect.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.types.Bar_animation'-->
<xsd:complexType name="_Bar_animationType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseStructuredTypeType">
<xsd:attribute name="dataLoading" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set whether the data loading animation is enabled</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="dataUpdating" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set whether the data updating animation is enabled</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="resizing" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set whether the resizing animation is enabled</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.types.Bar_tooltip'-->
<xsd:complexType name="_Bar_tooltipType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseStructuredTypeType">
<xsd:attribute name="enabled" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set whether the tooltip is enabled</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.types.Bubble'-->
<xsd:complexType name="_BubbleType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseStructuredTypeType">
<xsd:sequence>
<xsd:element name="animation" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Settings for animations in bubble and scatter charts</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Bubble_animation"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="axisTooltip" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Set tooltip related properties.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Bubble_axisTooltip"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="hoverline" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Settings for hoverline properties.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Bubble_hoverline"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="colorPalette" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Set the color of the bubbles</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="shapePalette" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Set the shape of the bubbles</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="minMarkerSize" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Set the minimum size of the data points</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="maxPriValue" type="xsd:float">
<xsd:annotation>
<xsd:documentation>Set the max value of primary values</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="minPriValue" type="xsd:float">
<xsd:annotation>
<xsd:documentation>Set the minimum value of primary values</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="maxSecValue" type="xsd:float">
<xsd:annotation>
<xsd:documentation>Set the max value of secondary values</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="minSecValue" type="xsd:float">
<xsd:annotation>
<xsd:documentation>Set the minimum value of secondary values</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="maxBubbleWidth" type="xsd:float">
<xsd:annotation>
<xsd:documentation>Set the max value of bubble width values</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="minBubbleWidth" type="xsd:float">
<xsd:annotation>
<xsd:documentation>Set the minimum value of bubble width values</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="maxBubbleHeight" type="xsd:float">
<xsd:annotation>
<xsd:documentation>Set the max value of bubble height values</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="minBubbleHeight" type="xsd:float">
<xsd:annotation>
<xsd:documentation>Set the minimum value of bubble height values</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="timeBased" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set whether it is time based scatter/bubble</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="drawingEffect" type="n1:_Bubble_drawingEffectType">
<xsd:annotation>
<xsd:documentation>Set the drawing effect for the bubbles</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="formatRules" type="">
<xsd:annotation>
<xsd:documentation>Sample value for formatRules:  [{condition: [{Key1:Value1, Key2:Value2}], color:"#00ff00"}, {condition: [{Key3:Value3}], color:"#00ffff"}].   Each rule has two properties: the "condition" and the "color".   Value1, Value2 and Value3 are values. &lt;br /&gt;  The value of a dimension may be &lt;br /&gt;  1, Single value (string), like "China" . &lt;br /&gt;  2. Array (enumeration), like ["UK","USA"] . &lt;br /&gt;  The value of a measure may be &lt;br /&gt;  1, Single value (number), like 20 . &lt;br /&gt;  2. Arry (enumeration), like [121,122] . &lt;br /&gt;  3. Object (range), like {min:100, max 200} . Min and max are inclusive.   If users want to inlcude 200, but not 100 in the range, they may use {min:100.00001, max:200}.   If users want values larger than 100, they may write {min:100}. &lt;br /&gt;   The color is applied if one or more conditions in the condition array is met.   If multiple rules could apply on the same data point, it is the last rule that takes effect.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showNegativeValues" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Show/hide the data of negetive value.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.types.Bubble_animation'-->
<xsd:complexType name="_Bubble_animationType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseStructuredTypeType">
<xsd:attribute name="dataLoading" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set whether the data loading animation is enabled</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="dataUpdating" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set whether the data updating animation is enabled</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="resizing" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set whether the resizing animation is enabled</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.types.Bubble_axisTooltip'-->
<xsd:complexType name="_Bubble_axisTooltipType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseStructuredTypeType">
<xsd:attribute name="visible" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>enabled/disabled tooltip.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="formatString" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Set format string for small tooltip.The first one is applied to xAxis and the second one is applied to yAxis.Any character in "MDYHSAmdyhsa#?%0@" is reserved as a token for format code.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.types.Bubble_hoverline'-->
<xsd:complexType name="_Bubble_hoverlineType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseStructuredTypeType">
<xsd:attribute name="visible" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set to enabled/disabled hoverline or not.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.types.Bullet'-->
<xsd:complexType name="_BulletType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseStructuredTypeType">
<xsd:sequence>
<xsd:element name="toolTip" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Settings for tooltip related properties</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Bullet_tooltip"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="orientation" type="n1:_Bullet_orientationType">
<xsd:annotation>
<xsd:documentation>Set the orientation of the plot area.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="colorPalette" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Set the color palette for the chart.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="primaryValuesColorPalette" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Set the color palette for axis 1 in dual charts.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="secondaryValuesColorPalette" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Set the color palette for axis 2 in dual chart.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="drawingEffect" type="n1:_Bullet_drawingEffectType">
<xsd:annotation>
<xsd:documentation>Set the drawing effect for the plot area. If this value is set to 'glossy', the plot area is glossy. If this value is set to 'normal', the plot area is matte.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="isRoundCorner" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set whether bars have rounded corners</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="referenceValuesColorPalette" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Set the color palette reference value color in bullet chart.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.types.Bullet_tooltip'-->
<xsd:complexType name="_Bullet_tooltipType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseStructuredTypeType">
<xsd:attribute name="enabled" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set whether the tooltip is enabled</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.types.Combination'-->
<xsd:complexType name="_CombinationType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseStructuredTypeType">
<xsd:sequence>
<xsd:element name="toolTip" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Settings for the tooltip</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Combination_tooltip"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="animation" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Settings for animations in the plot area</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Combination_animation"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="dataShape" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Settings for the shape of data series</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Combination_dataShape"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="bar" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Settings for bar properties</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Combination_bar"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="line" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Settings for line properties</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Combination_line"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="orientation" type="n1:_Combination_orientationType">
<xsd:annotation>
<xsd:documentation>Set the orientation of the plot area.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="colorPalette" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Set the color palette for the chart. This is not supported for dual axis charts that have measureNamesDimension bound to the legend.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="primaryValuesColorPalette" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Set the color palette for axis 1 in dual charts.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="secondaryValuesColorPalette" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Set the color palette for axis 2 in dual chart.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="drawingEffect" type="n1:_Combination_drawingEffectType">
<xsd:annotation>
<xsd:documentation>Set the drawing effect for the plot area. If this value is set to 'glossy', the plot area is glossy. If this value is set to 'normal', the plot area is matte.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="formatRules" type="">
<xsd:annotation>
<xsd:documentation>Sample value for formatRules:  [{condition: [{Key1:Value1, Key2:Value2}], color:"#00ff00"}, {condition: [{Key3:Value3}], color:"#00ffff"}].   Each rule has two properties: the "condition" and the "color".   Value1, Value2 and Value3 are values. &lt;br /&gt;  The value of a dimension may be &lt;br /&gt;  1, Single value (string), like "China" . &lt;br /&gt;  2. Array (enumeration), like ["UK","USA"] . &lt;br /&gt;  The value of a measure may be &lt;br /&gt;  1, Single value (number), like 20 . &lt;br /&gt;  2. Arry (enumeration), like [121,122] . &lt;br /&gt;  3. Object (range), like {min:100, max 200} . Min and max are inclusive.   If users want to inlcude 200, but not 100 in the range, they may use {min:100.00001, max:200}.   If users want values larger than 100, they may write {min:100}. &lt;br /&gt;   The color is applied if one or more conditions in the condition array is met.   If multiple rules could apply on the same data point, it is the last rule that takes effect.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.types.Combination_animation'-->
<xsd:complexType name="_Combination_animationType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseStructuredTypeType">
<xsd:attribute name="dataLoading" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set whether the data loading animation is enabled</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="dataUpdating" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set whether the data updating animation is enabled</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="resizing" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set whether the resizing animation is enabled</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.types.Combination_bar'-->
<xsd:complexType name="_Combination_barType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseStructuredTypeType">
<xsd:attribute name="isRoundCorner" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set whether the bars have rounded corners</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.types.Combination_dataShape'-->
<xsd:complexType name="_Combination_dataShapeType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseStructuredTypeType">
<xsd:attribute name="primaryAxis" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Set the shape of data series on the primary axis</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="secondaryAxis" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Set the shape of data series on the secondary axis</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="secondAxis" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Set the shape of data series on the secondary axis (Old version; still works)</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.types.Combination_line'-->
<xsd:complexType name="_Combination_lineType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseStructuredTypeType">
<xsd:sequence>
<xsd:element name="marker" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Settings for the visual markers for data points</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Combination_line_marker"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="width" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Set the width of lines, ranging from '1' to '7'. If you enter a value outside the range, the line width will default to '2'.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.types.Combination_line_marker'-->
<xsd:complexType name="_Combination_line_markerType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseStructuredTypeType">
<xsd:attribute name="visible" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set the visibility of the data point markers</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="shape" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Set the shape of the data point markers</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="size" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Set the size of the data point markers, ranging from '4' to '32'. If you enter a value outside the range, the size defaults to '6'.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="number" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Set the number to enable events for markers when they are invisible. If the total amount of markers is bigger than this value, markers will remain hidden when selected or hovered over. The default value is Number.POSITIVE_INFINITY, which is the largest possible value.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.types.Combination_tooltip'-->
<xsd:complexType name="_Combination_tooltipType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseStructuredTypeType">
<xsd:attribute name="enabled" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set whether the tooltip is enabled</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.types.Datalabel'-->
<xsd:complexType name="_DatalabelType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseStructuredTypeType">
<xsd:attribute name="visible" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set whether the data labels are visible</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="hideWhenOverlap" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Always show all data labels even they are overlapped</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="isDonut" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set whether the chart is a donut chart. Use only for donut charts.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="type" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Set the type of label</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="automaticInOutside" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to 'true', the data labels will be automatically placed outside when the data label position property is inside, and vice versa</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showZero" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to 'true', the value zero is shown in the data labels</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="isGeoChart" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set whether the chart is a geo chart</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="isBubbleChart" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set whether the chart is a bubble chart</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="isStackMode" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set whether the chart is a stack chart. Set for stack chart only.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="isPercentMode" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set whether the chart is a percent chart. Set for percent chart only.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="positionPreference" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to 'true', the data label position is defined by the property 'outsidePosition', regardless of whether the data label value is negative</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="outsideVisible" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to 'true', the data label is visible when it is outside</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="outsidePosition" type="n1:_Datalabel_outsidePositionType">
<xsd:annotation>
<xsd:documentation>If set to 'true', the data label is positioned above the element when it is outside</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="paintingMode" type="n1:_Datalabel_paintingModeType">
<xsd:annotation>
<xsd:documentation>Set painting mode of data labels</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="position" type="n1:_Datalabel_positionType">
<xsd:annotation>
<xsd:documentation>Set position of data labels</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="orientation" type="n1:_Datalabel_orientationType">
<xsd:annotation>
<xsd:documentation>Set orientation of data labels</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="respectShapeWidth" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to 'true', the data label is automatically hidden when bubble width isn't enough to show the whole label in single bubble chart.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="formatString" type="">
<xsd:annotation>
<xsd:documentation>Set the format strings for the data labels. For dual axis charts, the first array is applied to the primary axis and the second array is applied to the second axis. If you enter fewer format strings into an array than there are measures in the respective axis, then the last format string is applied to all remaining measures. The following characters are reserved as tokens for format code: MDYHSAmdyhsa#?%0@. The following is a simple example: [["0.00%"],["0.00%"]].</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.types.Datatransform'-->
<xsd:complexType name="_DatatransformType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseStructuredTypeType">
<xsd:sequence>
<xsd:element name="autoBinning" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Settings for the auto-binning algorithm</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Datatransform_autoBinning"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="dataSampling" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Settings for the data sampling algorithm</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Datatransform_dataSampling"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.types.Datatransform_autoBinning'-->
<xsd:complexType name="_Datatransform_autoBinningType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseStructuredTypeType">
<xsd:attribute name="enable" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set whether data auto-binning is enabled.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="binNumber" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Set the bin number.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.types.Datatransform_dataSampling'-->
<xsd:complexType name="_Datatransform_dataSamplingType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseStructuredTypeType">
<xsd:sequence>
<xsd:element name="grid" minOccurs="0">
<xsd:annotation>
<xsd:documentation>add documentation for aggregation grid</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Datatransform_dataSampling_grid"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="enable" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set whether data sampling is enabled.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="sizeFactor" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Set the data point percentage in the original dataset</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="numberPrecondition" type="xsd:int">
<xsd:annotation>
<xsd:documentation>If the data point is larger than this value, data sampling is triggered.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.types.Datatransform_dataSampling_grid'-->
<xsd:complexType name="_Datatransform_dataSampling_gridType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseStructuredTypeType">
<xsd:attribute name="row" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Set the number of rows in the grid.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="column" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Set the number of columns in the grid.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.types.Heatmap'-->
<xsd:complexType name="_HeatmapType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseStructuredTypeType">
<xsd:sequence>
<xsd:element name="border" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Settings for the border</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Heatmap_border"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="animation" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Settings for animations in the plot area</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Heatmap_animation"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="toolTip" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Settings for tooltip</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Heatmap_tooltip"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="startColor" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Set the starting color of the heat map</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="endColor" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Set the end color of the heat map</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="colorPalette" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Set the color palette for the various sectors. For example, ["#748CB2", "#9CC677", "#EACF5E", "#F9AD79", "#D16A7C"].</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="legendValues" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Set the MBC legend values. For example, [10,11,12,13,14,15]. The values in the array should be in ascending order. If the number of values in the array is smaller than the MBC legend segment number, the MBC legend automatically calculates the values according to the data. If the number of values in the legendValues array is larger than MBC legend segment number, then only the first "segment number + 1" values are used.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="formatRules" type="">
<xsd:annotation>
<xsd:documentation>Sample value for formatRules:  [{condition: [{Key1:Value1, Key2:Value2}], color:"#00ff00"}, {condition: [{Key3:Value3}], color:"#00ffff"}].   Each rule has two properties: the "condition" and the "color".   Value1, Value2 and Value3 are values. &lt;br /&gt;  The value of a dimension may be &lt;br /&gt;  1, Single value (string), like "China" . &lt;br /&gt;  2. Array (enumeration), like ["UK","USA"] . &lt;br /&gt;  The value of a measure may be &lt;br /&gt;  1, Single value (number), like 20 . &lt;br /&gt;  2. Arry (enumeration), like [121,122] . &lt;br /&gt;  3. Object (range), like {min:100, max 200} . Min and max are inclusive.   If users want to inlcude 200, but not 100 in the range, they may use {min:100.00001, max:200}.   If users want values larger than 100, they may write {min:100}. &lt;br /&gt;   The color is applied if one or more conditions in the condition array is met.   If multiple rules could apply on the same data point, it is the last rule that takes effect.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.types.Heatmap_animation'-->
<xsd:complexType name="_Heatmap_animationType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseStructuredTypeType">
<xsd:attribute name="dataLoading" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set whether the data loading animation is enabled</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="dataUpdating" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set whether the data updating animation is enabled</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="resizing" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set whether the resizing animation is enabled</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.types.Heatmap_border'-->
<xsd:complexType name="_Heatmap_borderType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseStructuredTypeType">
<xsd:attribute name="visible" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set the visibility of the zone edge</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.types.Heatmap_tooltip'-->
<xsd:complexType name="_Heatmap_tooltipType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseStructuredTypeType">
<xsd:attribute name="enabled" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set whether the tooltip is enabled</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.types.Legend'-->
<xsd:complexType name="_LegendType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseStructuredTypeType">
<xsd:sequence>
<xsd:element name="layout" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Settings for the layout of the legend area</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Legend_layout"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.types.Legend_layout'-->
<xsd:complexType name="_Legend_layoutType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseStructuredTypeType">
<xsd:attribute name="position" type="n1:_Legend_layout_positionType">
<xsd:annotation>
<xsd:documentation>Set the position of the legend area</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="priority" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Set the priority of the position for the legend area</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.types.Line'-->
<xsd:complexType name="_LineType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseStructuredTypeType">
<xsd:sequence>
<xsd:element name="toolTip" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Settings for the tooltip</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Line_tooltip"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="animation" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Settings for animations.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Line_animation"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="marker" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Settings for marker/data point graphics</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Line_marker"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="hoverline" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Settings for the hoverline.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Line_hoverline"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="orientation" type="n1:_Line_orientationType">
<xsd:annotation>
<xsd:documentation>Set the orientation of the plot area.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="colorPalette" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Set the color palette for the chart. This is not supported for dual axis charts that have measureNamesDimension bound to the legend.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="primaryValuesColorPalette" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Set the color palette for axis 1 in dual charts.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="secondaryValuesColorPalette" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Set the color palette for axis 2 in dual chart.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="drawingEffect" type="n1:_Line_drawingEffectType">
<xsd:annotation>
<xsd:documentation>Set the drawing effect for the plot area. If this value is set to 'glossy', the plot area is glossy. If this value is set to 'normal', the plot area is matte.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="width" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Set the width of the lines, ranging from '1' to '7'. If you enter a value outside that range, the line width defaults to '2'.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showGroupDetail" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>mouse over show one catergory detail</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="formatRules" type="">
<xsd:annotation>
<xsd:documentation>Sample value for formatRules:  [{condition: [{Key1:Value1, Key2:Value2}], color:"#00ff00"}, {condition: [{Key3:Value3}], color:"#00ffff"}].   Each rule has two properties: the "condition" and the "color".   Value1, Value2 and Value3 are values. &lt;br /&gt;  The value of a dimension may be &lt;br /&gt;  1, Single value (string), like "China" . &lt;br /&gt;  2. Array (enumeration), like ["UK","USA"] . &lt;br /&gt;  The value of a measure may be &lt;br /&gt;  1, Single value (number), like 20 . &lt;br /&gt;  2. Arry (enumeration), like [121,122] . &lt;br /&gt;  3. Object (range), like {min:100, max 200} . Min and max are inclusive.   If users want to inlcude 200, but not 100 in the range, they may use {min:100.00001, max:200}.   If users want values larger than 100, they may write {min:100}. &lt;br /&gt;   The color is applied if one or more conditions in the condition array is met.   If multiple rules could apply on the same data point, it is the last rule that takes effect.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.types.Line_animation'-->
<xsd:complexType name="_Line_animationType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseStructuredTypeType">
<xsd:attribute name="dataLoading" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set whether the data loading animation is enabled</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="dataUpdating" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set whether the data updating animation is enabled</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="resizing" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set whether the resizing animation is enabled</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.types.Line_hoverline'-->
<xsd:complexType name="_Line_hoverlineType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseStructuredTypeType">
<xsd:attribute name="visible" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set the visibility of the hoverline.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.types.Line_marker'-->
<xsd:complexType name="_Line_markerType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseStructuredTypeType">
<xsd:attribute name="visible" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set the visibility of the markers</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="shape" type="n1:_Line_marker_shapeType">
<xsd:annotation>
<xsd:documentation>Set the shape of the markers</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="size" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Set the marker size for data points, ranging from '4' to '32'. If you enter a value outside that range, the marker size defaults to '6'.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="number" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Set the number to enable events for markers when they are invisible. If the total amount of markers is bigger than this value, markers will remain hidden when selected or hovered over. The default value is Number.POSITIVE_INFINITY, which is the largest possible value.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.types.Line_tooltip'-->
<xsd:complexType name="_Line_tooltipType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseStructuredTypeType">
<xsd:attribute name="enabled" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set whether the tooltip is enabled</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.types.Pie'-->
<xsd:complexType name="_PieType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseStructuredTypeType">
<xsd:sequence>
<xsd:element name="animation" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Settings for animations in the plot area</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Pie_animation"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="toolTip" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Settings for tooltip related properties</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Pie_tooltip"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="colorPalette" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Set the color palette for the sectors of the pie chart</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="isDonut" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set the chart to display as a donut or a pie. If this value is set to 'true', the chart displays as a donut. If this value is set to 'false', the chart displays as a pie.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="isGeoPie" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set whether the chart displays as a geo pie chart. If this value is set to 'true', the chart displays as a geo pie chart. If this value is set to 'false', the chart does not display as a geo pie chart.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="valign" type="n1:_Pie_valignType">
<xsd:annotation>
<xsd:documentation>Set the vertical aligment of the chart</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="drawingEffect" type="n1:_Pie_drawingEffectType">
<xsd:annotation>
<xsd:documentation>Set the drawing effect of the pie</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="formatRules" type="">
<xsd:annotation>
<xsd:documentation>Rules to format data points, sample:  [{condition: [{Key1:"Value1", Key2:"Value2"}], color:"#00ff00"}, {condition: [{Key3:"Value3"}], color:"#00ffff"}].  Each rule has two properties: "condition" and "color". The relation among the condition object in "condition" array is "OR",  which means the data point that met any condition in the array will apply the "color".  If multiple rules could apply on the same data point, the last rule would take effect.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="plotScale" type="xsd:float">
<xsd:annotation>
<xsd:documentation>Set the plot scale of the pie</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.types.Pie_animation'-->
<xsd:complexType name="_Pie_animationType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseStructuredTypeType">
<xsd:attribute name="dataLoading" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set whether the data loading animation is enabled</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="dataUpdating" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set whether the data updating animation is enabled</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="resizing" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set whether the resizing animation is enabled</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.types.Pie_tooltip'-->
<xsd:complexType name="_Pie_tooltipType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseStructuredTypeType">
<xsd:attribute name="visible" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set whether tooltip is enabled</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="valueFormat" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Set the number format of the measure value in tooltip</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="percentageFormat" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Set the number format of the percentage label in tooltip</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="formatString" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Set format string of tooltip. The first string is applied to value and the second is applied to percentage.Any character in "MDYHSAmdyhsa#?%0@" is reserved as a token for format code.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.types.RootContainer'-->
<xsd:complexType name="_RootContainerType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseStructuredTypeType">
<xsd:sequence>
<xsd:element name="layout" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Settings for the layout of the root container</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:RootContainer_layout"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.types.RootContainer_layout'-->
<xsd:complexType name="_RootContainer_layoutType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseStructuredTypeType">
<xsd:attribute name="adjustPolicy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Indicates the layout adjust policy</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="padding" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Set the universal padding value. This single value is applied to all sides of the chart. Individual settings for each edge are also supported.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="paddingTop" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Set the padding value for the top side</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="paddingLeft" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Set the padding value for the left side</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="paddingRight" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Set the padding value for the right side</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="paddingBottom" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Set the padding value for the bottom side</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="vgap" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Vertical gap value between UI components</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="hgap" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Horizontal gap value between UI components</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="hideAxisTitleFirst" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Hide axis title firstly if the space is limited.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.types.Scatter'-->
<xsd:complexType name="_ScatterType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseStructuredTypeType">
<xsd:sequence>
<xsd:element name="animation" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Settings for animations in bubble and scatter charts</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Scatter_animation"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="axisTooltip" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Set tooltip related properties.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Scatter_axisTooltip"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="hoverline" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Settings for hoverline properties.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Scatter_hoverline"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="colorPalette" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Set the color of the bubbles</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="shapePalette" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Set the shape of the bubbles</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="maxPriValue" type="xsd:float">
<xsd:annotation>
<xsd:documentation>Set the max value of primary values</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="minPriValue" type="xsd:float">
<xsd:annotation>
<xsd:documentation>Set the minimum value of primary values</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="maxSecValue" type="xsd:float">
<xsd:annotation>
<xsd:documentation>Set the max value of secondary values</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="minSecValue" type="xsd:float">
<xsd:annotation>
<xsd:documentation>Set the minimum value of secondary values</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="timeBased" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set whether it is time based scatter/bubble</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="drawingEffect" type="n1:_Scatter_drawingEffectType">
<xsd:annotation>
<xsd:documentation>Set the drawing effect for the bubbles</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="formatRules" type="">
<xsd:annotation>
<xsd:documentation>Sample value for formatRules:  [{condition: [{Key1:Value1, Key2:Value2}], color:"#00ff00"}, {condition: [{Key3:Value3}], color:"#00ffff"}].   Each rule has two properties: the "condition" and the "color".   Value1, Value2 and Value3 are values. &lt;br /&gt;  The value of a dimension may be &lt;br /&gt;  1, Single value (string), like "China" . &lt;br /&gt;  2. Array (enumeration), like ["UK","USA"] . &lt;br /&gt;  The value of a measure may be &lt;br /&gt;  1, Single value (number), like 20 . &lt;br /&gt;  2. Arry (enumeration), like [121,122] . &lt;br /&gt;  3. Object (range), like {min:100, max 200} . Min and max are inclusive.   If users want to inlcude 200, but not 100 in the range, they may use {min:100.00001, max:200}.   If users want values larger than 100, they may write {min:100}. &lt;br /&gt;   The color is applied if one or more conditions in the condition array is met.   If multiple rules could apply on the same data point, it is the last rule that takes effect.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showNegativeValues" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Show/hide the data of negetive value.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="markerSize" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Set the marker size for data points. The available range is from '4' to '32'.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.types.Scatter_animation'-->
<xsd:complexType name="_Scatter_animationType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseStructuredTypeType">
<xsd:attribute name="dataLoading" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set whether the data loading animation is enabled</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="dataUpdating" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set whether the data updating animation is enabled</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="resizing" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set whether the resizing animation is enabled</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.types.Scatter_axisTooltip'-->
<xsd:complexType name="_Scatter_axisTooltipType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseStructuredTypeType">
<xsd:attribute name="visible" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>enabled/disabled tooltip.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="formatString" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Set format string for small tooltip.The first one is applied to xAxis and the second one is applied to yAxis.Any character in "MDYHSAmdyhsa#?%0@" is reserved as a token for format code.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.types.Scatter_hoverline'-->
<xsd:complexType name="_Scatter_hoverlineType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseStructuredTypeType">
<xsd:attribute name="visible" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set to enabled/disabled hoverline or not.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.types.StackedVerticalBar'-->
<xsd:complexType name="_StackedVerticalBarType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseStructuredTypeType">
<xsd:sequence>
<xsd:element name="toolTip" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Settings for tooltip related properties</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:StackedVerticalBar_tooltip"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="animation" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Settings for animations in the plot area</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:StackedVerticalBar_animation"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="orientation" type="n1:_StackedVerticalBar_orientationType">
<xsd:annotation>
<xsd:documentation>Set the orientation of the plot area.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="colorPalette" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Set the color palette for the chart. This is not supported for dual axis charts that have measureNamesDimension bound to the legend.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="primaryValuesColorPalette" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Set the color palette for axis 1 in dual charts.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="secondaryValuesColorPalette" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Set the color palette for axis 2 in dual chart.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="drawingEffect" type="n1:_StackedVerticalBar_drawingEffectType">
<xsd:annotation>
<xsd:documentation>Set the drawing effect for the plot area. If this value is set to 'glossy', the plot area is glossy. If this value is set to 'normal', the plot area is matte.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="isRoundCorner" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set whether bars have rounded corners</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="formatRules" type="">
<xsd:annotation>
<xsd:documentation>Sample value for formatRules:  [{condition: [{Key1:Value1, Key2:Value2}], color:"#00ff00"}, {condition: [{Key3:Value3}], color:"#00ffff"}].   Each rule has two properties: the "condition" and the "color".   Value1, Value2 and Value3 are values. &lt;br /&gt;  The value of a dimension may be &lt;br /&gt;  1, Single value (string), like "China" . &lt;br /&gt;  2. Array (enumeration), like ["UK","USA"] . &lt;br /&gt;  The value of a measure may be &lt;br /&gt;  1, Single value (number), like 20 . &lt;br /&gt;  2. Arry (enumeration), like [121,122] . &lt;br /&gt;  3. Object (range), like {min:100, max 200} . Min and max are inclusive.   If users want to inlcude 200, but not 100 in the range, they may use {min:100.00001, max:200}.   If users want values larger than 100, they may write {min:100}. &lt;br /&gt;   The color is applied if one or more conditions in the condition array is met.   If multiple rules could apply on the same data point, it is the last rule that takes effect.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="mode" type="n1:_StackedVerticalBar_modeType">
<xsd:annotation>
<xsd:documentation>Set the display mode for stacked vertical bar charts</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.types.StackedVerticalBar_animation'-->
<xsd:complexType name="_StackedVerticalBar_animationType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseStructuredTypeType">
<xsd:attribute name="dataLoading" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set whether the data loading animation is enabled</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="dataUpdating" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set whether the data updating animation is enabled</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="resizing" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set whether the resizing animation is enabled</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.types.StackedVerticalBar_tooltip'-->
<xsd:complexType name="_StackedVerticalBar_tooltipType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseStructuredTypeType">
<xsd:attribute name="enabled" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set whether the tooltip is enabled</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.types.Title'-->
<xsd:complexType name="_TitleType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseStructuredTypeType">
<xsd:sequence>
<xsd:element name="layout" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Settings for layout of title</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Title_layout"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="visible" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set the visibility of the main title</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="text" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Set the text of the main title</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="alignment" type="n1:_Title_alignmentType">
<xsd:annotation>
<xsd:documentation>Set the alignment of the main title</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.types.Title_layout'-->
<xsd:complexType name="_Title_layoutType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseStructuredTypeType">
<xsd:attribute name="position" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Set the position of the title</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="priority" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Set the priority of the position for the title</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.types.Tooltip'-->
<xsd:complexType name="_TooltipType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseStructuredTypeType">
<xsd:sequence>
<xsd:element name="background" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Define the background style of the tooltip.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Tooltip_background"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="footerLabel" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Define the style of the label of the tooltip footer.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Tooltip_footerLabel"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="separationLine" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Define the color of the value of the tooltip separation line.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Tooltip_separationLine"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="bodyDimensionLabel" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Define the color of the dimension name of the tooltip body.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Tooltip_bodyDimensionLabel"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="bodyDimensionValue" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Define the color of the dimension value of the tooltip body.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Tooltip_bodyDimensionValue"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="bodyMeasureLabel" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Define the color of the measure name of the tooltip body.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Tooltip_bodyMeasureLabel"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="bodyMeasureValue" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Define the color of the measure value of the tooltip body.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Tooltip_bodyMeasureValue"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="closeButton" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Define the background and border color of tooltip close button.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Tooltip_closeButton"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="preRender" type="xsd:string">
<xsd:annotation>
<xsd:documentation>A callback function can be specified as a parameter and passed to chart options when the user calls the createViz function. This callback function is called before the tooltip is rendered. The input parameter is a dom element, which is at the bottom of the tooltip. Any dom element such as a button can be appended to this parent node. It can only be called when the tooltip is in actionMode.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="postRender" type="xsd:string">
<xsd:annotation>
<xsd:documentation>A callback function can be specified as a parameter and passed to chart options when the user calls the createViz function. This callback function is called after the tooltip is rendered. The user can select and change dom elements' properties under the tooltip element.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="visible" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set the visibility of the tooltip</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="drawingEffect" type="n1:_Tooltip_drawingEffectType">
<xsd:annotation>
<xsd:documentation>Set the drawing effect for the tooltip</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="formatString" type="">
<xsd:annotation>
<xsd:documentation>Set the format strings for text in the tooltip. For dual axis charts, the first array is applied to the primary axis and the second array is applied to the second axis. If you enter fewer format strings into an array than there are measures in the respective axis, then the last format string is applied to all remaining measures. The following characters are reserved as tokens for format code: MDYHSAmdyhsa#?%0@.The following is an example of an array for a chart with two measures: [["#,##0.00 DM;-#,##.00 DM","#,##.00;-#,##.00"]].</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="layinChart" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set whether the tooltip appears in the chart area</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.types.Tooltip_background'-->
<xsd:complexType name="_Tooltip_backgroundType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseStructuredTypeType">
<xsd:attribute name="color" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Define the background color of the tooltip.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="borderColor" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Define the background border color of the tooltip.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.types.Tooltip_bodyDimensionLabel'-->
<xsd:complexType name="_Tooltip_bodyDimensionLabelType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseStructuredTypeType">
<xsd:attribute name="color" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Property color</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.types.Tooltip_bodyDimensionValue'-->
<xsd:complexType name="_Tooltip_bodyDimensionValueType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseStructuredTypeType">
<xsd:attribute name="color" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Property color</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.types.Tooltip_bodyMeasureLabel'-->
<xsd:complexType name="_Tooltip_bodyMeasureLabelType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseStructuredTypeType">
<xsd:attribute name="color" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Property color</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.types.Tooltip_bodyMeasureValue'-->
<xsd:complexType name="_Tooltip_bodyMeasureValueType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseStructuredTypeType">
<xsd:attribute name="color" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Property color</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.types.Tooltip_closeButton'-->
<xsd:complexType name="_Tooltip_closeButtonType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseStructuredTypeType">
<xsd:attribute name="backgroundColor" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Property backgroundColor</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="borderColor" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Property borderColor</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.types.Tooltip_footerLabel'-->
<xsd:complexType name="_Tooltip_footerLabelType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseStructuredTypeType">
<xsd:attribute name="color" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Define the color of the label of the tooltip footer.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.types.Tooltip_separationLine'-->
<xsd:complexType name="_Tooltip_separationLineType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseStructuredTypeType">
<xsd:attribute name="borderBottomColor" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Property borderBottomColor</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.types.Treemap'-->
<xsd:complexType name="_TreemapType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseStructuredTypeType">
<xsd:sequence>
<xsd:element name="border" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Settings for the border</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Treemap_border"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="animation" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Settings for animations in the plot area</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Treemap_animation"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="toolTip" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Settings for tooltip</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Treemap_tooltip"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="startColor" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Set the starting color of the tree map</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="endColor" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Set the end color of the tree map</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="colorPalette" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Set the color palette for the various sectors. For example, ["#748CB2", "#9CC677", "#EACF5E", "#F9AD79", "#D16A7C"].</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="legendValues" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Set the MBC legend values. For example, [10,11,12,13,14,15]. The values in the array should be in ascending order. If the number of values in the array is smaller than the MBC legend segment number, the MBC legend automatically calculates the values according to the data. If the number of values in the legendValues array is larger than MBC legend segment number, then only the first "segment number + 1" values are used.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="formatRules" type="">
<xsd:annotation>
<xsd:documentation>Sample value for formatRules:  [{condition: [{Key1:Value1, Key2:Value2}], color:"#00ff00"}, {condition: [{Key3:Value3}], color:"#00ffff"}].   Each rule has two properties: the "condition" and the "color".   Value1, Value2 and Value3 are values. &lt;br /&gt;  The value of a dimension may be &lt;br /&gt;  1, Single value (string), like "China" . &lt;br /&gt;  2. Array (enumeration), like ["UK","USA"] . &lt;br /&gt;  The value of a measure may be &lt;br /&gt;  1, Single value (number), like 20 . &lt;br /&gt;  2. Arry (enumeration), like [121,122] . &lt;br /&gt;  3. Object (range), like {min:100, max 200} . Min and max are inclusive.   If users want to inlcude 200, but not 100 in the range, they may use {min:100.00001, max:200}.   If users want values larger than 100, they may write {min:100}. &lt;br /&gt;   The color is applied if one or more conditions in the condition array is met.   If multiple rules could apply on the same data point, it is the last rule that takes effect.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.types.Treemap_animation'-->
<xsd:complexType name="_Treemap_animationType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseStructuredTypeType">
<xsd:attribute name="dataLoading" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set whether the data loading animation is enabled</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="dataUpdating" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set whether the data updating animation is enabled</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="resizing" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set whether the resizing animation is enabled</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.types.Treemap_border'-->
<xsd:complexType name="_Treemap_borderType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseStructuredTypeType">
<xsd:attribute name="visible" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set the visibility of the zone edge</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.types.Treemap_tooltip'-->
<xsd:complexType name="_Treemap_tooltipType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseStructuredTypeType">
<xsd:attribute name="enabled" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set whether the tooltip is enabled</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.types.VerticalBar'-->
<xsd:complexType name="_VerticalBarType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseStructuredTypeType">
<xsd:sequence>
<xsd:element name="toolTip" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Settings for tooltip related properties</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:VerticalBar_tooltip"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="animation" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Settings for animations in the plot area</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:VerticalBar_animation"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="orientation" type="n1:_VerticalBar_orientationType">
<xsd:annotation>
<xsd:documentation>Set the orientation of the plot area.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="colorPalette" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Set the color palette for the chart. This is not supported for dual axis charts that have measureNamesDimension bound to the legend.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="primaryValuesColorPalette" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Set the color palette for axis 1 in dual charts.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="secondaryValuesColorPalette" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Set the color palette for axis 2 in dual chart.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="drawingEffect" type="n1:_VerticalBar_drawingEffectType">
<xsd:annotation>
<xsd:documentation>Set the drawing effect for the plot area. If this value is set to 'glossy', the plot area is glossy. If this value is set to 'normal', the plot area is matte.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="isRoundCorner" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set whether bars have rounded corners</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="formatRules" type="">
<xsd:annotation>
<xsd:documentation>Sample value for formatRules:  [{condition: [{Key1:Value1, Key2:Value2}], color:"#00ff00"}, {condition: [{Key3:Value3}], color:"#00ffff"}].   Each rule has two properties: the "condition" and the "color".   Value1, Value2 and Value3 are values. &lt;br /&gt;  The value of a dimension may be &lt;br /&gt;  1, Single value (string), like "China" . &lt;br /&gt;  2. Array (enumeration), like ["UK","USA"] . &lt;br /&gt;  The value of a measure may be &lt;br /&gt;  1, Single value (number), like 20 . &lt;br /&gt;  2. Arry (enumeration), like [121,122] . &lt;br /&gt;  3. Object (range), like {min:100, max 200} . Min and max are inclusive.   If users want to inlcude 200, but not 100 in the range, they may use {min:100.00001, max:200}.   If users want values larger than 100, they may write {min:100}. &lt;br /&gt;   The color is applied if one or more conditions in the condition array is met.   If multiple rules could apply on the same data point, it is the last rule that takes effect.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.types.VerticalBar_animation'-->
<xsd:complexType name="_VerticalBar_animationType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseStructuredTypeType">
<xsd:attribute name="dataLoading" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set whether the data loading animation is enabled</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="dataUpdating" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set whether the data updating animation is enabled</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="resizing" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set whether the resizing animation is enabled</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.types.VerticalBar_tooltip'-->
<xsd:complexType name="_VerticalBar_tooltipType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseStructuredTypeType">
<xsd:attribute name="enabled" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set whether the tooltip is enabled</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.types.XYContainer'-->
<xsd:complexType name="_XYContainerType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseStructuredTypeType">
<xsd:attribute name="yAngle" type="xsd:float">
<xsd:annotation>
<xsd:documentation>Set the angle for the pie chart. This value should be between '-180' and '180'.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.types.controller.Interaction'-->
<xsd:complexType name="_InteractionType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseStructuredTypeType">
<xsd:sequence>
<xsd:element name="selectability" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Settings for selectability</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Interaction_selectability"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="pan" minOccurs="0">
<xsd:annotation>
<xsd:documentation>add documentation for aggregation pan</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Interaction_pan"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="supportedEventNames" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Set supported event names</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="enableMouseMove" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set whether mouse move is enabled</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="enableMouseOver" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set whether mouse over is enabled</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="enableMouseOut" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set whether mouse out is enabled</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="supportLassoEvent" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set whether support lasso event is enabled</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="holdSelection" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set whether hold selection is enabled</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="preserveSelectionWhenDragging" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set whether preserve selection when dragging is enabled</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="decorations" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Set decorations relating to interaction. Each item
                that is an object of {name: 'decoration name', fn: 'decoration callback function'} is a decoration.
                Currently two decorations are supported: showDetail and hideDetail.
                These two decorations can be used to create a user-defined tooltip.

If these 2 decorations are used, the default tooltip is not used,
                and the user should implement a custom tooltip.
                The showDetail decoration is called when the tooltip is shown,
                and the hideDetail decoration is called when the tooltip is hidden.

The arguments of showDetail are one object of {mode: 'tooltip mode',
                data: 'data of hovering selected data point', position: 'mouse position',
                container: 'chart container dom element', selectedNumber: 'number of selected data points'}.
                'tooltip mode' is either 'infoMode' or 'actionMode'. Hovering over an unselected data point displays the infoMode tooltip,
                while hovering over a selected data point displays the actionMode tooltip.
                'data' is an array of dimensions and measures, where each item is an object of
                {name: 'dimension name or measure name', value: 'dimension member or measure value',
                type: 'literal string of dimension or measure'}. For instance,
                {name: 'Country', value: 'China', type: 'dimension'}, or
                {name: 'Profit', value: 159, type: 'measure'}.

The arguments of hideDetail are a string representing tooltip mode,
                i.e. what kind of tooltip should be hidden.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="triggers" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Set triggers for behavior decration.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="handlers" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Set handlers for behavior decration.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.types.controller.Interaction_pan'-->
<xsd:complexType name="_Interaction_panType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseStructuredTypeType">
<xsd:attribute name="enable" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Enable/disable pan</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="orientation" type="n1:_Interaction_pan_orientationType">
<xsd:annotation>
<xsd:documentation>Set orientation of pan</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.types.controller.Interaction_selectability'-->
<xsd:complexType name="_Interaction_selectabilityType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseStructuredTypeType">
<xsd:attribute name="mode" type="n1:_Interaction_selectability_modeType">
<xsd:annotation>
<xsd:documentation>Set the selection mode. If this value is set to 'exclusive' or 'single', only one set of data points can be selected at once. If this value is set to 'inclusive' or 'multiple', multiple sets of data points can be selected at once. If this value is set to 'none', no sets of data points can be selected. The values 'single' and 'multiple' are deprecated; please remove them from your chart.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="axisLabelSelection" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set whether axis labels can be selected</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="legendSelection" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set whether the legend can be selected</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="plotLassoSelection" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set whether lasso selection can be used in the plot area</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="plotStdSelection" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set whether selection can be done in the plot area by clicking and tapping</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="lassoWithCtrlKey" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set whether the user must hold the ctrl key to use lasso selection</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="dataPointsCacheable" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set whether data points can be cached. If it's true, data points might be cached by Interaction for better performance.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.types.layout.Dock'-->
<xsd:complexType name="_DockType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseStructuredTypeType"/>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.types.layout.Stack'-->
<xsd:complexType name="_StackType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseStructuredTypeType"/>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.types.legend.Common'-->
<xsd:complexType name="_CommonType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseStructuredTypeType">
<xsd:sequence>
<xsd:element name="title" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Settings for the legend title</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:Common_title"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="visible" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set the visibility of the legend</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="formatString" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Set the format string for the legend. The following characters are reserved as tokens for format code: MDYHSAmdyhsa#?%0@.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="isHierarchical" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set whether the legend is hierarchical. This is only supported if the legend is located to the right of the chart.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="isScrollable" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set whether the legend is scrollable. If this value is set to 'false', and there is not enough room to show the whole legend, an ellipsis (...) indicates the missing legend items.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="position" type="n1:_Common_positionType">
<xsd:annotation>
<xsd:documentation>It is a deprecated property. Please use "legendGroup.layout.position" property to set legend position.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="type" type="n1:_Common_typeType">
<xsd:annotation>
<xsd:documentation>Set legend type for Bubble charts. Non-bubble charts are not supported.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="alignment" type="n1:_Common_alignmentType">
<xsd:annotation>
<xsd:documentation>Set the alignment of the legend</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="drawingEffect" type="n1:_Common_drawingEffectType">
<xsd:annotation>
<xsd:documentation>Set the drawing effect for colors in the legend. If this value is set to 'glossy', colors are glossy. If this value is set to 'normal', colors are matte.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.viz.ui5.types.legend.Common_title'-->
<xsd:complexType name="_Common_titleType">
<xsd:complexContent>
<xsd:extension base="n1:_BaseStructuredTypeType">
<xsd:attribute name="visible" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set the visibility of the legend title</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="text" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Set the text of the legend title</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<xsd:simpleType name="_Area_drawingEffectType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="normal">
<xsd:annotation>
<xsd:documentation>Value normal</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="glossy">
<xsd:annotation>
<xsd:documentation>Value glossy</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_Area_marker_shapeType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="circle">
<xsd:annotation>
<xsd:documentation>Value circle</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="diamond">
<xsd:annotation>
<xsd:documentation>Value diamond</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="triangleUp">
<xsd:annotation>
<xsd:documentation>Value triangleUp</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="triangleDown">
<xsd:annotation>
<xsd:documentation>Value triangleDown</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="triangleLeft">
<xsd:annotation>
<xsd:documentation>Value triangleLeft</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="triangleRight">
<xsd:annotation>
<xsd:documentation>Value triangleRight</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="cross">
<xsd:annotation>
<xsd:documentation>Value cross</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="intersection">
<xsd:annotation>
<xsd:documentation>Value intersection</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_Area_modeType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="comparison">
<xsd:annotation>
<xsd:documentation>Value comparison</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="percentage">
<xsd:annotation>
<xsd:documentation>Value percentage</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_Area_orientationType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="vertical">
<xsd:annotation>
<xsd:documentation>Value vertical</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="horizontal">
<xsd:annotation>
<xsd:documentation>Value horizontal</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_Axis_gridline_typeType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="line">
<xsd:annotation>
<xsd:documentation>Value line</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="dotted">
<xsd:annotation>
<xsd:documentation>Value dotted</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="incised">
<xsd:annotation>
<xsd:documentation>Value incised</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_Axis_label_unitFormatTypeType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="MetricUnits">
<xsd:annotation>
<xsd:documentation>Value MetricUnits</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="FinancialUnits">
<xsd:annotation>
<xsd:documentation>Value FinancialUnits</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_Axis_positionType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="left">
<xsd:annotation>
<xsd:documentation>Value left</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="right">
<xsd:annotation>
<xsd:documentation>Value right</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="top">
<xsd:annotation>
<xsd:documentation>Value top</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="bottom">
<xsd:annotation>
<xsd:documentation>Value bottom</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_Axis_typeType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="value">
<xsd:annotation>
<xsd:documentation>Value value</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="category">
<xsd:annotation>
<xsd:documentation>Value category</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="timeValue">
<xsd:annotation>
<xsd:documentation>Value timeValue</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_Background_directionType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="horizontal">
<xsd:annotation>
<xsd:documentation>Value horizontal</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="vertical">
<xsd:annotation>
<xsd:documentation>Value vertical</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_Background_drawingEffectType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="normal">
<xsd:annotation>
<xsd:documentation>Value normal</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="glossy">
<xsd:annotation>
<xsd:documentation>Value glossy</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_Bar_drawingEffectType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="normal">
<xsd:annotation>
<xsd:documentation>Value normal</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="glossy">
<xsd:annotation>
<xsd:documentation>Value glossy</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_Bar_orientationType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="horizontal">
<xsd:annotation>
<xsd:documentation>Value horizontal</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="vertical">
<xsd:annotation>
<xsd:documentation>Value vertical</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_Bubble_drawingEffectType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="normal">
<xsd:annotation>
<xsd:documentation>Value normal</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="glossy">
<xsd:annotation>
<xsd:documentation>Value glossy</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_Bullet_drawingEffectType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="normal">
<xsd:annotation>
<xsd:documentation>Value normal</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="glossy">
<xsd:annotation>
<xsd:documentation>Value glossy</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_Bullet_orientationType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="horizontal">
<xsd:annotation>
<xsd:documentation>Value horizontal</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="vertical">
<xsd:annotation>
<xsd:documentation>Value vertical</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_Combination_drawingEffectType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="normal">
<xsd:annotation>
<xsd:documentation>Value normal</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="glossy">
<xsd:annotation>
<xsd:documentation>Value glossy</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_Combination_orientationType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="horizontal">
<xsd:annotation>
<xsd:documentation>Value horizontal</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="vertical">
<xsd:annotation>
<xsd:documentation>Value vertical</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_Datalabel_orientationType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="horizontal">
<xsd:annotation>
<xsd:documentation>Value horizontal</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="vertical">
<xsd:annotation>
<xsd:documentation>Value vertical</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_Datalabel_outsidePositionType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="up">
<xsd:annotation>
<xsd:documentation>Value up</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="down">
<xsd:annotation>
<xsd:documentation>Value down</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="left">
<xsd:annotation>
<xsd:documentation>Value left</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="right">
<xsd:annotation>
<xsd:documentation>Value right</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_Datalabel_paintingModeType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="rectCoordinate">
<xsd:annotation>
<xsd:documentation>Value rectCoordinate</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="polarCoordinate">
<xsd:annotation>
<xsd:documentation>Value polarCoordinate</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_Datalabel_positionType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="inside">
<xsd:annotation>
<xsd:documentation>Value inside</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="outside">
<xsd:annotation>
<xsd:documentation>Value outside</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_Legend_layout_positionType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="top">
<xsd:annotation>
<xsd:documentation>Value top</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="bottom">
<xsd:annotation>
<xsd:documentation>Value bottom</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="right">
<xsd:annotation>
<xsd:documentation>Value right</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="left">
<xsd:annotation>
<xsd:documentation>Value left</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_Line_drawingEffectType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="normal">
<xsd:annotation>
<xsd:documentation>Value normal</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="glossy">
<xsd:annotation>
<xsd:documentation>Value glossy</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_Line_marker_shapeType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="circle">
<xsd:annotation>
<xsd:documentation>Value circle</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="diamond">
<xsd:annotation>
<xsd:documentation>Value diamond</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="triangleUp">
<xsd:annotation>
<xsd:documentation>Value triangleUp</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="triangleDown">
<xsd:annotation>
<xsd:documentation>Value triangleDown</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="triangleLeft">
<xsd:annotation>
<xsd:documentation>Value triangleLeft</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="triangleRight">
<xsd:annotation>
<xsd:documentation>Value triangleRight</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="cross">
<xsd:annotation>
<xsd:documentation>Value cross</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="intersection">
<xsd:annotation>
<xsd:documentation>Value intersection</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_Line_orientationType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="horizontal">
<xsd:annotation>
<xsd:documentation>Value horizontal</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="vertical">
<xsd:annotation>
<xsd:documentation>Value vertical</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_Pie_drawingEffectType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="normal">
<xsd:annotation>
<xsd:documentation>Value normal</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="glossy">
<xsd:annotation>
<xsd:documentation>Value glossy</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_Pie_valignType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="top">
<xsd:annotation>
<xsd:documentation>Value top</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="center">
<xsd:annotation>
<xsd:documentation>Value center</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_Scatter_drawingEffectType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="normal">
<xsd:annotation>
<xsd:documentation>Value normal</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="glossy">
<xsd:annotation>
<xsd:documentation>Value glossy</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_StackedVerticalBar_drawingEffectType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="normal">
<xsd:annotation>
<xsd:documentation>Value normal</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="glossy">
<xsd:annotation>
<xsd:documentation>Value glossy</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_StackedVerticalBar_modeType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="comparison">
<xsd:annotation>
<xsd:documentation>Value comparison</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="percentage">
<xsd:annotation>
<xsd:documentation>Value percentage</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_StackedVerticalBar_orientationType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="horizontal">
<xsd:annotation>
<xsd:documentation>Value horizontal</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="vertical">
<xsd:annotation>
<xsd:documentation>Value vertical</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_Title_alignmentType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="left">
<xsd:annotation>
<xsd:documentation>Value left</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="center">
<xsd:annotation>
<xsd:documentation>Value center</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="right">
<xsd:annotation>
<xsd:documentation>Value right</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_Tooltip_drawingEffectType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="normal">
<xsd:annotation>
<xsd:documentation>Value normal</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="glossy">
<xsd:annotation>
<xsd:documentation>Value glossy</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_VerticalBar_drawingEffectType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="normal">
<xsd:annotation>
<xsd:documentation>Value normal</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="glossy">
<xsd:annotation>
<xsd:documentation>Value glossy</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_VerticalBar_orientationType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="horizontal">
<xsd:annotation>
<xsd:documentation>Value horizontal</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="vertical">
<xsd:annotation>
<xsd:documentation>Value vertical</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_Interaction_pan_orientationType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="horizontal">
<xsd:annotation>
<xsd:documentation>Value horizontal</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="vertical">
<xsd:annotation>
<xsd:documentation>Value vertical</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="both">
<xsd:annotation>
<xsd:documentation>Value both</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_Interaction_selectability_modeType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="exclusive">
<xsd:annotation>
<xsd:documentation>Value exclusive</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="inclusive">
<xsd:annotation>
<xsd:documentation>Value inclusive</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="single">
<xsd:annotation>
<xsd:documentation>Value single</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="multiple">
<xsd:annotation>
<xsd:documentation>Value multiple</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="none">
<xsd:annotation>
<xsd:documentation>Value none</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_Common_alignmentType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="start">
<xsd:annotation>
<xsd:documentation>Value start</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="middle">
<xsd:annotation>
<xsd:documentation>Value middle</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="end">
<xsd:annotation>
<xsd:documentation>Value end</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_Common_drawingEffectType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="normal">
<xsd:annotation>
<xsd:documentation>Value normal</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="glossy">
<xsd:annotation>
<xsd:documentation>Value glossy</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_Common_positionType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="top">
<xsd:annotation>
<xsd:documentation>Value top</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="bottom">
<xsd:annotation>
<xsd:documentation>Value bottom</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="right">
<xsd:annotation>
<xsd:documentation>Value right</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="left">
<xsd:annotation>
<xsd:documentation>Value left</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_Common_typeType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="ColorLegend">
<xsd:annotation>
<xsd:documentation>Value ColorLegend</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="BubbleColorLegend">
<xsd:annotation>
<xsd:documentation>Value BubbleColorLegend</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="SizeLegend">
<xsd:annotation>
<xsd:documentation>Value SizeLegend</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="MeasureBasedColoringLegend">
<xsd:annotation>
<xsd:documentation>Value MeasureBasedColoringLegend</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
</xsd:schema>
