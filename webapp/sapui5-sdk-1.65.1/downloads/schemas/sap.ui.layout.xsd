<?xml version="1.0" encoding="UTF-8"?><xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" targetNamespace="sap.ui.layout" xmlns:n0="sap.ui.core" xmlns:n1="sap.ui.layout">
<xsd:import namespace="sap.ui.core"/>
<xsd:element name="BlockLayout" type="n1:_BlockLayoutType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>The BlockLayout is used to display several objects in a section-based manner.
&lt;h3&gt;Overview&lt;/h3&gt;
The BlockLayout uses horizontal and vertical subdivisions, and full-width banners to display a set of elements.
By placing pictorial and textual elements side-by-side in different blocks, you can establish a visual connection between blocks and between similar elements.
&lt;h3&gt;Structure&lt;/h3&gt;
The BlockLayout contains BlockLayout cells. Every cell consists of a title and content. The title can be text or a link.

Special full-width sections of the BlockLayout allow horizontal scrolling through a set of blocks.

The BlockLayout comes in five predefined types for background colors:
&lt;ul&gt;
&lt;li&gt;Layout only (default) - a layout scheme and no background colors&lt;/li&gt;
&lt;li&gt;Light - a layout scheme with light colors&lt;/li&gt;
&lt;li&gt;Accent - a layout scheme with 11 pre-defined color sets&lt;/li&gt;
&lt;li&gt;Dashboard - a layout scheme with additional borders and no background colors&lt;/li&gt;
&lt;/ul&gt;
Background colors are attached directly to the blocks of the layout.

&lt;b&gt;Note:&lt;/b&gt; With version 1.48 colors can be set for each individual {@link sap.ui.layout.BlockLayoutCell cell}. There are 11 pre-defined color sets, each with 4 different shades for the Belize theme and 6 different shades for the Fiori 3 theme.
The main colors of the sets can be changed in Theme Designer. To change the background of a particular cell, set &lt;code&gt;backgroundColorSet&lt;/code&gt; (main color)
and &lt;code&gt;backgroundColorShade&lt;/code&gt; (shade).

&lt;b&gt;Note:&lt;/b&gt; Usage of disabled, emphasized or subtle links as titles is not recommended. Dark background designs, for example Accent, are not fully supported with regards to –êccessibility when used with links as titles.

&lt;h3&gt;Usage&lt;/h3&gt;
&lt;h4&gt;When to use&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;You want to create a catalogue-like page with sections of blocks.&lt;/li&gt;
&lt;li&gt;The BlockLayout is intended for developing administrative tools and applications.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;When not to use&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;You want to display properties or features of one content item. Use a {@link sap.uxap.ObjectPageLayout object page} or {@link sap.f.DynamicPage dynamic page} instead.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Responsive Behavior&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The breakpoints of the block layout react to the width of the control itself and not to the actual screen size.&lt;/li&gt;
&lt;li&gt; On small screens all blocks will wrap to a single scrollable column&lt;/li&gt;
&lt;/ul&gt;</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="BlockLayoutCell" type="n1:_BlockLayoutCellType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>The BlockLayoutCell is used as an aggregation of the BlockLayoutRow. It contains Controls.
The BlockLayoutCell should be used only as aggregation of the BlockLayoutRow.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="BlockLayoutCellData" type="n1:_BlockLayoutCellDataType" substitutionGroup="n0:LayoutData">
<xsd:annotation>
<xsd:documentation>Holds layout data for the BlockLayoutCells contents.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="BlockLayoutRow" type="n1:_BlockLayoutRowType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>The BlockLayoutRow is used as an aggregation to the BlockLayout. It aggregates Block Layout  cells.
The BlockLayoutRow has 2 rendering modes - scrollable and non scrollable.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="FixFlex" type="n1:_FixFlexType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>A layout container with a fixed and a flexible part.
&lt;h3&gt;Overview&lt;/h3&gt;
The FixFlex control builds the container for a layout with a fixed and a flexible part. The flexible container adapts its size to the fix container.
&lt;h4&gt;Guidelines:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;The fix container can hold any number of controls, while the flexible container can hold only one&lt;/li&gt;
&lt;li&gt;In order for the FixFlex to stretch properly, the parent element, in which the control is placed, needs to have a specified height or needs to have an absolute position.&lt;/li&gt;
&lt;li&gt;Avoid nesting FixFlex in other flexbox-based layout controls ({@link sap.ui.layout.FixFlex FixFlex}, {@link sap.m.FlexBox FlexBox}, Hbox, Vbox). Otherwise, contents may be not accessible or multiple scrollbars can appear.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Structure&lt;/h3&gt;
The behavior of the FixFlex is controlled by the following properties:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fixContentSize&lt;/code&gt; - The width/height of the fix part of the control&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fixFirst&lt;/code&gt; - The ordering of the fix and flex part&lt;/li&gt;
&lt;li&gt;&lt;code&gt;minFlexSize&lt;/code&gt; - Scrolling inside the flex part, if its contents are large&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vertical&lt;/code&gt; - Alignment of the FixFlex control&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Responsive Behavior&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;If the child control of the flex or the fix container has width/height bigger than the container itself, the child control will be cropped in the view.&lt;/li&gt;
&lt;li&gt;If minFlexSize is set, then a scrollbar is shown in the flexible part, depending on the &lt;code&gt;vertical&lt;/code&gt; property.&lt;/li&gt;
&lt;/ul&gt;</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Grid" type="n1:_GridType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>A layout control which positions its child controls in a 12 column flow layout.

The &lt;code&gt;Grid&lt;/code&gt; control's children can be specified to take on a variable
amount of columns depending on available screen size. With this control it is possible
to achieve flexible layouts and line-breaks for extra large-, large-, medium- and
small-sized screens, such as large desktop, desktop, tablet, and mobile.

The &lt;code&gt;Grid&lt;/code&gt; control's width can be percentage- or pixel-based and the spacing between
its columns can be set to various predefined values.

&lt;b&gt;Note:&lt;/b&gt; The visibility of the child control does not affect the horizontal space it occupies.
This means that even if the control is not visible, its horizontal space will still exist, even if it is empty.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="GridData" type="n1:_GridDataType" substitutionGroup="n0:LayoutData">
<xsd:annotation>
<xsd:documentation>Defines layout data for the {@link sap.ui.layout.Grid}.

&lt;b&gt;Note:&lt;/b&gt; When &lt;code&gt;GridData&lt;/code&gt; is used for controls inside a form,
the &lt;code&gt;linebreak&lt;/code&gt; property has to be set to &lt;code&gt;true&lt;/code&gt; if the
next form element has to be displayed on a new line. Otherwise the &lt;code&gt;GridData&lt;/code&gt;
overrides the layout provided by the &lt;code&gt;Form&lt;/code&gt;.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="HorizontalLayout" type="n1:_HorizontalLayoutType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>A layout that provides support for horizontal alignment of controls</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="ResponsiveFlowLayout" type="n1:_ResponsiveFlowLayoutType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>This is a layout where several controls can be added. These controls are blown up to fit in an entire row. If the window resizes, the controls are moved between the rows and resized again.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="ResponsiveFlowLayoutData" type="n1:_ResponsiveFlowLayoutDataType" substitutionGroup="n0:LayoutData">
<xsd:annotation>
<xsd:documentation>This is a LayoutData element that can be added to a control if this control is used within a ResponsiveFlowLayout.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Splitter" type="n1:_SplitterType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>A layout that contains several content areas. The content that is added to the splitter should contain LayoutData of the type SplitterLayoutData that defines its size and size contraints.

By adding or changing SplitterLayoutData to the controls that make up the content areas, the size can be changed programatically. Additionally the contents can be made non-resizable individually and a minimal size (in px) can be set.

The orientation of the splitter can be set to horizontal (default) or vertical. All content areas of the splitter will be arranged in that way. In order to split vertically and horizontally at the same time, Splitters need to be nested.

The splitter bars can be focused to enable resizing of the content areas via keyboard. The contents size can be manipulated when the splitter bar is focused and Shift-Left/Down/Right/Up are pressed. When Shift-Home/End are pressed, the contents are set their minimum or maximum size (keep in mind though, that resizing an auto-size content-area next to another auto-size one might lead to the effect that the former does not take its maximum size but only the maximum size before recalculating auto sizes).

The splitter bars used for resizing the contents by the user can be set to different widths (or heights in vertical mode) and the splitter will automatically resize the other contents accordingly. In case the splitter bar is resized after the splitter has rendered, a manual resize has to be triggered by invoking triggerResize() on the Splitter.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="SplitterLayoutData" type="n1:_SplitterLayoutDataType" substitutionGroup="n0:LayoutData">
<xsd:annotation>
<xsd:documentation>Holds layout data for the splitter contents.
Allowed size values are numeric values ending in "px" and "%" and the
special case "auto".
(The CSS value "auto" is used internally to recalculate the size of the content
dynamically and is not directly set as style property.)</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="VerticalLayout" type="n1:_VerticalLayoutType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>In this layout the content controls are rendered one below the other.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="CSSGrid" type="n1:_CSSGridType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>A layout control, used to create full page layouts or user interface elements.

&lt;h3&gt;Overview&lt;/h3&gt;

A two-dimensional layout control based on the native-browser CSS display grid which can handle both columns and rows.
The control can be used along with {@link sap.m.FlexBox} which is the one-dimensional alternative for layouting.

With properties it is possible to define:
&lt;ul&gt;
&lt;li&gt;columns, rows and their sizes in the grid&lt;/li&gt;
&lt;li&gt;vertical and horizontal gaps between the grid items&lt;/li&gt;
&lt;li&gt;the flow algorithm when new items are added in the grid&lt;/li&gt;
&lt;/ul&gt;

The dimensions of the grid items are defined on a &lt;code&gt;CSSGrid&lt;/code&gt; level. Every item can override its size by
specifying how many columns and/or rows it will take in the &lt;code&gt;CSSGrid&lt;/code&gt;. Every item can override its position
by specifying from which column and/or row it will start. The configuration of a single item is done
with {@link sap.ui.layout.cssgrid.GridItemLayoutData GridItemLayoutData}.

&lt;h3&gt;Terminology&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Grid - The container which has all grid settings&lt;/li&gt;
&lt;li&gt;Gutters - The gap between the rows and columns&lt;/li&gt;
&lt;li&gt;Grid areas - Items that take more than one row and/or column&lt;/li&gt;
&lt;li&gt;Grid cells - The items of the Grid&lt;/li&gt;
&lt;li&gt;Grid lines - The lines around and between the rows and columns&lt;/li&gt;
&lt;li&gt;Grid tracks - The space between any two lines in the grid&lt;/li&gt;
&lt;li&gt;"fr" Unit - A special grid unit (short from "fraction") which represents a fraction of the available space in the grid&lt;/li&gt;
&lt;li&gt;Implicit and Explicit grid - Explicit grid consists of rows and columns defined with &lt;code&gt;gridTemplateColumns&lt;/code&gt; and &lt;code&gt;gridTemplateRows&lt;/code&gt;. The grid
also creates rows and columns on its own when needed. Their dimensions are defined with &lt;code&gt;gridAutoColumns&lt;/code&gt; and &lt;code&gt;gridAutoRows&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Structure&lt;/h3&gt;
The &lt;code&gt;CSSGrid&lt;/code&gt; has the following elements:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;items&lt;/code&gt; - The items of the &lt;code&gt;CSSGrid&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;customLayout&lt;/code&gt; - An aggregation used to pass the &lt;code&gt;CSSGrid&lt;/code&gt; configuration. Used for templating.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Usage&lt;/h3&gt;

For general cases, use the &lt;code&gt;CSSGrid&lt;/code&gt; properties to configure how the layout should look.
For Box case (equal sized items), use &lt;code&gt;customLayout&lt;/code&gt; aggregation with {@link sap.ui.layout.cssgrid.GridBoxLayout GridBoxLayout}
For Grids which need different configurations based on available width, use &lt;code&gt;customLayout&lt;/code&gt; aggregation with {@link sap.ui.layout.cssgrid.GridResponsiveLayout GridResponsiveLayout}
To set a specific position to an item or define its dimensions in the grid, pass &lt;code&gt;layoutData&lt;/code&gt; of type {@link sap.ui.layout.cssgrid.GridItemLayoutData GridItemLayoutData}

&lt;i&gt;When to use&lt;/i&gt;
&lt;ul&gt;
&lt;li&gt;If a two-dimensional layout configuration is needed (both columns and rows are defined)&lt;/li&gt;
&lt;/ul&gt;

&lt;i&gt;When not to use&lt;/i&gt;
&lt;ul&gt;
&lt;li&gt;If the layout needs to be defined only by one dimension (either column or row, not both). Use {@link sap.m.FlexBox FlexBox} instead.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Responsive behavior&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Fully configurable by the developer. It is possible to create a "breathing" columns layout which means columns width will grow/shrink depending on grid size.&lt;/li&gt;
&lt;li&gt;It is possible to pass a {@link sap.ui.layout.cssgrid.GridResponsiveLayout GridResponsiveLayout} to the &lt;code&gt;customLayout&lt;/code&gt; aggregation of
the &lt;code&gt;CSSGrid&lt;/code&gt; and configure how it will look in different breakpoints (S, M, L, XL).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Current Limitations&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;No support for IE11.&lt;/li&gt;
&lt;li&gt;No support for Edge version 15.&lt;/li&gt;
&lt;li&gt;No alignment and ordering&lt;/li&gt;
&lt;li&gt;No Named grid areas and lines&lt;/li&gt;
&lt;/ul&gt;</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="GridBasicLayout" type="n1:_GridBasicLayoutType" substitutionGroup="n1:GridLayoutBase">
<xsd:annotation>
<xsd:documentation>Applies a sap.ui.layout.cssgrid.GridSettings to a provided DOM element or Control.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="GridBoxLayout" type="n1:_GridBoxLayoutType" substitutionGroup="n1:GridLayoutBase">
<xsd:annotation>
<xsd:documentation>Applies a sap.ui.layout.cssgrid.GridSettings to a provided DOM element or Control.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="GridItemLayoutData" type="n1:_GridItemLayoutDataType" substitutionGroup="n0:LayoutData">
<xsd:annotation>
<xsd:documentation>Holds layout data for a grid item.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="GridLayoutBase" type="n1:_GridLayoutBaseType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>Applies a sap.ui.layout.cssgrid.GridSettings to a provided DOM element or Control.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="GridResponsiveLayout" type="n1:_GridResponsiveLayoutType" substitutionGroup="n1:GridLayoutBase">
<xsd:annotation>
<xsd:documentation>Applies a sap.ui.layout.cssgrid.GridSettings to a provided DOM element or Control.
Have to possibility to hold multiple sap.ui.layout.cssgrid.GridSettings and apply the currently active GridSettings.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="GridSettings" type="n1:_GridSettingsType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>Holds a set of CSS display:grid properties</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="ColumnContainerData" type="n1:_ColumnContainerDataType" substitutionGroup="n0:LayoutData">
<xsd:annotation>
<xsd:documentation>The &lt;code&gt;ColumnLayout&lt;/code&gt;-specific layout data for the &lt;code&gt;FormContainer&lt;/code&gt; element.

Depending on its size, the &lt;code&gt;Form&lt;/code&gt; control is divided into 1, 2, 3 or 4 columns
by the &lt;code&gt;ColumnLayout&lt;/code&gt; control.
Using &lt;code&gt;ColumnContainerData&lt;/code&gt;, the size of the &lt;code&gt;FormContainer&lt;/code&gt; element can be influenced.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="ColumnElementData" type="n1:_ColumnElementDataType" substitutionGroup="n0:LayoutData">
<xsd:annotation>
<xsd:documentation>The &lt;code&gt;ColumnLayout&lt;/code&gt;-specific layout data for the &lt;code&gt;FormElement&lt;/code&gt; content fields.

One &lt;code&gt;FormElement&lt;/code&gt; element contains 12 cells and has two sizes, small and large.
Using &lt;code&gt;ColumnElementData&lt;/code&gt;, the default calculation of the cells used for a field or label
can be overwritten.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="ColumnLayout" type="n1:_ColumnLayoutType" substitutionGroup="n1:FormLayout">
<xsd:annotation>
<xsd:documentation>The &lt;code&gt;ColumnLayout&lt;/code&gt; control renders a &lt;code&gt;Form&lt;/code&gt; control in a column-based responsive way.
Depending on its size, the &lt;code&gt;Form&lt;/code&gt; control is divided into one or more columns.
(XL - max. 4 columns, L - max. 3 columns, M -  max. 2 columns and S - 1 column.)

The &lt;code&gt;FormContainer&lt;/code&gt; elements are spread out to the columns depending on the number of &lt;code&gt;FormContainer&lt;/code&gt;
elements and their size. For example, if there are 4 columns and 2 &lt;code&gt;FormContainer&lt;/code&gt; elements,
each &lt;code&gt;FormContainer&lt;/code&gt; element will use 2 columns. If there are 3 columns and 2 &lt;code&gt;FormContainer&lt;/code&gt; elements,
the larger one will use 2 columns, the smaller one 1 column. The size of a &lt;code&gt;FormContainer&lt;/code&gt; element will be determined
based on the number of visible &lt;code&gt;FormElement&lt;/code&gt; elements assigned to it.
If there are more &lt;code&gt;FormContainer&lt;/code&gt; elements than columns, every &lt;code&gt;FormContainer&lt;/code&gt; element uses only
one column. So the last row of the &lt;code&gt;Form&lt;/code&gt; control will not be fully used.

The default size of the &lt;code&gt;FormContainer&lt;/code&gt; element can be overwritten by using &lt;code&gt;ColumnContainerData&lt;/code&gt;
as &lt;code&gt;LayoutData&lt;/code&gt;. If one &lt;code&gt;FormContainer&lt;/code&gt; element has &lt;code&gt;ColumnContainerData&lt;/code&gt; set,
the size calculation of the other &lt;code&gt;FormContainer&lt;/code&gt; elements might not lead to the expected result.
In this case, use &lt;code&gt;ColumnContainerData&lt;/code&gt; also for the other &lt;code&gt;FormContainer&lt;/code&gt; elements.

The &lt;code&gt;FormElement&lt;/code&gt; elements are spread out to the columns of a &lt;code&gt;FormContainer&lt;/code&gt; element
arranged in a newspaper-like order. The position of the labels and fields depends on the size of the used column.
If there is enough space, the labels are beside the fields, otherwise above the fields.

The default size of a content control of a &lt;code&gt;FormElement&lt;/code&gt; element can be overwritten
using &lt;code&gt;ColumnElementData&lt;/code&gt; as &lt;code&gt;LayoutData&lt;/code&gt;.
If one control assigned to a &lt;code&gt;FormElement&lt;/code&gt; element has &lt;code&gt;ColumnElementData&lt;/code&gt; set,
the size calculation of the other controls assigned to the &lt;code&gt;FormElement&lt;/code&gt; element
might not lead to the expected result.
In this case, use &lt;code&gt;ColumnElementData&lt;/code&gt; for the other controls, assigned to the &lt;code&gt;FormElement&lt;/code&gt; element, too.

The placement of the &lt;code&gt;FormElement&lt;/code&gt; elements is made by the browser &lt;code&gt;column-count&lt;/code&gt; logic.
So this can be different in different browsers and lead in some cases to other results than might be expected.

&lt;b&gt;Note:&lt;/b&gt;
This control cannot be used stand-alone, it just renders a &lt;code&gt;Form&lt;/code&gt; control,
so it must be assigned to a &lt;code&gt;Form&lt;/code&gt; control using the &lt;code&gt;layout&lt;/code&gt; aggregation.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Form" type="n1:_FormType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>A &lt;code&gt;Form&lt;/code&gt; control arranges labels and fields (like input fields) into groups and rows.
There are different ways to visualize forms for different screen sizes.

A &lt;code&gt;Form&lt;/code&gt; is structured into &lt;code&gt;FormContainers&lt;/code&gt;. Each &lt;code&gt;FormContainer&lt;/code&gt; consists of &lt;code&gt;FormElements&lt;/code&gt;.
The &lt;code&gt;FormElements&lt;/code&gt; consists of a label and the form fields.
A &lt;code&gt;Form&lt;/code&gt; doesn't render its content by itself. The rendering is done by the assigned &lt;code&gt;FormLayout&lt;/code&gt;.
This is so that the rendering can be adopted to new UI requirements without changing the &lt;code&gt;Form&lt;/code&gt; itself.

For the content of a &lt;code&gt;Form&lt;/code&gt;, &lt;code&gt;VariantLayoutData&lt;/code&gt; are supported to allow simple switching of the &lt;code&gt;FormLayout&lt;/code&gt;.
&lt;code&gt;LayoutData&lt;/code&gt; on the content can be used to overwrite the default layout of the &lt;code&gt;Form&lt;/code&gt;.

The &lt;code&gt;Form&lt;/code&gt; (and its sub-controls) automatically add label and field assignment to enable screen reader support.
It also adds keyboard support to navigate between the fields and groups inside the form.

&lt;b&gt;Warning:&lt;/b&gt; Do not put any layout or other container controls into the &lt;code&gt;FormElement&lt;/code&gt;.
Views are also not supported. This could damage the visual layout, keyboard support and screen-reader support.

If editable controls are used as content, the &lt;code&gt;editable&lt;/code&gt; property must be set to &lt;code&gt;true&lt;/code&gt;,
otherwise to &lt;code&gt;false&lt;/code&gt;. If the &lt;code&gt;editable&lt;/code&gt; property is set incorrectly, there will be visual issues
like wrong label alignment or wrong spacing between the controls.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="FormContainer" type="n1:_FormContainerType" substitutionGroup="n0:Element">
<xsd:annotation>
<xsd:documentation>A &lt;code&gt;FormContainer&lt;/code&gt; represents a group inside a &lt;code&gt;Form&lt;/code&gt;. It consists of &lt;code&gt;FormElements&lt;/code&gt;.
The rendering of the &lt;code&gt;FormContainer&lt;/code&gt; is done by the &lt;code&gt;FormLayout&lt;/code&gt; assigned to the &lt;code&gt;Form&lt;/code&gt;.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="FormElement" type="n1:_FormElementType" substitutionGroup="n0:Element">
<xsd:annotation>
<xsd:documentation>A &lt;code&gt;FormElement&lt;/code&gt; represents a row in a &lt;code&gt;FormContainer&lt;/code&gt;.
A &lt;code&gt;FormElement&lt;/code&gt; is a combination of one label and different controls associated to this label.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="FormLayout" type="n1:_FormLayoutType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>Base layout to render a &lt;code&gt;Form&lt;/code&gt;.
Other layouts to render a &lt;code&gt;Form&lt;/code&gt; must inherit from this one.

&lt;b&gt;Note:&lt;/b&gt; This control must not be used to render a &lt;code&gt;Form&lt;/code&gt; in productive applications as it does not fulfill any
design guidelines and usability standards.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="GridContainerData" type="n1:_GridContainerDataType" substitutionGroup="n0:LayoutData">
<xsd:annotation>
<xsd:documentation>The &lt;code&gt;GridLayout&lt;/code&gt;-specific layout data for &lt;code&gt;FormContainers&lt;/code&gt;.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="GridElementData" type="n1:_GridElementDataType" substitutionGroup="n0:LayoutData">
<xsd:annotation>
<xsd:documentation>The &lt;code&gt;GridLayout&lt;/code&gt;-specific layout data for &lt;code&gt;FormElement&lt;/code&gt; fields.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="GridLayout" type="n1:_GridLayoutType" substitutionGroup="n1:FormLayout">
<xsd:annotation>
<xsd:documentation>This &lt;code&gt;FormLayout&lt;/code&gt; renders a &lt;code&gt;Form&lt;/code&gt; using an HTML-table based grid.
This can be a 16 column grid or an 8 column grid. The grid is stable, so the alignment of the fields is the same for all screen sizes or widths of the &lt;code&gt;Form&lt;/code&gt;.
Only the width of the single grid columns depends on the available width.

To adjust the appearance inside the &lt;code&gt;GridLayout&lt;/code&gt;, you can use &lt;code&gt;GridContainerData&lt;/code&gt; for &lt;code&gt;FormContainers&lt;/code&gt;
and &lt;code&gt;GridElementData&lt;/code&gt; for content fields.

&lt;b&gt;Note:&lt;/b&gt; If content fields have a &lt;code&gt;width&lt;/code&gt; property this will be ignored, as the width of the controls is set by the grid cells.

This control cannot be used stand-alone, it just renders a &lt;code&gt;Form&lt;/code&gt;, so it must be assigned to a &lt;code&gt;Form&lt;/code&gt; using the &lt;code&gt;layout&lt;/code&gt; aggregation.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="ResponsiveGridLayout" type="n1:_ResponsiveGridLayoutType" substitutionGroup="n1:FormLayout">
<xsd:annotation>
<xsd:documentation>The &lt;code&gt;ResponsiveGridLayout&lt;/code&gt; control renders a &lt;code&gt;Form&lt;/code&gt; using a responsive grid. Internally the &lt;code&gt;Grid&lt;/code&gt; control is used for rendering.
Using this layout, the &lt;code&gt;Form&lt;/code&gt; is rendered in a responsive way.
Depending on the available space, the &lt;code&gt;FormContainers&lt;/code&gt; are rendered in one or different columns and the labels are rendered in the same row as the fields or above the fields.
This behavior can be influenced by the properties of this layout control.

On the &lt;code&gt;FormContainers&lt;/code&gt;, labels and content fields, &lt;code&gt;GridData&lt;/code&gt; can be used to change the default rendering.
&lt;code&gt;GridData&lt;/code&gt; is not supported for &lt;code&gt;FormElements&lt;/code&gt;.

&lt;b&gt;Note:&lt;/b&gt; If &lt;code&gt;GridData&lt;/code&gt; is used, this may result in a much more complex layout than the default one.
This means that in some cases, the calculation for the other content may not bring the expected result.
In such cases, &lt;code&gt;GridData&lt;/code&gt; should be used for all content controls to disable the default behavior.

This control cannot be used stand-alone, it just renders a &lt;code&gt;Form&lt;/code&gt;, so it must be assigned to a &lt;code&gt;Form&lt;/code&gt; using the &lt;code&gt;layout&lt;/code&gt; aggregation.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="ResponsiveLayout" type="n1:_ResponsiveLayoutType" substitutionGroup="n1:FormLayout">
<xsd:annotation>
<xsd:documentation>The &lt;code&gt;ResponsiveLayout&lt;/code&gt; renders a &lt;code&gt;Form&lt;/code&gt; with a responsive layout. Internally the &lt;code&gt;ResponsiveFlowLayout&lt;/code&gt; is used.
The responsiveness of this layout tries to best use the available space. This means that the order of the &lt;code&gt;FormContainers&lt;/code&gt;, labels and fields depends on the available space.

On the &lt;code&gt;FormContainers&lt;/code&gt;, &lt;code&gt;FormElements&lt;/code&gt;, labels and content fields, &lt;code&gt;ResponsiveFlowLayoutData&lt;/code&gt; can be used to change the default rendering.

We suggest using the &lt;code&gt;ResponsiveGridLayout&lt;/code&gt; instead of this layout because this is easier to consume and brings more stable responsive output.

&lt;b&gt;Note:&lt;/b&gt; If &lt;code&gt;ResponsiveFlowLayoutData&lt;/code&gt; are used this may result in a much more complex layout than the default one. This means that in some cases, the calculation for the other content may not bring the expected result.
In such cases, &lt;code&gt;ResponsiveFlowLayoutData&lt;/code&gt; should be used for all content controls to disable the default behavior.

This control cannot be used stand-alone, it just renders a &lt;code&gt;Form&lt;/code&gt;, so it must be assigned to a &lt;code&gt;Form&lt;/code&gt; using the &lt;code&gt;layout&lt;/code&gt; aggregation.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="SimpleForm" type="n1:_SimpleFormType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>The &lt;code&gt;SimpleForm&lt;/code&gt; provides an easy-to-use API to create simple forms.
Inside a &lt;code&gt;SimpleForm&lt;/code&gt;, a &lt;code&gt;{@link sap.ui.layout.form.Form Form}&lt;/code&gt; control is created along with its
&lt;code&gt;{@link sap.ui.layout.form.FormContainer FormContainers}&lt;/code&gt; and &lt;code&gt;{@link sap.ui.layout.form.FormElement FormElements}&lt;/code&gt;,
but the complexity in the API is not exposed to the user.
&lt;ul&gt;
&lt;li&gt;A new &lt;code&gt;Title&lt;/code&gt; or &lt;code&gt;Toolbar&lt;/code&gt; starts a new group (&lt;code&gt;{@link sap.ui.layout.form.FormContainer FormContainer}&lt;/code&gt;) in the form.&lt;/li&gt;
&lt;li&gt;A new &lt;code&gt;Label&lt;/code&gt; starts a new row (&lt;code&gt;{@link sap.ui.layout.form.FormElement FormElement}&lt;/code&gt;) in the form.&lt;/li&gt;
&lt;li&gt;All other controls will be assigned to the row (&lt;code&gt;{@link sap.ui.layout.form.FormElement FormElement}&lt;/code&gt;) that started with the last label.&lt;/li&gt;
&lt;/ul&gt;
Use &lt;code&gt;LayoutData&lt;/code&gt; to influence the layout for special cases in the Input/Display controls.

&lt;b&gt;Note:&lt;/b&gt; If a more complex form is needed, use the &lt;code&gt;{@link sap.ui.layout.form.Form Form}&lt;/code&gt; control instead.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<!--type definition for UIElement 'sap.ui.layout.BlockLayout'-->
<xsd:complexType name="_BlockLayoutType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation 'content'-->
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n1:BlockLayoutRow"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
<xsd:element name="content" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The Rows to be included in the content of the control</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n1:BlockLayoutRow"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="background" type="n1:_BlockBackgroundTypeType">
<xsd:annotation>
<xsd:documentation>Determines the background used for the Layout</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="keepFontSize" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Keeps the font-size of the contents as is, independent from the screen size.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.layout.BlockLayoutCell'-->
<xsd:complexType name="_BlockLayoutCellType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation 'content'-->
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control"/>
<xsd:element ref="n0:Fragment"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
<xsd:element name="content" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The content to be included inside the cell</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control"/>
<xsd:element ref="n0:Fragment"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="titleLink" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The link that will replace the title of the cell.
&lt;b&gt;Note:&lt;/b&gt; The only possible value is the &lt;code&gt;sap.m.Link&lt;/code&gt; control.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n0:Control"/>
<xsd:element ref="n0:Fragment"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="title" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Defines the title of the cell.
&lt;b&gt;Note:&lt;/b&gt; When the &lt;code&gt;titleLink&lt;/code&gt; aggregation is provided, the title of the cell will be replaced with the text from the &lt;code&gt;titleLink&lt;/code&gt;.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="titleAlignment" type="n0:_HorizontalAlignType">
<xsd:annotation>
<xsd:documentation>Defines the alignment of the cell title</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="titleLevel" type="n0:_TitleLevelType">
<xsd:annotation>
<xsd:documentation>Defines the aria level of the title
This information is e.g. used by assistive technologies like screenreaders to create a hierarchical site map for faster navigation.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="width" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Defines the width of the cell. Depending on the context of the cell - whether it's in scrollable,
or non scrollable row, this property is interpreted in two different ways.
If the cell is placed inside a scrollable row - this property defines the width of the cell in
percentages. If no value is provided - the default is 40%.
If the cell is placed inside a non scrollable row - this property defines the grow factor of the cell
compared to the whole row.
&lt;b&gt;For example:&lt;/b&gt; If you have 2 cells, each with width of 1, this means that they should be of equal size,
and they need to fill the whole row. This results in 50% width for each cell. If you have 2 cells,
one with width of 1, the other with width of 3, this means that the whole row width is 4, so the first
cell will have a width of 25%, the second - 75%.
According to the visual guidelines, it is suggested that you only use 25%, 50%, 75% or 100% cells in
you applications. For example, 12,5% width is not desirable (1 cell with width 1, and another with width 7)</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="backgroundColorSet" type="n1:_BlockLayoutCellColorSetType">
<xsd:annotation>
<xsd:documentation>The Background color set from which the background color will be selected.
By using background colors from the predefined sets your colors could later be customized from the Theme Designer.
&lt;b&gt;Note:&lt;/b&gt; backgroundColorSet should be used only in combination with backgroundColorShade.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="backgroundColorShade" type="n1:_BlockLayoutCellColorShadeType">
<xsd:annotation>
<xsd:documentation>The index of the background color in the color set from which the color will be selected.
By using background colors from the predefined sets your colors could later be customized from the Theme Designer.
&lt;b&gt;Note:&lt;/b&gt; backgroundColorShade should be used only in combination with backgroundColorSet.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.layout.BlockLayoutCellData'-->
<xsd:complexType name="_BlockLayoutCellDataType">
<xsd:complexContent>
<xsd:extension base="n0:_LayoutDataType">
<xsd:attribute name="sSize" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Sets the width of the cell for S size of the BlockLayout.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="mSize" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Sets the width of the cell for M size of the BlockLayout.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="lSize" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Sets the width of the cell for L size of the BlockLayout.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="xlSize" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Sets the width of the cell for XL size of the BlockLayout.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.layout.BlockLayoutRow'-->
<xsd:complexType name="_BlockLayoutRowType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation 'content'-->
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n1:BlockLayoutCell"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
<xsd:element name="content" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The content cells to be included in the row.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n1:BlockLayoutCell"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="scrollable" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Sets the rendering mode of the BlockLayoutRow to scrollable. In scrollable mode, the cells get
aligned side by side, with horizontal scroll bar for the row.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="rowColorSet" type="n1:_BlockRowColorSetsType">
<xsd:annotation>
<xsd:documentation>Defines background type for that row.
There might be several rows with the same type</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="accentCells" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Cells that would be accented.
*Note:* This association has visual impact only for BlockLayouts with background types "Mixed" and "Accent".

Mixed: In this type, areas of 25% (on desktop) can have a dark background color. Per section one area can be dark.
Accent: Every section can contain multiple gray blocks, which are used alternately, beginning with the bright one</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.layout.FixFlex'-->
<xsd:complexType name="_FixFlexType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<xsd:element name="fixContent" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Controls in the fixed part of the layout.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control"/>
<xsd:element ref="n0:Fragment"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="flexContent" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Control in the stretching part of the layout.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n0:Control"/>
<xsd:element ref="n0:Fragment"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="vertical" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Determines the direction of the layout of child elements. True for vertical and false for horizontal layout.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="fixFirst" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Determines whether the fixed-size area should be on the beginning/top ( if the value is "true") or end/bottom ( if the value is "false").</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="fixContentSize" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Determines the height (if the vertical property is "true") or the width (if the vertical property is "false") of the fixed area. If left at the default value "auto", the fixed-size area will be as large as its content. In this case the content cannot use percentage sizes.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="minFlexSize" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Enables scrolling inside the flexible part. The given size is calculated in "px". If the child control in the flexible part is larger than the available flexible size on the screen and if the available size for the flexible part is smaller or equal to the minFlexSize value, the scroll will be for the entire FixFlex control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.layout.Grid'-->
<xsd:complexType name="_GridType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation 'content'-->
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control"/>
<xsd:element ref="n0:Fragment"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
<xsd:element name="content" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Controls that are placed into Grid layout.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control"/>
<xsd:element ref="n0:Fragment"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Optional. Defines the width of the &lt;code&gt;Grid&lt;/code&gt;. If not specified, then 100%.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="vSpacing" type="xsd:float">
<xsd:annotation>
<xsd:documentation>Optional. Defines the vertical spacing between the rows in the &lt;code&gt;Grid&lt;/code&gt;.
In rem, allowed values are 0, 0.5, 1 and 2.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="hSpacing" type="xsd:float">
<xsd:annotation>
<xsd:documentation>Optional. Defines the horizontal spacing between the content in the &lt;code&gt;Grid&lt;/code&gt;.
In rem, allowed values are 0, 0.5 , 1 or 2.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="position" type="n1:_GridPositionType">
<xsd:annotation>
<xsd:documentation>Optional. Defines the position of the &lt;code&gt;Grid&lt;/code&gt; in the window or surrounding container.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="defaultSpan" type="n1:_GridSpanType">
<xsd:annotation>
<xsd:documentation>Optional. A string type that represents the span values of the &lt;code&gt;Grid&lt;/code&gt; for
large, medium and small screens. Allowed values are separated by space Letters L, M or S followed
by number of columns from 1 to 12 that the container has to take, for example, &lt;code&gt;L2 M4 S6&lt;/code&gt;,
&lt;code&gt;M12&lt;/code&gt;, &lt;code&gt;s10&lt;/code&gt; or &lt;code&gt;l4 m4&lt;/code&gt;.

&lt;b&gt;Note:&lt;/b&gt; The parameters must be provided in the order &lt;large medium small&gt;.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="defaultIndent" type="n1:_GridIndentType">
<xsd:annotation>
<xsd:documentation>Optional. Defines default for the whole Grid numbers of empty columns before the current span begins.
It can be defined for large, medium and small screens. Allowed values are separated by space Letters
L, M or S followed by number of columns from 0 to 11 that the container has to take, for example,
&lt;code&gt;L2 M4 S6&lt;/code&gt;, &lt;code&gt;M11&lt;/code&gt;, &lt;code&gt;s10&lt;/code&gt; or &lt;code&gt;l4 m4&lt;/code&gt;.

&lt;b&gt;Note:&lt;/b&gt; The parameters must be provided in the order &lt;large medium small&gt;.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="containerQuery" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to &lt;code&gt;true&lt;/code&gt;, the current range (large, medium or small) is defined by the size of the
container surrounding the &lt;code&gt;Grid&lt;/code&gt; instead of the device screen size (media Query).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaLabelledBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / IDs that label this control (see WAI-ARIA attribute &lt;code&gt;aria-labelledby&lt;/code&gt;).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.layout.GridData'-->
<xsd:complexType name="_GridDataType">
<xsd:complexContent>
<xsd:extension base="n0:_LayoutDataType">
<xsd:attribute name="span" type="n1:_GridSpanType">
<xsd:annotation>
<xsd:documentation>A string type that represents the span values of the &lt;code&gt;Grid&lt;/code&gt; for large, medium and small screens.

Allowed values are separated by space Letters L, M or S followed by number of columns from 1 to 12
that the container has to take, for example: &lt;code&gt;L2 M4 S6&lt;/code&gt;, &lt;code&gt;M12&lt;/code&gt;,
&lt;code&gt;s10&lt;/code&gt; or &lt;code&gt;l4 m4&lt;/code&gt;.

&lt;b&gt;Note:&lt;/b&gt; The parameters must be provided in the order &lt;large medium small&gt;.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="spanXL" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Optional. Defines a span value for extra large screens.
This value overwrites the value for extra large screens defined in the &lt;code&gt;span&lt;/code&gt; property.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="spanL" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Optional. Defines a span value for large screens.
This value overwrites the value for large screens defined in the &lt;code&gt;span&lt;/code&gt; property.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="spanM" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Optional. Defines a span value for medium size screens.
This value overwrites the value for medium screens defined in the &lt;code&gt;span&lt;/code&gt; property.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="spanS" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Optional. Defines a span value for small screens.
This value overwrites the value for small screens defined in the &lt;code&gt;span&lt;/code&gt; property.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="indent" type="n1:_GridIndentType">
<xsd:annotation>
<xsd:documentation>A string type that represents the indent values of the &lt;code&gt;Grid&lt;/code&gt; for large, medium and small screens.

Allowed values are separated by space Letters L, M or S followed by number of columns from 1 to 11
that the container has to take, for example, &lt;code&gt;L2 M4 S6&lt;/code&gt;, &lt;code&gt;M11&lt;/code&gt;, &lt;code&gt;s10&lt;/code&gt;
or &lt;code&gt;l4 m4&lt;/code&gt;.

&lt;b&gt;Note:&lt;/b&gt; The parameters must be provided in the order &lt;large medium small&gt;.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="indentXL" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Optional. Defines an indent value for extra large screens.
This value overwrites the value for extra large screens defined in the &lt;code&gt;indent&lt;/code&gt; property.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="indentL" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Optional. Defines an indent value for large screens.
This value overwrites the value for large screens defined in the &lt;code&gt;indent&lt;/code&gt; property.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="indentM" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Optional. Defines an indent value for medium size screens.
This value overwrites the value for medium screens defined in the &lt;code&gt;indent&lt;/code&gt; property.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="indentS" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Optional. Defines an indent value for small screens.
This value overwrites the value for small screens defined in the &lt;code&gt;indent&lt;/code&gt; property.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="visibleXL" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Defines if this control is visible on extra Large screens.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="visibleL" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Defines if this control is visible on large screens.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="visibleM" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Defines if this control is visible on medium screens.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="visibleS" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Defines if this control is visible on small screens.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="moveBackwards" type="n1:_GridIndentType">
<xsd:annotation>
<xsd:documentation>Optional. Moves a cell backwards with as many columns as specified.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="moveForward" type="n1:_GridIndentType">
<xsd:annotation>
<xsd:documentation>Optional. Moves a cell forwards with as many columns as specified.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="linebreak" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Optional. If set to &lt;code&gt;true&lt;/code&gt;, the control causes a line break on all-size screens
within the &lt;code&gt;Grid&lt;/code&gt; and becomes the first within the next line.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="linebreakXL" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Optional. If set to &lt;code&gt;true&lt;/code&gt;, the control causes a line break on extra large screens
within the &lt;code&gt;Grid&lt;/code&gt; and becomes the first within the next line.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="linebreakL" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Optional. If set to &lt;code&gt;true&lt;/code&gt;, the control causes a line break on large screens
within the &lt;code&gt;Grid&lt;/code&gt; and becomes the first within the next line.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="linebreakM" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Optional. If set to &lt;code&gt;true&lt;/code&gt;, the control causes a line break on medium screens
within the &lt;code&gt;Grid&lt;/code&gt; and becomes the first within the next line.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="linebreakS" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Optional. If set to &lt;code&gt;true&lt;/code&gt;, the control causes a line break on small screens
within the &lt;code&gt;Grid&lt;/code&gt; and becomes the first within the next line.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="spanLarge" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Deprecated. Defines a span value for large screens.
This value overwrites the value for large screens defined in the &lt;code&gt;span&lt;/code&gt; property.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="spanMedium" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Deprecated. Defines a span value for medium screens.
This value overwrites the value for medium screens defined in the &lt;code&gt;span&lt;/code&gt; property.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="spanSmall" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Deprecated. Defines a span value for small screens.
This value overwrites the value for small screens defined in the &lt;code&gt;span&lt;/code&gt; property.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="indentLarge" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Deprecated. Defines an indent value for large screens.
This value overwrites the value for large screens defined in the &lt;code&gt;indent&lt;/code&gt; property.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="indentMedium" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Deprecated. Defines an indent value for medium screens.
This value overwrites the value for medium screens defined in the &lt;code&gt;indent&lt;/code&gt; property.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="indentSmall" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Deprecated. Defines an indent value for small screens.
This value overwrites the value for small screens defined in the &lt;code&gt;indent&lt;/code&gt; property.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="visibleOnLarge" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Deprecated. Defines if this control is visible on large screens.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="visibleOnMedium" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Deprecated. Defines if this control is visible on medium screens.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="visibleOnSmall" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Deprecated. Defines if this control is visible on small screens.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.layout.HorizontalLayout'-->
<xsd:complexType name="_HorizontalLayoutType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation 'content'-->
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control"/>
<xsd:element ref="n0:Fragment"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
<xsd:element name="content" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The controls inside this layout</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control"/>
<xsd:element ref="n0:Fragment"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="allowWrapping" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Specifies whether the content inside the Layout shall be line-wrapped in the case that there is less horizontal space available than required.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.layout.ResponsiveFlowLayout'-->
<xsd:complexType name="_ResponsiveFlowLayoutType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation 'content'-->
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control"/>
<xsd:element ref="n0:Fragment"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
<xsd:element name="content" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Added content that should be positioned. Every content item should have a ResponsiveFlowLayoutData attached, or otherwise, the default values are used.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control"/>
<xsd:element ref="n0:Fragment"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="responsive" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to false, all added controls will keep their width, or otherwise, the controls will be stretched to the possible width of a row.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaLabelledBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / IDs that label this control (see WAI-ARIA attribute &lt;code&gt;aria-labelledby&lt;/code&gt;).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.layout.ResponsiveFlowLayoutData'-->
<xsd:complexType name="_ResponsiveFlowLayoutDataType">
<xsd:complexContent>
<xsd:extension base="n0:_LayoutDataType">
<xsd:attribute name="minWidth" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Defines the minimal size in px of a ResponsiveFlowLayout element. The element will be shrunk down to this value.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="weight" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Defines the weight of the element, that influences the resulting width. If there are several elements within a row of the ResponsiveFlowLayout, each element could have another weight. The bigger the weight of a single element, the wider it will be stretched, i.e. a bigger weight results in a larger width.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="linebreak" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If this property is set, the control in which the LayoutData is added, will always cause a line break within the ResponsiveFlowLayout.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="margin" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Prevents any margin of the element if set to false.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="linebreakable" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Shows if an element can be wrapped into a new row. If this value is set to false, the min-width will be set to 0 and the wrapping is up to the previous element.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.layout.Splitter'-->
<xsd:complexType name="_SplitterType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation 'contentAreas'-->
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control"/>
<xsd:element ref="n0:Fragment"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
<xsd:element name="contentAreas" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The content areas to be split. The control will show n-1 splitter bars between n controls in this aggregation.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control"/>
<xsd:element ref="n0:Fragment"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="orientation" type="n0:_OrientationType">
<xsd:annotation>
<xsd:documentation>Whether to split the contents horizontally (default) or vertically.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>The width of the control</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="height" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>The height of the control</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="resize" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is fired when contents are resized.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.layout.SplitterLayoutData'-->
<xsd:complexType name="_SplitterLayoutDataType">
<xsd:complexContent>
<xsd:extension base="n0:_LayoutDataType">
<xsd:attribute name="resizable" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Determines whether the control in the splitter can be resized or not.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="size" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Sets the size of the splitter content.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="minSize" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Sets the minimum size of the splitter content in px.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.layout.VerticalLayout'-->
<xsd:complexType name="_VerticalLayoutType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation 'content'-->
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control"/>
<xsd:element ref="n0:Fragment"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
<xsd:element name="content" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Content controls within the layout.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control"/>
<xsd:element ref="n0:Fragment"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Width of the &lt;code&gt;VerticalLayout&lt;/code&gt;. If no width is set, the width of the content is used.
If the content of the layout has a larger width than the layout, it is cut off.
There is no scrolling inside the layout.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="enabled" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If not enabled, all controls inside are not enabled automatically.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.layout.cssgrid.CSSGrid'-->
<xsd:complexType name="_CSSGridType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation 'items'-->
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control"/>
<xsd:element ref="n0:Fragment"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
<xsd:element name="customLayout" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Defines a custom Grid layout for the control. If provided, it will override all of the grid properties.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:GridLayoutBase"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="items" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The items contained by the control.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control"/>
<xsd:element ref="n0:Fragment"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>The width of the control</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="gridTemplateColumns" type="n1:_CSSGridTrackType">
<xsd:annotation>
<xsd:documentation>Sets the value for the CSS display:grid property {@link https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template-columns MDN web docs: grid-template-columns}

&lt;b&gt;Note:&lt;/b&gt; Not supported in IE11, Edge 15.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="gridTemplateRows" type="n1:_CSSGridTrackType">
<xsd:annotation>
<xsd:documentation>Sets the value for the CSS display:grid property {@link https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template-rows MDN web docs: grid-template-rows}

&lt;b&gt;Note:&lt;/b&gt; Not supported in IE11, Edge 15.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="gridRowGap" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Sets the value for the CSS display:grid property {@link https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-gap MDN web docs: grid-row-gap}

&lt;b&gt;Note:&lt;/b&gt; Not supported in IE11, Edge 15.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="gridColumnGap" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Sets the value for the CSS display:grid property {@link https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-gap MDN web docs: grid-column-gap}

&lt;b&gt;Note:&lt;/b&gt; Not supported in IE11, Edge 15.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="gridGap" type="n1:_CSSGridGapShortHandType">
<xsd:annotation>
<xsd:documentation>Sets the value for the CSS display:grid property {@link https://developer.mozilla.org/en-US/docs/Web/CSS/grid-gap MDN web docs: grid-gap}
It is a shorthand for gridRowGap and gridColumnGap. If some of them is set, the gridGap value will have less priority and will be overwritten.

&lt;b&gt;Note:&lt;/b&gt; Not supported in IE11, Edge 15.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="gridAutoRows" type="n1:_CSSGridTrackType">
<xsd:annotation>
<xsd:documentation>Sets the value for the CSS display:grid property {@link https://developer.mozilla.org/en-US/docs/Web/CSS/grid-auto-rows MDN web docs: grid-auto-rows}

&lt;b&gt;Note:&lt;/b&gt; Not supported in IE11, Edge 15.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="gridAutoColumns" type="n1:_CSSGridTrackType">
<xsd:annotation>
<xsd:documentation>Sets the value for the CSS display:grid property {@link https://developer.mozilla.org/en-US/docs/Web/CSS/grid-auto-columns MDN web docs: grid-auto-columns}

&lt;b&gt;Note:&lt;/b&gt; Not supported in IE11, Edge 15.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="gridAutoFlow" type="n1:_CSSGridAutoFlowType">
<xsd:annotation>
<xsd:documentation>Sets the value for the CSS display:grid property {@link https://developer.mozilla.org/en-US/docs/Web/CSS/grid-auto-flow MDN web docs: grid-auto-flow}

&lt;b&gt;Note:&lt;/b&gt; Not supported in IE11, Edge 15.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.layout.cssgrid.GridBasicLayout'-->
<xsd:complexType name="_GridBasicLayoutType">
<xsd:complexContent>
<xsd:extension base="n1:_GridLayoutBaseType">
<xsd:attribute name="gridTemplateColumns" type="n1:_CSSGridTrackType">
<xsd:annotation>
<xsd:documentation>Sets the value for the CSS display:grid property {@link https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template-columns MDN web docs: grid-template-columns}

&lt;b&gt;Note:&lt;/b&gt; Not supported in IE11, Edge 15.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="gridTemplateRows" type="n1:_CSSGridTrackType">
<xsd:annotation>
<xsd:documentation>Sets the value for the CSS display:grid property {@link https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template-rows MDN web docs: grid-template-rows}

&lt;b&gt;Note:&lt;/b&gt; Not supported in IE11, Edge 15.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="gridRowGap" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Sets the value for the CSS display:grid property {@link https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-gap MDN web docs: grid-row-gap}

&lt;b&gt;Note:&lt;/b&gt; Not supported in IE11, Edge 15.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="gridColumnGap" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Sets the value for the CSS display:grid property {@link https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-gap MDN web docs: grid-column-gap}

&lt;b&gt;Note:&lt;/b&gt; Not supported in IE11, Edge 15.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="gridGap" type="n1:_CSSGridGapShortHandType">
<xsd:annotation>
<xsd:documentation>Sets the value for the CSS display:grid property {@link https://developer.mozilla.org/en-US/docs/Web/CSS/grid-gap MDN web docs: grid-gap}

&lt;b&gt;Note:&lt;/b&gt; Not supported in IE11, Edge 15.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="gridAutoRows" type="n1:_CSSGridTrackType">
<xsd:annotation>
<xsd:documentation>Sets the value for the CSS display:grid property {@link https://developer.mozilla.org/en-US/docs/Web/CSS/grid-auto-rows MDN web docs: grid-auto-rows}

&lt;b&gt;Note:&lt;/b&gt; Not supported in IE11, Edge 15.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="gridAutoColumns" type="n1:_CSSGridTrackType">
<xsd:annotation>
<xsd:documentation>Sets the value for the CSS display:grid property {@link https://developer.mozilla.org/en-US/docs/Web/CSS/grid-auto-columns MDN web docs: grid-auto-columns}

&lt;b&gt;Note:&lt;/b&gt; Not supported in IE11, Edge 15.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="gridAutoFlow" type="n1:_CSSGridAutoFlowType">
<xsd:annotation>
<xsd:documentation>Sets the value for the CSS display:grid property {@link https://developer.mozilla.org/en-US/docs/Web/CSS/grid-auto-flow MDN web docs: grid-auto-flow}

&lt;b&gt;Note:&lt;/b&gt; Not supported in IE11, Edge 15.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.layout.cssgrid.GridBoxLayout'-->
<xsd:complexType name="_GridBoxLayoutType">
<xsd:complexContent>
<xsd:extension base="n1:_GridLayoutBaseType">
<xsd:attribute name="boxMinWidth" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Defines the minimum width of the Boxes</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="boxWidth" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Defines the width of the Boxes</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="boxesPerRowConfig" type="n1:_BoxesPerRowConfigType">
<xsd:annotation>
<xsd:documentation>A string type that defines number of Boxes per row for extra large, large, medium and small screens</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.layout.cssgrid.GridItemLayoutData'-->
<xsd:complexType name="_GridItemLayoutDataType">
<xsd:complexContent>
<xsd:extension base="n0:_LayoutDataType">
<xsd:attribute name="gridColumnStart" type="n1:_CSSGridLineType">
<xsd:annotation>
<xsd:documentation>Sets the value for the CSS display:grid item property grid-column-start</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="gridColumnEnd" type="n1:_CSSGridLineType">
<xsd:annotation>
<xsd:documentation>Sets the value for the CSS display:grid item property grid-column-end</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="gridRowStart" type="n1:_CSSGridLineType">
<xsd:annotation>
<xsd:documentation>Sets the value for the CSS display:grid item property grid-row-start</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="gridRowEnd" type="n1:_CSSGridLineType">
<xsd:annotation>
<xsd:documentation>Sets the value for the CSS display:grid item property grid-row-end</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="gridColumn" type="n1:_CSSGridLineType">
<xsd:annotation>
<xsd:documentation>Sets the value for the CSS display:grid item property grid-column</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="gridRow" type="n1:_CSSGridLineType">
<xsd:annotation>
<xsd:documentation>Sets the value for the CSS display:grid item property grid-row</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.layout.cssgrid.GridLayoutBase'-->
<xsd:complexType name="_GridLayoutBaseType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType"/>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.layout.cssgrid.GridResponsiveLayout'-->
<xsd:complexType name="_GridResponsiveLayoutType">
<xsd:complexContent>
<xsd:extension base="n1:_GridLayoutBaseType">
<xsd:sequence>
<xsd:element name="layout" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The sap.ui.layout.cssgrid.GridSettings applied if no settings are provided for a specific size</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:GridSettings"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="layoutS" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The sap.ui.layout.cssgrid.GridSettings applied for size "S"</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:GridSettings"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="layoutM" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The sap.ui.layout.cssgrid.GridSettings applied for size "M"</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:GridSettings"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="layoutL" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The sap.ui.layout.cssgrid.GridSettings applied for size "L"</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:GridSettings"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="layoutXL" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The sap.ui.layout.cssgrid.GridSettings applied for size "XL"</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:GridSettings"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="containerQuery" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to &lt;code&gt;true&lt;/code&gt;, the current range (large, medium or small) is defined by the size of the
container surrounding the &lt;code&gt;CSSGrid&lt;/code&gt; instead of the device screen size (media Query).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="layoutChange" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Fired when the currently active GridSettings changes</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.layout.cssgrid.GridSettings'-->
<xsd:complexType name="_GridSettingsType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:attribute name="gridTemplateColumns" type="n1:_CSSGridTrackType">
<xsd:annotation>
<xsd:documentation>Sets the value for the CSS display:grid property {@link https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template-columns MDN web docs: grid-template-columns}

&lt;b&gt;Note:&lt;/b&gt; Not supported in IE11, Edge 15.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="gridTemplateRows" type="n1:_CSSGridTrackType">
<xsd:annotation>
<xsd:documentation>Sets the value for the CSS display:grid property {@link https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template-rows MDN web docs: grid-template-rows}

&lt;b&gt;Note:&lt;/b&gt; Not supported in IE11, Edge 15.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="gridRowGap" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Sets the value for the CSS display:grid property {@link https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-gap MDN web docs: grid-row-gap}

&lt;b&gt;Note:&lt;/b&gt; Not supported in IE11, Edge 15.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="gridColumnGap" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Sets the value for the CSS display:grid property {@link https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-gap MDN web docs: grid-column-gap}

&lt;b&gt;Note:&lt;/b&gt; Not supported in IE11, Edge 15.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="gridGap" type="n1:_CSSGridGapShortHandType">
<xsd:annotation>
<xsd:documentation>Sets the value for the CSS display:grid property {@link https://developer.mozilla.org/en-US/docs/Web/CSS/grid-gap MDN web docs: grid-gap}

&lt;b&gt;Note:&lt;/b&gt; Not supported in IE11, Edge 15.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="gridAutoRows" type="n1:_CSSGridTrackType">
<xsd:annotation>
<xsd:documentation>Sets the value for the CSS display:grid property {@link https://developer.mozilla.org/en-US/docs/Web/CSS/grid-auto-rows MDN web docs: grid-auto-rows}

&lt;b&gt;Note:&lt;/b&gt; Not supported in IE11, Edge 15.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="gridAutoColumns" type="n1:_CSSGridTrackType">
<xsd:annotation>
<xsd:documentation>Sets the value for the CSS display:grid property {@link https://developer.mozilla.org/en-US/docs/Web/CSS/grid-auto-columns MDN web docs: grid-auto-columns}

&lt;b&gt;Note:&lt;/b&gt; Not supported in IE11, Edge 15.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="gridAutoFlow" type="n1:_CSSGridAutoFlowType">
<xsd:annotation>
<xsd:documentation>Sets the value for the CSS display:grid property {@link https://developer.mozilla.org/en-US/docs/Web/CSS/grid-auto-flow MDN web docs: grid-auto-flow}

&lt;b&gt;Note:&lt;/b&gt; Not supported in IE11, Edge 15.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.layout.form.ColumnContainerData'-->
<xsd:complexType name="_ColumnContainerDataType">
<xsd:complexContent>
<xsd:extension base="n0:_LayoutDataType">
<xsd:attribute name="columnsXL" type="n1:_ColumnsXLType">
<xsd:annotation>
<xsd:documentation>Number of columns the &lt;code&gt;FormContainer&lt;/code&gt; element uses if the &lt;code&gt;Form&lt;/code&gt; control has extra-large size.

The number of columns for extra-large size must not be smaller than the number of columns for large size.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="columnsL" type="n1:_ColumnsLType">
<xsd:annotation>
<xsd:documentation>Number of columns the &lt;code&gt;FormContainer&lt;/code&gt; element uses if the &lt;code&gt;Form&lt;/code&gt; control has large size.

The number of columns for large size must not be smaller than the number of columns for medium size.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="columnsM" type="n1:_ColumnsMType">
<xsd:annotation>
<xsd:documentation>Number of columns the &lt;code&gt;FormContainer&lt;/code&gt; element uses if the &lt;code&gt;Form&lt;/code&gt; control has medium size.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.layout.form.ColumnElementData'-->
<xsd:complexType name="_ColumnElementDataType">
<xsd:complexContent>
<xsd:extension base="n0:_LayoutDataType">
<xsd:attribute name="cellsLarge" type="n1:_ColumnCellsType">
<xsd:annotation>
<xsd:documentation>Number of cells used by a field if the &lt;code&gt;FormElement&lt;/code&gt; element is large.
The label is then beside the fields per default.

If set to &lt;code&gt;12&lt;/code&gt;, the full size of the &lt;code&gt;FormElement&lt;/code&gt; element is used.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="cellsSmall" type="n1:_ColumnCellsType">
<xsd:annotation>
<xsd:documentation>Number of cells used by a field if the &lt;code&gt;FormElement&lt;/code&gt; element is small.
The label is then above the fields per default.

If set to &lt;code&gt;12&lt;/code&gt;, the full size of the &lt;code&gt;FormElement&lt;/code&gt; is used.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.layout.form.ColumnLayout'-->
<xsd:complexType name="_ColumnLayoutType">
<xsd:complexContent>
<xsd:extension base="n1:_FormLayoutType">
<xsd:attribute name="columnsXL" type="n1:_ColumnsXLType">
<xsd:annotation>
<xsd:documentation>Number of columns for extra-large size.

The number of columns for extra-large size must not be smaller than the number of columns for large size.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="columnsL" type="n1:_ColumnsLType">
<xsd:annotation>
<xsd:documentation>Number of columns for large size.

The number of columns for large size must not be smaller than the number of columns for medium size.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="columnsM" type="n1:_ColumnsMType">
<xsd:annotation>
<xsd:documentation>Number of columns for medium size.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="labelCellsLarge" type="n1:_ColumnCellsType">
<xsd:annotation>
<xsd:documentation>Defines how many cells a label uses if the column is large.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="emptyCellsLarge" type="n1:_EmptyCellsType">
<xsd:annotation>
<xsd:documentation>Defines how many cells are empty at the end of a row.
This could be used to keep the fields small on large screens.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.layout.form.Form'-->
<xsd:complexType name="_FormType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation 'formContainers'-->
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n1:FormContainer"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
<xsd:element name="formContainers" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Containers with the content of the form. A &lt;code&gt;FormContainer&lt;/code&gt; represents a group inside the &lt;code&gt;Form&lt;/code&gt;.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n1:FormContainer"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="title" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Title of the &lt;code&gt;Form&lt;/code&gt;. Can either be a &lt;code&gt;Title&lt;/code&gt; element or a string.
If a &lt;code&gt;Title&lt;/code&gt; element it used, the style of the title can be set.

&lt;b&gt;Note:&lt;/b&gt; If a &lt;code&gt;Toolbar&lt;/code&gt; is used, the &lt;code&gt;Title&lt;/code&gt; is ignored.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n0:Title"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="toolbar" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Toolbar of the &lt;code&gt;Form&lt;/code&gt;.

&lt;b&gt;Note:&lt;/b&gt; If a &lt;code&gt;Toolbar&lt;/code&gt; is used, the &lt;code&gt;Title&lt;/code&gt; is ignored.
If a title is needed inside the &lt;code&gt;Toolbar&lt;/code&gt; it must be added at content to the &lt;code&gt;Toolbar&lt;/code&gt;.
In this case add the &lt;code&gt;Title&lt;/code&gt; to the &lt;code&gt;ariaLabelledBy&lt;/code&gt; association.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n0:Control"/>
<xsd:element ref="n0:Fragment"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="layout" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Layout of the &lt;code&gt;Form&lt;/code&gt;. The assigned &lt;code&gt;Layout&lt;/code&gt; renders the &lt;code&gt;Form&lt;/code&gt;.
We recommend using the &lt;code&gt;ResponsiveGridLayout&lt;/code&gt; for rendering a &lt;code&gt;Form&lt;/code&gt;,
as its responsiveness allows the available space to be used in the best way possible.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n1:FormLayout"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Width of the &lt;code&gt;Form&lt;/code&gt;.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="editable" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Applies a device-specific and theme-specific line height and label alignment to the form rows if the form has editable content.
If set, all (not only the editable) rows of the form will get the line height of editable fields.

The labels inside the form will be rendered by default in the according mode.

&lt;b&gt;Note:&lt;/b&gt; The setting of this property does not change the content of the form.
For example, &lt;code&gt;Input&lt;/code&gt; controls in a form with &lt;code&gt;editable&lt;/code&gt; set to false are still editable.

&lt;b&gt;Warning:&lt;/b&gt; If this property is wrongly set, this might lead to visual issues.
The labels and fields might be misaligned, the labels might be rendered in the wrong mode,
and the spacing between the single controls might be wrong.
Also, controls that do not fit the mode might be rendered incorrectly.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaLabelledBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / IDs that label this control (see WAI-ARIA attribute &lt;code&gt;aria-labelledby&lt;/code&gt;).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.layout.form.FormContainer'-->
<xsd:complexType name="_FormContainerType">
<xsd:complexContent>
<xsd:extension base="n0:_ElementType">
<xsd:sequence>
<!--default aggregation 'formElements'-->
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n1:FormElement"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
<xsd:element name="formElements" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The &lt;code&gt;FormElements&lt;/code&gt; contain the content (labels and fields) of the &lt;code&gt;FormContainers&lt;/code&gt;.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n1:FormElement"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="title" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Title of the &lt;code&gt;FormContainer&lt;/code&gt;. Can either be a &lt;code&gt;Title&lt;/code&gt; element or a string.
If a &lt;code&gt;Title&lt;/code&gt; element is used, the style of the title can be set.

&lt;b&gt;Note:&lt;/b&gt; If a &lt;code&gt;Toolbar&lt;/code&gt; is used, the &lt;code&gt;Title&lt;/code&gt; is ignored.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n0:Title"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="toolbar" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Toolbar of the &lt;code&gt;FormContainer&lt;/code&gt;.

&lt;b&gt;Note:&lt;/b&gt; If a &lt;code&gt;Toolbar&lt;/code&gt; is used, the &lt;code&gt;Title&lt;/code&gt; is ignored.
If a title is needed inside the &lt;code&gt;Toolbar&lt;/code&gt; it must be added at content to the &lt;code&gt;Toolbar&lt;/code&gt;.
In this case add the &lt;code&gt;Title&lt;/code&gt; to the &lt;code&gt;ariaLabelledBy&lt;/code&gt; association.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n0:Control"/>
<xsd:element ref="n0:Fragment"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="expanded" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Container is expanded.

&lt;b&gt;Note:&lt;/b&gt; This property only works if &lt;code&gt;expandable&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="expandable" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Defines if the &lt;code&gt;FormContainer&lt;/code&gt; is expandable.

&lt;b&gt;Note:&lt;/b&gt; The expander icon will only be shown if a &lt;code&gt;title&lt;/code&gt; is set for the &lt;code&gt;FormContainer&lt;/code&gt;.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="visible" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to &lt;code&gt;false&lt;/code&gt;, the &lt;code&gt;FormContainer&lt;/code&gt; is not rendered.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaLabelledBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / IDs that label this control (see WAI-ARIA attribute &lt;code&gt;aria-labelledby&lt;/code&gt;).

&lt;b&gt;Note:&lt;/b&gt; This attribute is only rendered if the &lt;code&gt;FormContainer&lt;/code&gt; has it's own
DOM representation in the used &lt;code&gt;FormLayout&lt;/code&gt;.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.layout.form.FormElement'-->
<xsd:complexType name="_FormElementType">
<xsd:complexContent>
<xsd:extension base="n0:_ElementType">
<xsd:sequence>
<!--default aggregation 'fields'-->
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control"/>
<xsd:element ref="n0:Fragment"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
<xsd:element name="label" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Label of the fields. Can either be a &lt;code&gt;Label&lt;/code&gt; control or a string.
If a &lt;code&gt;Label&lt;/code&gt; control is used, the properties of the &lt;code&gt;Label&lt;/code&gt; can be set.
If no assignment between &lt;code&gt;Label&lt;/code&gt; and the fields is set via (&lt;code&gt;labelFor&lt;/code&gt; property of the &lt;code&gt;Label&lt;/code&gt;),
it will be done automatically by the &lt;code&gt;FormElement&lt;/code&gt;.
In this case the &lt;code&gt;Label&lt;/code&gt; is assigned to the fields of the &lt;code&gt;FormElement&lt;/code&gt;.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n0:Control"/>
<xsd:element ref="n0:Fragment"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="fields" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Form controls that belong together to be displayed in one row of a &lt;code&gt;Form&lt;/code&gt;.

&lt;b&gt;Warning:&lt;/b&gt; Do not put any layout or other container controls in here.
This could damage the visual layout, keyboard support and screen-reader support.
Only form controls are allowed. Views are also not supported.
Allowed controls implement the interface &lt;code&gt;sap.ui.core.IFormContent&lt;/code&gt;.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control"/>
<xsd:element ref="n0:Fragment"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="visible" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to &lt;code&gt;false&lt;/code&gt;, the &lt;code&gt;FormElement&lt;/code&gt; is not rendered.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.layout.form.FormLayout'-->
<xsd:complexType name="_FormLayoutType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:attribute name="backgroundDesign" type="n1:_BackgroundDesignType">
<xsd:annotation>
<xsd:documentation>Specifies the background color of the &lt;code&gt;Form&lt;/code&gt; content.

&lt;b&gt;Note:&lt;/b&gt; The visualization of the different options depends on the theme used.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.layout.form.GridContainerData'-->
<xsd:complexType name="_GridContainerDataType">
<xsd:complexContent>
<xsd:extension base="n0:_LayoutDataType">
<xsd:attribute name="halfGrid" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set, the container takes half the width of the &lt;code&gt;Form&lt;/code&gt; (8 cells), if not it takes the full width (16 cells).
If the &lt;code&gt;GridLayout&lt;/code&gt; is set to &lt;code&gt;singleColumn&lt;/code&gt;, the full width of the grid is only 8 cells. So containers are rendered only once per row.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.layout.form.GridElementData'-->
<xsd:complexType name="_GridElementDataType">
<xsd:complexContent>
<xsd:extension base="n0:_LayoutDataType">
<xsd:attribute name="hCells" type="n1:_GridElementCellsType">
<xsd:annotation>
<xsd:documentation>Number of cells in horizontal direction.

If set to &lt;code&gt;auto&lt;/code&gt;, the size is determined by the number of fields and the available cells. For labels the auto size is 3 cells.

If set to &lt;code&gt;full&lt;/code&gt;, only one field is allowed within the &lt;code&gt;FormElement&lt;/code&gt;. It gets the full width of the row and the label is displayed above.

&lt;b&gt;Note:&lt;/b&gt; For labels, the full size setting has no effect.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="vCells" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Number of cells in vertical direction.

&lt;b&gt;Note:&lt;/b&gt; This property has no effect on labels.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.layout.form.GridLayout'-->
<xsd:complexType name="_GridLayoutType">
<xsd:complexContent>
<xsd:extension base="n1:_FormLayoutType">
<xsd:attribute name="singleColumn" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set, the grid renders only one &lt;code&gt;FormContainer&lt;/code&gt; per column. That means one &lt;code&gt;FormContainer&lt;/code&gt; is below the other. The whole grid has 8 cells per row.

If not set, &lt;code&gt;FormContainer&lt;/code&gt; can use the full width of the grid or two &lt;code&gt;FormContainers&lt;/code&gt; can be placed beside each other. In this case the whole grid has 16 cells per row.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.layout.form.ResponsiveGridLayout'-->
<xsd:complexType name="_ResponsiveGridLayoutType">
<xsd:complexContent>
<xsd:extension base="n1:_FormLayoutType">
<xsd:attribute name="labelSpanXL" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Default span for labels in extra large size.

&lt;b&gt;Note:&lt;/b&gt; If the default value -1 is not overwritten with the meaningful one then the &lt;code&gt;labelSpanL&lt;/code&gt; value is used.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="labelSpanL" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Default span for labels in large size.

&lt;b&gt;Note:&lt;/b&gt; If &lt;code&gt;adjustLabelSpan&lt;/code&gt; is set, this property is only used if more than 1 &lt;code&gt;FormContainer&lt;/code&gt; is in one line. If only 1 &lt;code&gt;FormContainer&lt;/code&gt; is in the line, then the &lt;code&gt;labelSpanM&lt;/code&gt; value is used.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="labelSpanM" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Default span for labels in medium size.

&lt;b&gt;Note:&lt;/b&gt; If &lt;code&gt;adjustLabelSpan&lt;/code&gt; is set this property is used for full-size &lt;code&gt;FormContainers&lt;/code&gt;. If more than one &lt;code&gt;FormContainer&lt;/code&gt; is in one line, &lt;code&gt;labelSpanL&lt;/code&gt; is used.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="labelSpanS" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Default span for labels in small size.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="adjustLabelSpan" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set, the usage of &lt;code&gt;labelSpanL&lt;/code&gt; and &lt;code&gt;labelSpanM&lt;/code&gt; are dependent on the number of &lt;code&gt;FormContainers&lt;/code&gt; in one row.
If only one &lt;code&gt;FormContainer&lt;/code&gt; is displayed in one row, &lt;code&gt;labelSpanM&lt;/code&gt; is used to define the size of the label.
This is the same for medium and large &lt;code&gt;Forms&lt;/code&gt;.
This is done to align the labels on forms where full-size &lt;code&gt;FormContainers&lt;/code&gt; and multiple-column rows are used in the same &lt;code&gt;Form&lt;/code&gt;
(because every &lt;code&gt;FormContainer&lt;/code&gt; has its own &lt;code&gt;Grid&lt;/code&gt; inside).

If not set, the usage of &lt;code&gt;labelSpanL&lt;/code&gt; and &lt;code&gt;labelSpanM&lt;/code&gt; are dependent on the &lt;code&gt;Form&lt;/code&gt; size.
The number of &lt;code&gt;FormContainers&lt;/code&gt; doesn't matter in this case.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="emptySpanXL" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Number of grid cells that are empty at the end of each line on extra large size.

&lt;b&gt;Note:&lt;/b&gt; If the default value -1 is not overwritten with the meaningful one then the &lt;code&gt;emptySpanL&lt;/code&gt; value is used.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="emptySpanL" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Number of grid cells that are empty at the end of each line on large size.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="emptySpanM" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Number of grid cells that are empty at the end of each line on medium size.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="emptySpanS" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Number of grid cells that are empty at the end of each line on small size.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="columnsXL" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Number of columns for extra large size.

The number of columns for extra large size must not be smaller than the number of columns for large size.
&lt;b&gt;Note:&lt;/b&gt; If the default value -1 is not overwritten with the meaningful one then the &lt;code&gt;columnsL&lt;/code&gt; value is used (from the backward compatibility reasons).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="columnsL" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Number of columns for large size.

The number of columns for large size must not be smaller than the number of columns for medium size.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="columnsM" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Number of columns for medium size.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="singleContainerFullSize" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If the &lt;code&gt;Form&lt;/code&gt; contains only one single &lt;code&gt;FormContainer&lt;/code&gt; and this property is set,
the &lt;code&gt;FormContainer&lt;/code&gt; is displayed using the full size of the &lt;code&gt;Form&lt;/code&gt;.
In this case the properties &lt;code&gt;columnsXL&lt;/code&gt;, &lt;code&gt;columnsL&lt;/code&gt; and &lt;code&gt;columnsM&lt;/code&gt; are ignored.

In all other cases the &lt;code&gt;FormContainer&lt;/code&gt; is displayed in the size of one column.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="breakpointXL" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Breakpoint (in pixel) between large size and extra large (XL) size.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="breakpointL" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Breakpoint (in pixel) between Medium size and Large size.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="breakpointM" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Breakpoint (in pixel) between Small size and Medium size.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.layout.form.ResponsiveLayout'-->
<xsd:complexType name="_ResponsiveLayoutType">
<xsd:complexContent>
<xsd:extension base="n1:_FormLayoutType"/>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.layout.form.SimpleForm'-->
<xsd:complexType name="_SimpleFormType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation 'content'-->
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Element"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
<xsd:element name="content" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The content of the form is structured in the following way:
&lt;ul&gt;
&lt;li&gt;Add a &lt;code&gt;Title&lt;/code&gt; or &lt;code&gt;Toolbar&lt;/code&gt; control to start a new group (&lt;code&gt;{@link sap.ui.layout.form.FormContainer FormContainer}&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Add a &lt;code&gt;Label&lt;/code&gt; control to start a new row (&lt;code&gt;{@link sap.ui.layout.form.FormElement FormElement}&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Add controls as input fields, text fields or other as needed.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;LayoutData&lt;/code&gt; to influence the layout for special cases in the single controls.
For example, if a &lt;code&gt;ResponsiveLayout&lt;/code&gt; is used as a layout,
the form content is weighted using weight 3 for the labels and weight 5 for the fields part.
By default the label column is 192 pixels wide.
If your input controls should influence their width, you can add &lt;code&gt;sap.ui.layout.ResponsiveFlowLayoutData&lt;/code&gt;
to them via &lt;code&gt;setLayoutData&lt;/code&gt; method.
Ensure that the sum of the weights in the &lt;code&gt;ResponsiveFlowLayoutData&lt;/code&gt; is not more than 5,
as this is the total width of the input control part of each form row.&lt;/li&gt;
&lt;/ul&gt;
Example for a row where the &lt;code&gt;Input&lt;/code&gt; weight 4 and the second &lt;code&gt;Input&lt;/code&gt; weight 1 (using &lt;code&gt;ResponsiveLayout&lt;/code&gt;):
&lt;pre&gt;
new sap.m.Label({text:"Label"});
new sap.m.Input({value:"Weight 4", layoutData: new sap.ui.layout.ResponsiveFlowLayoutData({weight:4})}),
new sap.m.Input({value:"Weight 1", layoutData: new sap.ui.layout.ResponsiveFlowLayoutData({weight:1})}),
&lt;/pre&gt;

For example, if a &lt;code&gt;ResponsiveGridLayout&lt;/code&gt; is used as a layout, there are 12 cells in one row.
Depending on the screen size the labels use the defined &lt;code&gt;labelSpan&lt;/code&gt;.
The remaining cells are used for the fields (and &lt;code&gt;emptySpan&lt;/code&gt; if defined).
The available cells are distributed to all fields in the row. If one field should use a fixed number of cells
you can add &lt;code&gt;sap.ui.layout.GridData&lt;/code&gt; to them via &lt;code&gt;setLayoutData&lt;/code&gt; method.
If there are additional fields in the row they will get the remaining cells.
&lt;/ul&gt;
Example for a row with two &lt;code&gt;Input&lt;/code&gt; controls where one uses four cells on small screens,
one cell on medium screens and 2 cells on larger screens (using &lt;code&gt;ResponsiveGridLayout&lt;/code&gt;):
&lt;pre&gt;
new sap.m.Label({text:"Label"});
new sap.m.Input({value:"auto size"}),
new sap.m.Input({value:"fix size", layoutData: new sap.ui.layout.GridData({span: "XL1 L1 M2 S4"})}),
&lt;/pre&gt;

&lt;b&gt;Warning:&lt;/b&gt; Do not put any layout or other container controls in here. This could damage the visual layout,
keyboard support and screen-reader support. Only labels, titles, toolbars and form controls are allowed.
Views are also not supported. Allowed form controls implement the interface &lt;code&gt;sap.ui.core.IFormContent&lt;/code&gt;.

If editable controls are used as content, the &lt;code&gt;editable&lt;/code&gt; property must be set to &lt;code&gt;true&lt;/code&gt;,
otherwise to &lt;code&gt;false&lt;/code&gt;. If the &lt;code&gt;editable&lt;/code&gt; property is set incorrectly, there will be visual issues
like wrong label alignment or wrong spacing between the controls.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Element"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="title" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Title element of the &lt;code&gt;SimpleForm&lt;/code&gt;. Can either be a &lt;code&gt;Title&lt;/code&gt; element, or a string.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n0:Title"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="toolbar" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Toolbar of the &lt;code&gt;SimpleForm&lt;/code&gt;.

&lt;b&gt;Note:&lt;/b&gt; If a &lt;code&gt;Toolbar&lt;/code&gt; is used, the &lt;code&gt;Title&lt;/code&gt; is ignored.
If a title is needed inside the &lt;code&gt;Toolbar&lt;/code&gt; it must be added at content to the &lt;code&gt;Toolbar&lt;/code&gt;.
In this case add the &lt;code&gt;Title&lt;/code&gt; to the &lt;code&gt;ariaLabelledBy&lt;/code&gt; association.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n0:Control"/>
<xsd:element ref="n0:Fragment"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="maxContainerCols" type="xsd:int">
<xsd:annotation>
<xsd:documentation>The maximum amount of groups (&lt;code&gt;{@link sap.ui.layout.form.FormContainer FormContainers}&lt;/code&gt;) per row that is used before a new row is started.

&lt;b&gt;Note:&lt;/b&gt; If &lt;code&gt;{@link sap.ui.layout.form.SimpleFormLayout.ResponsiveGridLayout}&lt;/code&gt; is used as &lt;code&gt;layout&lt;/code&gt;, this property is not used.
Please use the properties &lt;code&gt;ColumnsL&lt;/code&gt; and &lt;code&gt;ColumnsM&lt;/code&gt; in this case.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="minWidth" type="xsd:int">
<xsd:annotation>
<xsd:documentation>The overall minimum width in pixels that is used for the &lt;code&gt;SimpleForm&lt;/code&gt;.

If the available width is below the given &lt;code&gt;minWidth&lt;/code&gt; the &lt;code&gt;SimpleForm&lt;/code&gt; will create a new row for the next group (&lt;code&gt;{@link sap.ui.layout.form.FormContainer FormContainer}&lt;/code&gt;).
The default value is -1, meaning that inner groups (&lt;code&gt;{@link sap.ui.layout.form.FormContainer FormContainers}&lt;/code&gt;) will be stacked until &lt;code&gt;maxContainerCols&lt;/code&gt; is reached,
irrespective of whether a &lt;code&gt;width&lt;/code&gt; is reached or the available parents width is reached.

&lt;b&gt;Note:&lt;/b&gt; This property is only used if a &lt;code&gt;ResponsiveLayout&lt;/code&gt; is used as a layout.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Width of the form.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="editable" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Applies a device-specific and theme-specific line height and label alignment to the form rows if the form has editable content.
If set, all (not only the editable) rows of the form will get the line height of editable fields.

The labels inside the form will be rendered by default in the according mode.

&lt;b&gt;Note:&lt;/b&gt; The setting of this property does not change the content of the form.
For example, &lt;code&gt;Input&lt;/code&gt; controls in a form with &lt;code&gt;editable&lt;/code&gt; set to false are still editable.

&lt;b&gt;Warning:&lt;/b&gt; If this property is wrongly set, this might lead to visual issues.
The labels and fields might be misaligned, the labels might be rendered in the wrong mode,
and the spacing between the single controls might be wrong.
Also, controls that do not fit the mode might be rendered incorrectly.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="labelMinWidth" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Specifies the min-width in pixels of the label in all form rows.

&lt;b&gt;Note:&lt;/b&gt; This property is only used if a &lt;code&gt;ResponsiveLayout&lt;/code&gt; is used as a layout.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="layout" type="n1:_SimpleFormLayoutType">
<xsd:annotation>
<xsd:documentation>The &lt;code&gt;FormLayout&lt;/code&gt; that is used to render the &lt;code&gt;SimpleForm&lt;/code&gt;.

We recommend using the &lt;code&gt;ResponsiveGridLayout&lt;/code&gt; for rendering a &lt;code&gt;SimpleForm&lt;/code&gt;,
as its responsiveness uses the space available in the best way possible.

&lt;b&gt;Note&lt;/b&gt; If possible, set the &lt;code&gt;layout&lt;/code&gt; before adding content to prevent calculations for the default layout.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="labelSpanXL" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Default span for labels in extra large size.

&lt;b&gt;Note:&lt;/b&gt; This property is only used if a &lt;code&gt;ResponsiveGridLayout&lt;/code&gt; is used as a layout.
If the default value -1 is not overwritten with the meaningful one then the &lt;code&gt;labelSpanL&lt;/code&gt; value is used (from the backward compatibility reasons).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="labelSpanL" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Default span for labels in large size.

&lt;b&gt;Note:&lt;/b&gt; If &lt;code&gt;adjustLabelSpan&lt;/code&gt; is set, this property is only used if more than 1 &lt;code&gt;FormContainer&lt;/code&gt; is in one line.
If only 1 &lt;code&gt;FormContainer&lt;/code&gt; is in the line, then the &lt;code&gt;labelSpanM&lt;/code&gt; value is used.

&lt;b&gt;Note:&lt;/b&gt; This property is only used if &lt;code&gt;ResponsiveGridLayout&lt;/code&gt; or &lt;code&gt;ColumnLayout&lt;/code&gt; is used as a layout.
If a &lt;code&gt;ColumnLayout&lt;/code&gt; is used, this property defines the label size for large columns.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="labelSpanM" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Default span for labels in medium size.

&lt;b&gt;Note:&lt;/b&gt; If &lt;code&gt;adjustLabelSpan&lt;/code&gt; is set, this property is used for full-size &lt;code&gt;FormContainers&lt;/code&gt;.
If more than one &lt;code&gt;FormContainer&lt;/code&gt; is in one line, &lt;code&gt;labelSpanL&lt;/code&gt; is used.

&lt;b&gt;Note:&lt;/b&gt; This property is only used if a &lt;code&gt;ResponsiveGridLayout&lt;/code&gt; is used as a layout.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="labelSpanS" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Default span for labels in small size.

&lt;b&gt;Note:&lt;/b&gt; This property is only used if a &lt;code&gt;ResponsiveGridLayout&lt;/code&gt; is used as a layout.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="adjustLabelSpan" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set, the usage of &lt;code&gt;labelSpanL&lt;/code&gt; and &lt;code&gt;labelSpanM&lt;/code&gt; are dependent on the number of &lt;code&gt;FormContainers&lt;/code&gt; in one row.
If only one &lt;code&gt;FormContainer&lt;/code&gt; is displayed in one row, &lt;code&gt;labelSpanM&lt;/code&gt; is used to define the size of the label.
This is the same for medium and large &lt;code&gt;Forms&lt;/code&gt;.
This is done to align the labels on forms where full-size &lt;code&gt;FormContainers&lt;/code&gt; and multiple-column rows are used in the same &lt;code&gt;Form&lt;/code&gt;
(because every &lt;code&gt;FormContainer&lt;/code&gt; has its own grid inside).

If not set, the usage of &lt;code&gt;labelSpanL&lt;/code&gt; and &lt;code&gt;labelSpanM&lt;/code&gt; are dependent on the &lt;code&gt;Form&lt;/code&gt; size.
The number of &lt;code&gt;FormContainers&lt;/code&gt; doesn't matter in this case.

&lt;b&gt;Note:&lt;/b&gt; This property is only used if a &lt;code&gt;ResponsiveGridLayout&lt;/code&gt; is used as a layout.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="emptySpanXL" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Number of grid cells that are empty at the end of each line on extra large size.

&lt;b&gt;Note:&lt;/b&gt; This property is only used if a &lt;code&gt;ResponsiveGridLayout&lt;/code&gt; is used as a layout.
If the default value -1 is not overwritten with the meaningful one then the &lt;code&gt;emptySpanL&lt;/code&gt; value is used (from the backward compatibility reasons).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="emptySpanL" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Number of grid cells that are empty at the end of each line on large size.

&lt;b&gt;Note:&lt;/b&gt; This property is only used if a &lt;code&gt;ResponsiveGridLayout&lt;/code&gt; or a &lt;code&gt;ColumnLayout&lt;/code&gt; is used as a layout.
If a &lt;code&gt;ColumnLayout&lt;/code&gt; is used, this property defines the empty cells for large columns.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="emptySpanM" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Number of grid cells that are empty at the end of each line on medium size.

&lt;b&gt;Note:&lt;/b&gt; This property is only used if a &lt;code&gt;ResponsiveGridLayout&lt;/code&gt; is used as a layout.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="emptySpanS" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Number of grid cells that are empty at the end of each line on small size.

&lt;b&gt;Note:&lt;/b&gt; This property is only used if a &lt;code&gt;ResponsiveGridLayout&lt;/code&gt; is used as a layout.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="columnsXL" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Form columns for extra large size.
The number of columns for extra large size must not be smaller than the number of columns for large size.

&lt;b&gt;Note:&lt;/b&gt; This property is only used if a &lt;code&gt;ResponsiveGridLayout&lt;/code&gt; or a &lt;code&gt;ColumnLayout&lt;/code&gt; is used as a layout.
If the default value -1 is not overwritten with the meaningful one then the &lt;code&gt;columnsL&lt;/code&gt; value is used (from the backward compatibility reasons).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="columnsL" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Form columns for large size.
The number of columns for large size must not be smaller than the number of columns for medium size.

&lt;b&gt;Note:&lt;/b&gt; This property is only used if a &lt;code&gt;ResponsiveGridLayout&lt;/code&gt; or a &lt;code&gt;ColumnLayout&lt;/code&gt; is used as a layout.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="columnsM" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Form columns for medium size.

&lt;b&gt;Note:&lt;/b&gt; This property is only used if a &lt;code&gt;ResponsiveGridLayout&lt;/code&gt; or a &lt;code&gt;ColumnLayout&lt;/code&gt; is used as a layout.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="singleContainerFullSize" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If the &lt;code&gt;Form&lt;/code&gt; contains only one single &lt;code&gt;FormContainer&lt;/code&gt; and this property is set,
the &lt;code&gt;FormContainer&lt;/code&gt; is displayed using the full size of the &lt;code&gt;Form&lt;/code&gt;.
In this case the properties &lt;code&gt;columnsL&lt;/code&gt; and &lt;code&gt;columnsM&lt;/code&gt; are ignored.

In all other cases the &lt;code&gt;FormContainer&lt;/code&gt; is displayed in the size of one column.

&lt;b&gt;Note:&lt;/b&gt; This property is only used if a &lt;code&gt;ResponsiveGridLayout&lt;/code&gt; is used as a layout.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="breakpointXL" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Breakpoint between Medium size and Large size.

&lt;b&gt;Note:&lt;/b&gt; This property is only used if a &lt;code&gt;ResponsiveGridLayout&lt;/code&gt; is used as a layout.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="breakpointL" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Breakpoint between Medium size and Large size.

&lt;b&gt;Note:&lt;/b&gt; This property is only used if a &lt;code&gt;ResponsiveGridLayout&lt;/code&gt; is used as a layout.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="breakpointM" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Breakpoint between Small size and Medium size.

&lt;b&gt;Note:&lt;/b&gt; This property is only used if a &lt;code&gt;ResponsiveGridLayout&lt;/code&gt; is used as a layout.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="backgroundDesign" type="n1:_BackgroundDesignType">
<xsd:annotation>
<xsd:documentation>Specifies the background color of the &lt;code&gt;SimpleForm&lt;/code&gt; content.

The visualization of the different options depends on the used theme.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaLabelledBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / IDs which label this control (see WAI-ARIA attribute &lt;code&gt;aria-labelledby&lt;/code&gt;).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<xsd:simpleType name="_BackgroundDesignType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Solid">
<xsd:annotation>
<xsd:documentation>A solid background color dependent on the theme.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Transparent">
<xsd:annotation>
<xsd:documentation>Transparent background.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Translucent">
<xsd:annotation>
<xsd:documentation>A translucent background depending on the opacity value of the theme.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_BlockBackgroundTypeType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Default">
<xsd:annotation>
<xsd:documentation>Background is transparent</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Light">
<xsd:annotation>
<xsd:documentation>Background is with predefined light colors</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Mixed">
<xsd:annotation>
<xsd:documentation>Background with bright and dark background colors</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Accent">
<xsd:annotation>
<xsd:documentation>Background with pre-defined accent colors</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Dashboard">
<xsd:annotation>
<xsd:documentation>For applications that want to make use of e.g. charts in the Blocks, this layout type has spacings around the Blocks</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_BlockLayoutCellColorSetType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="ColorSet1">
<xsd:annotation>
<xsd:documentation>Color Set 1</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="ColorSet2">
<xsd:annotation>
<xsd:documentation>Color Set 2</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="ColorSet3">
<xsd:annotation>
<xsd:documentation>Color Set 3</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="ColorSet4">
<xsd:annotation>
<xsd:documentation>Color Set 4</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="ColorSet5">
<xsd:annotation>
<xsd:documentation>Color Set 5</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="ColorSet6">
<xsd:annotation>
<xsd:documentation>Color Set 6</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="ColorSet7">
<xsd:annotation>
<xsd:documentation>Color Set 7</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="ColorSet8">
<xsd:annotation>
<xsd:documentation>Color Set 8</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="ColorSet9">
<xsd:annotation>
<xsd:documentation>Color Set 9</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="ColorSet10">
<xsd:annotation>
<xsd:documentation>Color Set 10</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="ColorSet11">
<xsd:annotation>
<xsd:documentation>Color Set 11</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_BlockLayoutCellColorShadeType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="ShadeA">
<xsd:annotation>
<xsd:documentation>Shade A</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="ShadeB">
<xsd:annotation>
<xsd:documentation>Shade B</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="ShadeC">
<xsd:annotation>
<xsd:documentation>Shade C</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="ShadeD">
<xsd:annotation>
<xsd:documentation>Shade D</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="ShadeE">
<xsd:annotation>
<xsd:documentation>Shade E - available only for Fiori 3 theme</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="ShadeF">
<xsd:annotation>
<xsd:documentation>Shade F - available only for Fiori 3 theme</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_BlockRowColorSetsType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="ColorSet1">
<xsd:annotation>
<xsd:documentation>sap.ui.layout.BlockBackgroundType.Default: N/A
sap.ui.layout.BlockBackgroundType.Light: Color Set 1
sap.ui.layout.BlockBackgroundType.Mixed: Color Set 1
sap.ui.layout.BlockBackgroundType.Accent: Color Set 1
sap.ui.layout.BlockBackgroundType.Dashboard: N/A</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="ColorSet2">
<xsd:annotation>
<xsd:documentation>sap.ui.layout.BlockBackgroundType.Default: N/A
sap.ui.layout.BlockBackgroundType.Light: Color Set 2
sap.ui.layout.BlockBackgroundType.Mixed: Color Set 2
sap.ui.layout.BlockBackgroundType.Accent: Color Set 2
sap.ui.layout.BlockBackgroundType.Dashboard: N/A</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="ColorSet3">
<xsd:annotation>
<xsd:documentation>sap.ui.layout.BlockBackgroundType.Default: N/A
sap.ui.layout.BlockBackgroundType.Light: Color Set 1
sap.ui.layout.BlockBackgroundType.Mixed: Color Set 1
sap.ui.layout.BlockBackgroundType.Accent: Color Set 3
sap.ui.layout.BlockBackgroundType.Dashboard: N/A</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="ColorSet4">
<xsd:annotation>
<xsd:documentation>sap.ui.layout.BlockBackgroundType.Default: N/A
sap.ui.layout.BlockBackgroundType.Light: Color Set 2
sap.ui.layout.BlockBackgroundType.Mixed: Color Set 2
sap.ui.layout.BlockBackgroundType.Accent: Color Set 4
sap.ui.layout.BlockBackgroundType.Dashboard: N/A</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_BoxesPerRowConfigType">
<xsd:restriction base="xsd:string">
<xsd:pattern value="([Xx][Ll](?:[1-9]|1[0-2]))? ?([Ll](?:[1-9]|1[0-2]))? ?([Mm](?:[1-9]|1[0-2]))? ?([Ss](?:[1-9]|1[0-2]))?"/>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_GridIndentType">
<xsd:restriction base="xsd:string">
<xsd:pattern value="([Xx][Ll](?:[0-9]|1[0-1]))? ?([Ll](?:[0-9]|1[0-1]))? ?([Mm](?:[0-9]|1[0-1]))? ?([Ss](?:[0-9]|1[0-1]))?"/>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_GridPositionType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Left">
<xsd:annotation>
<xsd:documentation>&lt;code&gt;Grid&lt;/code&gt; is aligned left.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Right">
<xsd:annotation>
<xsd:documentation>&lt;code&gt;Grid&lt;/code&gt; is aligned to the right.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Center">
<xsd:annotation>
<xsd:documentation>&lt;code&gt;Grid&lt;/code&gt; is centered on the screen.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_GridSpanType">
<xsd:restriction base="xsd:string">
<xsd:pattern value="([Xx][Ll](?:[1-9]|1[0-2]))? ?([Ll](?:[1-9]|1[0-2]))? ?([Mm](?:[1-9]|1[0-2]))? ?([Ss](?:[1-9]|1[0-2]))?"/>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_SideContentFallDownType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="BelowXL">
<xsd:annotation>
<xsd:documentation>Side content falls down on breakpoints below XL</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="BelowL">
<xsd:annotation>
<xsd:documentation>Side content falls down on breakpoints below L</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="BelowM">
<xsd:annotation>
<xsd:documentation>Side content falls down on breakpoints below M</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="OnMinimumWidth">
<xsd:annotation>
<xsd:documentation>Side content falls down on breakpoint M and the minimum width for the side content</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_SideContentPositionType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="End">
<xsd:annotation>
<xsd:documentation>The side content is on the right side of the main container in left-to-right mode and on the left side in right-to-left mode.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Begin">
<xsd:annotation>
<xsd:documentation>The side content is on the left side of the main container in left-to-right mode and on the right side in right-to-left mode.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_SideContentVisibilityType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="AlwaysShow">
<xsd:annotation>
<xsd:documentation>Show the side content on any breakpoint</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="ShowAboveL">
<xsd:annotation>
<xsd:documentation>Show the side content on XL breakpoint</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="ShowAboveM">
<xsd:annotation>
<xsd:documentation>Show the side content on L and XL breakpoints</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="ShowAboveS">
<xsd:annotation>
<xsd:documentation>Show the side content on M, L and XL breakpoints</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="NeverShow">
<xsd:annotation>
<xsd:documentation>Don't show the side content on any breakpoints</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_CSSGridAutoFlowType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Row">
<xsd:annotation>
<xsd:documentation>Insert auto-placed items by filling each row.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Column">
<xsd:annotation>
<xsd:documentation>Insert auto-placed items by filling each column.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="RowDense">
<xsd:annotation>
<xsd:documentation>Insert auto-placed items by filling each row, and fill any holes in the grid.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="ColumnDense">
<xsd:annotation>
<xsd:documentation>Insert auto-placed items by filling each column, and fill any holes in the grid.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_CSSGridLineType">
<xsd:restriction base="xsd:string">
<xsd:pattern value="auto|inherit|((span)?(\s)?-?[0-9]+(\s/\s(span)?(\s)?-?[0-9]*)?)?"/>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_GridElementCellsType">
<xsd:restriction base="xsd:string">
<xsd:pattern value="auto|full|([1-9]|1[0-6])"/>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_SimpleFormLayoutType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="ResponsiveLayout">
<xsd:annotation>
<xsd:documentation>Uses the &lt;code&gt;ResponsiveLayout&lt;/code&gt; layout to render the &lt;code&gt;SimpleForm&lt;/code&gt; control</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="GridLayout">
<xsd:annotation>
<xsd:documentation>Uses the &lt;code&gt;GridLayout&lt;/code&gt; layout to render the &lt;code&gt;SimpleForm&lt;/code&gt; control</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="ResponsiveGridLayout">
<xsd:annotation>
<xsd:documentation>Uses the &lt;code&gt;ResponsiveGridLayout&lt;/code&gt; layout to render the &lt;code&gt;SimpleForm&lt;/code&gt; control</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="ColumnLayout">
<xsd:annotation>
<xsd:documentation>Uses the &lt;code&gt;ColumnLayout&lt;/code&gt; layout to render the &lt;code&gt;SimpleForm&lt;/code&gt; control</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
</xsd:schema>
