<?xml version="1.0" encoding="UTF-8"?><xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" targetNamespace="sap.ui.comp" xmlns:n1="sap.ui.unified" xmlns:n2="sap.m" xmlns:n5="sap.viz" xmlns:n4="sap.ui.table" xmlns:n3="sap.ui.fl" xmlns:n8="sap.suite.ui.microchart" xmlns:n0="sap.ui.core" xmlns:n6="sap.chart" xmlns:n9="sap.ui.comp" xmlns:n7="sap.ui.layout">
<xsd:import namespace="sap.ui.unified"/>
<xsd:import namespace="sap.m"/>
<xsd:import namespace="sap.viz"/>
<xsd:import namespace="sap.ui.table"/>
<xsd:import namespace="sap.ui.fl"/>
<xsd:import namespace="sap.suite.ui.microchart"/>
<xsd:import namespace="sap.ui.core"/>
<xsd:import namespace="sap.chart"/>
<xsd:import namespace="sap.ui.layout"/>
<xsd:element name="FilterBar" type="n9:_FilterBarType" substitutionGroup="n7:Grid">
<xsd:annotation>
<xsd:documentation>The control displays filters in a user-friendly manner to populate values for a query. The FilterBar consists of a row containing the
       {@link sap.ui.comp.variants.VariantManagement VariantManagement} control, the related buttons, and an area underneath displaying the
       filters. The filters are arranged in a logical row that is divided depending on the space available and the width of the filters. The
       area containing the filters can be hidden or shown using the Hide FilterBar / Show FilterBar button. The Go button triggers the search
       event, and the Filters button shows the filter dialog.&lt;br&gt;
       In this dialog, the consumer has full control over the FilterBar. The filters in this dialog are displayed in one column and organized
       in groups. The filter items of the &lt;code&gt;filterItems&lt;/code&gt; aggregation are grouped in the Basic group . Each filter can be marked as
       visible in the FilterBar by selecting Add to FilterBar. In addition, the items in the &lt;code&gt;filterGroupItems&lt;/code&gt; aggregation can be
       marked as part of the current variant. The FilterBar also supports a different UI layout when used inside a value help dialog. In this
       case the FilterBar consists of two logical areas, one containing the general search button and one the Advanced Search area. The
       Advanced Search is a collapsible area displaying the advanced filters in two columns.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="FilterGroupItem" type="n9:_FilterGroupItemType" substitutionGroup="n9:FilterItem">
<xsd:annotation>
<xsd:documentation>Represents a filter belonging to a group other than basic.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="FilterItem" type="n9:_FilterItemType" substitutionGroup="n0:Element">
<xsd:annotation>
<xsd:documentation>Represents a filter belonging to the basic group.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="LinkData" type="n9:_LinkDataType" substitutionGroup="n0:Element">
<xsd:annotation>
<xsd:documentation>Stores display text together with a navigation target hyperlink.&lt;br&gt;
       The LinkData class is used by {@link sap.ui.comp.navpopover.SmartLink SmartLink} and
       {@link sap.ui.comp.navpopover.SemanticObjectController SemanticObjectController} to define the visible links on
       {@link sap.ui.comp.navpopover.NavigationPopover NavigationPopover}.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="NavigationPopover" type="n9:_NavigationPopoverType" substitutionGroup="n2:ResponsivePopover">
<xsd:annotation>
<xsd:documentation>The NavigationPopover control is used to present information in a specific format. &lt;b&gt;Note&lt;/b&gt;: This control is used by the
       {@link sap.ui.comp.navpopover.NavigationPopoverHandler NavigationPopoverHandler} and must not be used manually.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="NavigationPopoverHandler" type="n9:_NavigationPopoverHandlerType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>The NavigationPopoverHandler control determines navigation targets for a semantic object and shows them together with further information in a Popover.&lt;br&gt;
&lt;b&gt;Note:&lt;/b&gt; Navigation targets are determined using {@link sap.ushell.services.CrossApplicationNavigation CrossApplicationNavigation} of the unified shell service.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="SemanticObjectController" type="n9:_SemanticObjectControllerType" substitutionGroup="n0:Element">
<xsd:annotation>
<xsd:documentation>The &lt;code&gt;SemanticObjectController&lt;/code&gt; control operates as a single entry point for &lt;code&gt;SmartLink&lt;/code&gt; controls created automatically
by {@link sap.ui.comp.smarttable.SmartTable SmartTable} control, {@link sap.ui.comp.smartchart.SmartChart SmartChart} control,
{@link sap.ui.comp.smartform.SmartForm SmartForm} control and {@link sap.ui.comp.smartfield.SmartField SmartField} control based on OData metadata.
Additionally, all events provided by the &lt;code&gt;SmartLink&lt;/code&gt; control are registered by the SemanticObjectController and can be consumed there in
a single place. As usual, the SemanticObjectController can be defined within the XML view as well as in the code.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="SmartLink" type="n9:_SmartLinkType" substitutionGroup="n2:Link">
<xsd:annotation>
<xsd:documentation>The SmartLink control uses a semantic object to display {@link sap.ui.comp.navpopover.NavigationPopover NavigationPopover}
for further navigation steps.&lt;br&gt;
&lt;b&gt;Note:&lt;/b&gt; Navigation targets are determined using {@link sap.ushell.services.CrossApplicationNavigation CrossApplicationNavigation} of the unified shell service.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="SmartChart" type="n9:_SmartChartType" substitutionGroup="n2:VBox">
<xsd:annotation>
<xsd:documentation>The SmartChart control creates a chart based on the OData metadata and the provided configuration. To use the control, the &lt;code&gt;entitySet&lt;/code&gt;
       property must be specified. This property is used to fetch the metadata, from which the chart UI will be generated.&lt;br&gt;
       Based on the chartType property, this control will render initially the corresponding chart.&lt;br&gt;
       &lt;b&gt;Note:&lt;/b&gt; Most of the properties are not dynamic and cannot be changed once the control has been initialized.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Configuration" type="n9:_ConfigurationType" substitutionGroup="n0:Element">
<xsd:annotation>
<xsd:documentation>The configuration allows to further define the behavior of a &lt;code&gt;SmartField&lt;/code&gt;.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="ControlProposal" type="n9:_ControlProposalType" substitutionGroup="n0:Element">
<xsd:annotation>
<xsd:documentation>Proposes a control to be rendered. The smart field may ignore the proposal.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="ObjectStatus" type="n9:_ObjectStatusType" substitutionGroup="n0:Element">
<xsd:annotation>
<xsd:documentation>Defines a possible object status control to be rendered. The smart field may ignore the proposal.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="SmartField" type="n9:_SmartFieldType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>The &lt;code&gt;SmartField&lt;/code&gt; control interprets metadata that represents entity relationship models, data types,
service capabilities, and annotations in OData services to automatically generate the underlying inner controls
and reduce the amount of code needed for developing applications.
In some cases, the OData entity is derived from the control's binding context. The OData entity's property that
is changed or displayed with the control is derived from the control's &lt;code&gt;value&lt;/code&gt; property.

&lt;b&gt;Note:&lt;/b&gt; For interoperability and accessibility reasons, the &lt;code&gt;SmartField&lt;/code&gt; control must be labeled
by the &lt;code&gt;sap.ui.comp.smartfield.SmartLabel&lt;/code&gt; control instead of the &lt;code&gt;sap.m.Label&lt;/code&gt; control, as
the &lt;code&gt;sap.m.Label&lt;/code&gt; control does not know of the inner structure of a &lt;code&gt;SmartField&lt;/code&gt; control.
If the &lt;code&gt;SmartField&lt;/code&gt; control is rendered inside a smart container control, for example, the &lt;code&gt;SmartForm&lt;/code&gt;
control, the &lt;code&gt;SmartLabel&lt;/code&gt; control is automatically generated to reduce the amount of code needed on
the application side.
However, in other scenarios when &lt;code&gt;SmartField&lt;/code&gt; is used stand-alone or outside a smart container
control, for example, a &lt;code&gt;SimpleForm&lt;/code&gt; control, the &lt;code&gt;SmartLabel&lt;/code&gt; control is not automatically
generated in these cases.
Although the &lt;code&gt;sap.ui.comp.smartfield.SmartLabel&lt;/code&gt; is a private/internal control, the following basic use
is allowed by applications for labeling the &lt;code&gt;SmartField&lt;/code&gt; control.

&lt;i&gt;XML Example of a &lt;code&gt;SmartField&lt;/code&gt; control labeled by a &lt;code&gt;SmartLabel&lt;/code&gt; control&lt;/i&gt;

&lt;pre&gt;
&amp;lt;sap.ui.comp.smartfield.SmartLabel labelFor=&amp;quot;IDProduct&amp;quot;/&amp;gt;
&amp;lt;sap.ui.comp.smartfield.SmartField id=&amp;quot;IDProduct&amp;quot; value=&amp;quot;{ProductId}&amp;quot;/&amp;gt;
&lt;/pre&gt;

&lt;b&gt;Note&lt;/b&gt;: By default, the &lt;code&gt;com.sap.vocabularies.UI.v1.TextArrangement&lt;/code&gt; annotation and the value of
the &lt;code&gt;displayBehaviour&lt;/code&gt; property of the aggregation named &lt;code&gt;configuration&lt;/code&gt; are not evaluated
in edit mode. To enable these features, set the &lt;code&gt;textInEditModeSource&lt;/code&gt; control property to a non-default
value.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="ControlConfiguration" type="n9:_ControlConfigurationType" substitutionGroup="n0:Element">
<xsd:annotation>
<xsd:documentation>ControlConfiguration can be used to add additional configuration for filter fields in the SmartFilterBar control, in order to overwrite
       the default settings from the OData metadata. For instance, it is possible to change the label, index or control type of a filter field.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="GroupConfiguration" type="n9:_GroupConfigurationType" substitutionGroup="n0:Element">
<xsd:annotation>
<xsd:documentation>A GroupConfiguration can be used to add additional configurations for groups in the SmartFilterBar. A group in the SmartFilterBar is a group of filter fields in the advanced search.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="SelectOption" type="n9:_SelectOptionType" substitutionGroup="n0:Element">
<xsd:annotation>
<xsd:documentation>A Select Option can be used to specify default filter values for a control configuration of the SmartFilterBar.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="SmartFilterBar" type="n9:_SmartFilterBarType" substitutionGroup="n9:FilterBar">
<xsd:annotation>
<xsd:documentation>The SmartFilterBar control uses the OData metadata of an entity in order to create a FilterBar.&lt;br&gt;
       Whether a field is visible on the FilterBar, supports type-ahead and value help, for example, is automatically determined. When you use
       control configurations and group configurations it is possible to configure the FilterBar and adapt it according to your needs.&lt;br&gt;
       &lt;b&gt;&lt;i&gt;Note:&lt;/i&gt;&lt;/b&gt;&lt;br&gt;
       Most of the attributes/properties are not dynamic and cannot be changed once the control has been initialized.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="ColumnLayout" type="n9:_ColumnLayoutType" substitutionGroup="n0:Element">
<xsd:annotation>
<xsd:documentation>If this layout is used in a &lt;code&gt;SmartForm&lt;/code&gt; control, a &lt;code&gt;ColumnLayout&lt;/code&gt; control is used
to render the &lt;code&gt;Form&lt;/code&gt; control.

&lt;b&gt;Note:&lt;/b&gt; If this layout is used, the &lt;code&gt;useHorizontalLayout&lt;/code&gt; property of the &lt;code&gt;SmartForm&lt;/code&gt; control
must not be set.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Group" type="n9:_GroupType" substitutionGroup="n7:FormContainer">
<xsd:annotation>
<xsd:documentation>Groups are used to group group elements.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="GroupElement" type="n9:_GroupElementType" substitutionGroup="n7:FormElement">
<xsd:annotation>
<xsd:documentation>A GroupElement is a combination of one label and different controls associated to this label.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Layout" type="n9:_LayoutType" substitutionGroup="n0:Element">
<xsd:annotation>
<xsd:documentation>Layout settings to adjust the &lt;code&gt;ResponsiveGridLayout&lt;/code&gt; used inside the &lt;code&gt;Form&lt;/code&gt;.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="SmartForm" type="n9:_SmartFormType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>The &lt;code&gt;SmartForm&lt;/code&gt; control renders a form (&lt;code&gt;sap.ui.layout.form.Form&lt;/code&gt;).
       When used with the &lt;code&gt;SmartField&lt;/code&gt; control the label is taken from the
       metadata annotation &lt;code&gt;sap:label&lt;/code&gt; if not specified directly.

&lt;b&gt;Warning:&lt;/b&gt; Do not put any layout or other container controls into the &lt;code&gt;GroupElement&lt;/code&gt;.
Views are also not supported. This could damage the visual layout, keyboard support and screen-reader support.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="SmartList" type="n9:_SmartListType" substitutionGroup="n2:VBox">
<xsd:annotation>
<xsd:documentation>A smart control to simplify using the &lt;code&gt;sap.m.List&lt;/code&gt; and &lt;code&gt;sap.m.Tree&lt;/code&gt; controls in list patterns.
       &lt;h3&gt;Overview&lt;/h3&gt;
       The &lt;code&gt;SmartList&lt;/code&gt; control creates a list or tree based on the configuration specified. There is, however, a difference to
       other smart controls: This control does not use annotations to automatically create its content. Hence, a template must always be
       provided for this control.
       &lt;h3&gt;Structure&lt;/h3&gt;
       The &lt;code&gt;SmartList&lt;/code&gt; control consists of the following elements:
       &lt;ul&gt;
       &lt;li&gt; &lt;code&gt;OverflowToolbar&lt;/code&gt; control: Displays the header and other action buttons. Users can add their own toolbar and buttons
       in the view.&lt;/li&gt;
       &lt;li&gt; &lt;code&gt;List&lt;/code&gt; or &lt;code&gt;Tree&lt;/code&gt; control: The actual list/tree control. Users can also add this in the view with the
       required configuration.&lt;/li&gt;
       &lt;/ul&gt;
       The &lt;code&gt;entitySet&lt;/code&gt; property must be specified to use the control. This attribute is used to fetch the actual data.&lt;br&gt;
       The &lt;code&gt;listItemTemplate&lt;/code&gt; aggregation must also be specified with the required item template, such as
       &lt;code&gt;StandardListItem/StandardTreeItem&lt;/code&gt;, which will be used during binding.
       &lt;h3&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;/h3&gt;
       Most of the attributes/properties are not dynamic and cannot be changed once the control has been initialized.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="SmartAreaMicroChart" type="n9:_SmartAreaMicroChartType" substitutionGroup="n9:SmartMicroChartBase">
<xsd:annotation>
<xsd:documentation>The SmartAreaMicroChart control creates a AreaMicroChart based on OData metadata and the configuration
       specified. The entitySet attribute must be specified to use the control. This attribute is used to fetch
       fields from OData metadata, from which Micro Area Chart UI will be generated; it can also be used to fetch
       the actual chart data.&lt;br&gt;
       &lt;b&gt;&lt;i&gt;Note:&lt;/i&gt;&lt;/b&gt;&lt;br&gt;
       Most of the attributes/properties are not dynamic and cannot be changed once the control has been
       initialised.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="SmartBulletMicroChart" type="n9:_SmartBulletMicroChartType" substitutionGroup="n9:SmartMicroChartBase">
<xsd:annotation>
<xsd:documentation>The SmartBulletMicroChart control creates a &lt;code&gt;sap.suite.ui.microchart.BulletMicroChart&lt;/code&gt;
based on OData metadata and the configuration specified by &lt;code&gt;mSettings&lt;/code&gt;.
The entitySet attribute must be specified to use the control. This attribute is used to fetch metadata and
annotation information from the given default OData model. Based on this, the BulletMicroChart UI
is created.
&lt;br&gt;
&lt;b&gt;&lt;i&gt;Note:&lt;/i&gt;&lt;/b&gt;&lt;br&gt;
Most of the attributes/properties are not dynamic and cannot be changed once the control has been
initialized.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="SmartColumnMicroChart" type="n9:_SmartColumnMicroChartType" substitutionGroup="n9:SmartMicroChartBase">
<xsd:annotation>
<xsd:documentation>The SmartColumnMicroChart control creates a {@link sap.suite.ui.microchart.ColumnMicroChart ColumnMicroChart} based on OData metadata and the configuration
       specified. &lt;br&gt;The &lt;code&gt;entitySet&lt;/code&gt; property is required. The entity set you specify in this property is used
       to fetch OData metadata and to generate the micro chart's UI. This property can also be used to fetch actual chart data.&lt;br&gt;
       &lt;b&gt;&lt;i&gt;Note:&lt;/i&gt;&lt;/b&gt;&lt;br&gt;
       Most properties are not dynamic and cannot be changed, once the control has been
       initialized.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="SmartComparisonMicroChart" type="n9:_SmartComparisonMicroChartType" substitutionGroup="n9:SmartMicroChartBase">
<xsd:annotation>
<xsd:documentation>The SmartComparisonMicroChart control creates a ComparisonMicroChart based on OData metadata and the configuration
       specified. The &lt;code&gt;entitySet&lt;/code&gt; property is required to use the control.
       The entity set you specify in this property is used to feetch OData metadata and to generate the micro chart's UI.
       This property can also be used to fetch actual data.&lt;br&gt;
       &lt;b&gt;&lt;i&gt;Notes:&lt;/i&gt;&lt;/b&gt;&lt;br&gt;
       &lt;ol&gt;&lt;li&gt;Most properties are not dynamic and cannot be changed, once the control has been
       initialized.&lt;/li&gt;&lt;li&gt;
       SmartComparisonMicroChart does not have its own ChartType/Enum annotation.
       This means that ChartType annotation is not specified and SmartComparisonMicroChart cannot be created with a &lt;code&gt;SmartMicroChart&lt;/code&gt;.&lt;/li&gt;&lt;/ol&gt;</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="SmartDeltaMicroChart" type="n9:_SmartDeltaMicroChartType" substitutionGroup="n9:SmartMicroChartBase">
<xsd:annotation>
<xsd:documentation>The SmartDeltaMicroChart control creates a {@link sap.suite.ui.microchart.DeltaMicroChart DeltaMicroChart} based on OData metadata and the configuration
       specified. The delta micro chart represents the delta of two values as a chart.&lt;br&gt;
       The &lt;code&gt;entitySet&lt;/code&gt; property is required to use the control.
       The entity set you specify in this property is used to fetch OData metadata and to generate the micro chart's UI.
       This property can also be used to fetch actual data.&lt;br&gt;
       &lt;b&gt;&lt;i&gt;Notes:&lt;/i&gt;&lt;/b&gt;&lt;br&gt;
       &lt;ul&gt;&lt;li&gt;Most properties are not dynamic and cannot be changed once the control has been
       initialized.&lt;/li&gt;&lt;li&gt;
       SmartDeltaMicroChart does not have its own ChartType/Enum annotation.
       This means that ChartType annotation is not specified and SmartDeltaMicroChart cannot be created with a &lt;code&gt;SmartMicroChart&lt;/code&gt;.&lt;/li&gt;&lt;/ul&gt;</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="SmartHarveyBallMicroChart" type="n9:_SmartHarveyBallMicroChartType" substitutionGroup="n9:SmartMicroChartBase">
<xsd:annotation>
<xsd:documentation>The SmartHarveyBallMicroChart control creates a {@link sap.suite.ui.microchart.HarveyBallMicroChart}
based on OData metadata and the configuration specified in the &lt;code&gt;mSettings&lt;/code&gt; of the {@link sap.ui.base.ManagedObject}.
&lt;br&gt;The &lt;code&gt;entitySet&lt;/code&gt; property is required. The entity set is used to fetch OData metadata and
annotation information from the provided default OData model. The chart's UI is created based on this data.
&lt;br&gt;
&lt;b&gt;&lt;i&gt;Note:&lt;/i&gt;&lt;/b&gt;&lt;br&gt;
Most of the properties are not dynamic and cannot be changed once the control has been
initialized.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="SmartLineMicroChart" type="n9:_SmartLineMicroChartType" substitutionGroup="n9:SmartMicroChartBase">
<xsd:annotation>
<xsd:documentation>The SmartLineMicroChart control creates a {@link sap.suite.ui.microchart.LineMicroChart LineMicroChart} based on OData metadata and the configuration
       specified. &lt;br&gt;The &lt;code&gt;entitySet&lt;/code&gt; property is required. The entity set you specify in this property is used
       to fetch OData metadata and to generate the micro chart's UI. This property can also be used to fetch actual chart data.&lt;br&gt;
       &lt;b&gt;&lt;i&gt;Note:&lt;/i&gt;&lt;/b&gt;&lt;br&gt;
       Most properties are not dynamic and cannot be changed, once the control has been
       initialized.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="SmartMicroChart" type="n9:_SmartMicroChartType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>The SmartMicroChart control creates a chart based on OData metadata and the configuration specified by &lt;code&gt;mSettings&lt;/code&gt;.
&lt;br&gt;The &lt;code&gt;entitySet&lt;/code&gt; property is required. This property is used to fetch metadata and
annotation information from the specified default OData model. Depending on the UI/ChartType annotation, the control
creates a corresponding {@link sap.ui.comp.smartmicrochart.SmartAreaMicroChart SmartAreaMicroChart}, {@link sap.ui.comp.smartmicrochart.SmartBulletMicroChart SmartBulletMicroChart},
{@link sap.ui.comp.smartmicrochart.SmartStackedBarMicroChart SmartStackedBarMicroChart}, {@link sap.ui.comp.smartmicrochart.SmartLineMicroChart SmartLineMicroChart}, or
{@link sap.ui.comp.smartmicrochart.SmartRadialMicroChart SmartRadialMicroChart} instance and delegates it to the internal control.
       &lt;br&gt;
&lt;b&gt;&lt;i&gt;Note:&lt;/i&gt;&lt;/b&gt; Most of the attributes are not dynamic and cannot be changed once the control has been initialized.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="SmartMicroChartBase" type="n9:_SmartMicroChartBaseType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>This is an abstract base class for Smart Micro Charts.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="SmartRadialMicroChart" type="n9:_SmartRadialMicroChartType" substitutionGroup="n9:SmartMicroChartBase">
<xsd:annotation>
<xsd:documentation>The SmartRadialMicroChart control creates a &lt;code&gt;sap.suite.ui.microchart.RadialMicroChart&lt;/code&gt;
based on OData metadata and the configuration specified by &lt;code&gt;mSettings&lt;/code&gt;.
The entitySet attribute must be specified to use the control. This attribute is used to fetch metadata and
annotation information from the given default OData model. Based on this, the RadialMicroChart UI
is created.
&lt;br&gt;
&lt;b&gt;&lt;i&gt;Note:&lt;/i&gt;&lt;/b&gt;&lt;br&gt;
Most of the attributes/properties are not dynamic and cannot be changed once the control has been
initialized.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="SmartStackedBarMicroChart" type="n9:_SmartStackedBarMicroChartType" substitutionGroup="n9:SmartMicroChartBase">
<xsd:annotation>
<xsd:documentation>The SmartStackedBarMicroChart control creates a StackedBarMicroChart based on OData metadata and the configuration
       specified. The &lt;code&gt;entitySet&lt;/code&gt; property is required. The entity set you specify in this property is used
       to fetch OData metadata and to generate the micro chart's UI. This property can also be used to fetch actual chart data.&lt;br&gt;
       &lt;b&gt;&lt;i&gt;Note:&lt;/i&gt;&lt;/b&gt;&lt;br&gt;
       Most properties are not dynamic and cannot be changed, once the control has been
       initialised.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Container" type="n9:_ContainerType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>The SmartMultiEdit.Container control provides a layout for the smart multi edit fields
({@link sap.ui.comp.smartmultiedit.Field}) it includes and enables them to access the updated binding contexts.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="SmartTable" type="n9:_SmartTableType" substitutionGroup="n2:VBox">
<xsd:annotation>
<xsd:documentation>The SmartTable control creates a table based on OData metadata and the configuration specified. The entitySet attribute must be
       specified to use the control. This attribute is used to fetch fields from OData metadata, from which columns will be generated; it can
       also be used to fetch the actual table data.&lt;br&gt;
       Based on the tableType property, this control will render a standard, analytical, tree, or responsive table.&lt;br&gt;
       &lt;b&gt;&lt;i&gt;Note:&lt;/i&gt;&lt;/b&gt;&lt;br&gt;
       Most of the attributes/properties are not dynamic and cannot be changed once the control has been initialized.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="PersonalizableInfo" type="n9:_PersonalizableInfoType" substitutionGroup="n0:Element">
<xsd:annotation>
<xsd:documentation>The PersonalizableInfo class describes the personalizable control associated with the &lt;code&gt;SmartVariantManagement&lt;/code&gt; control.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="SmartVariantManagement" type="n9:_SmartVariantManagementType" substitutionGroup="n9:VariantManagement">
<xsd:annotation>
<xsd:documentation>&lt;h3&gt;Overview&lt;/h3&gt;
       The &lt;code&gt;SmartVariantManagement&lt;/code&gt; control is a specialization of the
       {@link sap.ui.comp.variants.VariantManagement VariantManagement} control and communicates with the flexibility library that offers
       SAPUI5 flexibility to manage the variants.&lt;br&gt;
       &lt;h3&gt;Usage&lt;/h3&gt;
       You can use this control in combination with the following controls:
       &lt;ul&gt;
       &lt;li&gt;&lt;code&gt;SmartFilterBar&lt;/code&gt;&lt;/li&gt;
       &lt;li&gt;&lt;code&gt;SmartChart&lt;/code&gt;&lt;/li&gt;
       &lt;li&gt;&lt;code&gt;SmartTable&lt;/code&gt;&lt;/li&gt;
       &lt;/ul&gt;</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="SmartVariantManagementAdapter" type="n9:_SmartVariantManagementAdapterType" substitutionGroup="n0:Element">
<xsd:annotation>
<xsd:documentation>Handles the odata metadata based information. An instance of this class will be created and used by the
       {@link sap.ui.comp.smartvariants.SmartVariantManagement SmartVariantManagement} control. The adapter transforms odata metadata based
       SelectionPresentationVariant information to UIState object. For each SelectionPresentationVariant annotation an entry will be added to
       the VariantManagement control. It will be called by the SmartVariantManagement whenever the user selects the corresponding entry and
       will provide a valid {@link sap.ui.comp.state.UIState UIState} object.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="SmartVariantManagementUi2" type="n9:_SmartVariantManagementUi2Type" substitutionGroup="n9:VariantManagement">
<xsd:annotation>
<xsd:documentation>The SmartVariantManagementUi2 control is a specialization of the {@link sap.ui.comp.variants.VariantManagement VariantManagement}
       control and communicates with the Ui2 personalization layer to manage the variants.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="UIState" type="n9:_UIStateType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>Creates a new instance of an UIState class.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="ValueHelpDialog" type="n9:_ValueHelpDialogType" substitutionGroup="n2:Dialog">
<xsd:annotation>
<xsd:documentation>The ValueHelpDialog control can be used to implement a value help for an input field.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="EditableVariantItem" type="n9:_EditableVariantItemType" substitutionGroup="n2:ColumnListItem">
<xsd:annotation>
<xsd:documentation>The EditableVariantItem class describes an editable variant list item for the Manage Variants popup.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="VariantItem" type="n9:_VariantItemType" substitutionGroup="n0:Item">
<xsd:annotation>
<xsd:documentation>The VariantItem class describes a variant item.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="VariantManagement" type="n9:_VariantManagementType" substitutionGroup="n0:Control">
<xsd:annotation>
<xsd:documentation>The VariantManagement control can be used to manage variants, such as filter bar variants or table variants.</xsd:documentation>
</xsd:annotation>
</xsd:element>
<!--type definition for UIElement 'sap.ui.comp.filterbar.FilterBar'-->
<xsd:complexType name="_FilterBarType">
<xsd:complexContent>
<xsd:extension base="n7:_GridType">
<xsd:sequence>
<xsd:element name="filterItems" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Filters belonging to the basic group.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n9:FilterItem"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="filterGroupItems" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Contains all FilterBar filters. &lt;br&gt;
&lt;code&gt;Note:&lt;/code&gt;In case a filter has to be added to the basic group
&lt;ul&gt;
&lt;li&gt;the property &lt;code&gt;groupName&lt;/code&gt; has to be set to the constant
&lt;code&gt;sap.ui.comp.filterbar.FilterBar.INTERNAL_GROUP&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;the property &lt;code&gt;groupLabel&lt;/code&gt; will be handled internally and will be ignored, if set&lt;/li&gt;
&lt;li&gt;the property &lt;code&gt;partOfCurrentVariant&lt;/code&gt; has to be set to &lt;code&gt;true&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;if the property &lt;code&gt;visibleInFilterBar&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;, the property
&lt;code&gt;partOfCurrentVariant&lt;/code&gt; will be set internally also to &lt;code&gt;true&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n9:FilterGroupItem"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="persistencyKey" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Key used to access personalization data. Only if the persistencyKey is provided, will the &lt;code&gt;VariantManagement&lt;/code&gt; control
be used.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="advancedMode" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>The advanced mode is only relevant for the value help scenario. UI representation is different from the standard FilterBar.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="expandAdvancedArea" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Collapses/expands the advanced area.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="searchEnabled" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Enables/disables the Search button.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="filterBarExpanded" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Shows the filters area. When property &lt;code&gt;useToolbar&lt;/code&gt; is set to &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;filterBarExpanded&lt;/code&gt;
is set to &lt;code&gt;true&lt;/code&gt; automatically.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="considerGroupTitle" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If this property is set, then the label for filters will be prefixed with the group title.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showClearButton" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Handles visibility of the Clear button on the Filters dialog.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showRestoreButton" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Handles visibility of the "Restore" button on the "Filters" dialog. &lt;b&gt;Note:&lt;/b&gt; Restore works only automatically when a property
&lt;code&gt;persistencyKey&lt;/code&gt; is set and therefore Variant Management is used. In all other cases the "restore" behavior needs to
be implemented by the app, based on the event &lt;code&gt;reset&lt;/code&gt;.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showGoOnFB" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Handles visibility of the Go button on the FilterBar.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showRestoreOnFB" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Handles visibility of the Restore button on the FilterBar.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showClearOnFB" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Handles visibility of the Clear button on the FilterBar.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showGoButton" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Handles visibility of the Go button on the FilterBar.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="deltaVariantMode" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Stores the delta as compared to the standard variant.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="filterContainerWidth" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Sets the width of the filters container.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="useToolbar" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Determines what design should be used. Default is the design with toolbar. The design with toolbar is always used on phones. When
property &lt;code&gt;useToolbar&lt;/code&gt; is set to &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;filterBarExpanded&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;
automatically.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="header" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Specifies header text that is shown in the toolbar on the first position. This property is ignored, when &lt;code&gt;useToolbar&lt;/code&gt;
is set to &lt;code&gt;false&lt;/code&gt;.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showFilterConfiguration" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Handles visibility of the Filters button on the FilterBar.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="useSnapshot" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Determines the behavior when &lt;code&gt;reset&lt;/code&gt; is executed. &lt;br&gt;
&lt;b&gt;Note:&lt;/b&gt; This property is only relevant if no variant management is used, and the filter bar is not used in the advanced mode.
A snapshot shows the current state of the filter bar, just before the Filters dialog is opened.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;undefined&lt;/code&gt; (default) defines the standard behavior: snapshot will be applied after &lt;code&gt;reset&lt;/code&gt; was
triggered&lt;/li&gt;
&lt;li&gt;&lt;code&gt;false&lt;/code&gt; defines that the snapshot will not be applied&lt;/li&gt;
&lt;li&gt;&lt;code&gt;true&lt;/code&gt;is not considered at all&lt;/li&gt;
&lt;/ul&gt;</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="basicSearch" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Populates the basic search area on the FilterBar and the Filters dialog.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="cancel" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired when the Cancel button on the Filters dialog is pressed and the variant is marked as dirty.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="reset" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired when the Restore button is pressed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="search" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired when the Go button is pressed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="beforeVariantSave" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired before a variant is saved. The event can be used to adapt the data of the custom filters, which will be saved
as variant later.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="beforeVariantFetch" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired before a variant is fetched.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="afterVariantLoad" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired after a variant has been loaded and applied to the FilterBar. The event can be used to adapt custom filters
with data from the variant.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="filterChange" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired when a filter or multiple filters has changed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="clear" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired when the Clear button is pressed. The consumer has to clear all filters.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="initialise" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired when the FilterBar is initialized to indicate that metadata are available.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="initialized" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired after the &lt;code&gt;FilterBar&lt;/code&gt; has been initialized, the user's default variant has been applied, and a
stable filter state has been achieved. With this event all relevant filter information, for example, for navigation-related
actions, is available via {@link sap.ui.comp.filterbar.FilterBar#getUiState}.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="afterVariantSave" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired after a variant has been saved.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="filtersDialogClosed" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired after the filters dialog is closed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="filtersDialogBeforeOpen" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired after the filters dialog is opened.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="filtersDialogCancel" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired when the Cancel button on the filters dialog is pressed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="filtersDialogSearch" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired when the Go button on the filters dialog is pressed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="filtersDialogSearchForFilters" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired when search field of the filter dialog is changed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="assignedFiltersChanged" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired when the filters information has changed. It indicates specifically that the count of assigned filters may be
changed. One of the intended reaction to this event would be to call &lt;code&gt;retrieveFiltersWithValuesAsText&lt;/code&gt; method.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.comp.filterbar.FilterGroupItem'-->
<xsd:complexType name="_FilterGroupItemType">
<xsd:complexContent>
<xsd:extension base="n9:_FilterItemType">
<xsd:attribute name="groupTitle" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Title of the group.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="groupName" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Name of the group.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="visibleInAdvancedArea" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to true, this filter is visible on the filter bar by default. Mapped against the &lt;code&gt;visibleInFilterBar&lt;/code&gt; property.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.comp.filterbar.FilterItem'-->
<xsd:complexType name="_FilterItemType">
<xsd:complexContent>
<xsd:extension base="n0:_ElementType">
<xsd:sequence>
<xsd:element name="control" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The control of the filter.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n0:Control"/>
<xsd:element ref="n0:Fragment"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="label" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Label of the filter.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="name" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Name of the filter. This is an identifier for the filter and has to be unique.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="mandatory" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Mandatory flag.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="visible" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Visibility state of the filter.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="labelTooltip" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Tooltip for the filter.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="controlTooltip" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Tooltip for the filter'c control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="partOfCurrentVariant" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Determines if a filter is part of the currently selected variant. &lt;br&gt;
&lt;b&gt;Note:&lt;/b&gt; This property can also be changed using the &lt;code&gt;visibleInFilterBar&lt;/code&gt; property and by user interaction in the
Select Filters dialog or the variant handling.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="visibleInFilterBar" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Controls the visibility of a filter item in the filter bar.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="hiddenFilter" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>A hidden filter will never be visible in the filter bar control</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="entitySetName" type="xsd:string">
<xsd:annotation>
<xsd:documentation>EntitySet name to which the filter belongs</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="entityTypeName" type="xsd:string">
<xsd:annotation>
<xsd:documentation>EntityType name to which the filter belongs</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="change" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired when one of the properties is changed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.comp.navpopover.LinkData'-->
<xsd:complexType name="_LinkDataType">
<xsd:complexContent>
<xsd:extension base="n0:_ElementType">
<xsd:attribute name="text" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Text which can be displayed on the UI</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="href" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Destination link for a navigation operation in internal format. &lt;b&gt;Note&lt;/b&gt;: The link will be encoded before it is shown in
external format using the &lt;code&gt;hrefForExternal&lt;/code&gt; method of the CrossApplicationNavigation service.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="target" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The standard values for the &lt;code&gt;target&lt;/code&gt; property are: _self, _top, _blank, _parent, _search. Alternatively, a frame name
can be entered. This property is only used if the &lt;code&gt;href&lt;/code&gt; property is set.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="description" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Description of the link.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="visible" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Describes whether the link should be visible on the screen.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="key" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Key of link.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="press" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Callback for &lt;code&gt;press&lt;/code&gt; event.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="isSuperiorAction" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Marker for superior action.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="visibleChangedByUser" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Describes whether the visibility is changed by end user or not.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.comp.navpopover.NavigationPopover'-->
<xsd:complexType name="_NavigationPopoverType">
<xsd:complexContent>
<xsd:extension base="n2:_ResponsivePopoverType">
<xsd:sequence>
<xsd:element name="availableActions" minOccurs="0">
<xsd:annotation>
<xsd:documentation>A list of available actions shown as links.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n9:LinkData"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="mainNavigation" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The main navigation link. If &lt;code&gt;mainNavigationId&lt;/code&gt; is not set then &lt;code&gt;text&lt;/code&gt; of &lt;code&gt;mainNavigation&lt;/code&gt;
is displayed. Otherwise the &lt;code&gt;mainNavigationId&lt;/code&gt; is displayed.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n9:LinkData"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="ownNavigation" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The navigation taking the user back to the source application.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n9:LinkData"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="semanticObjectName" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The name of the semantic object.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="semanticAttributes" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Describes the semantic attributes. The attribute has to be a map.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="appStateKey" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The application state key passed to retrieve the navigation targets.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="mainNavigationId" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Sets the description of the main navigation link. If &lt;code&gt;mainNavigation&lt;/code&gt; also contains an href description, then
&lt;code&gt;mainNavigationId&lt;/code&gt; is displayed. If &lt;code&gt;mainNavigationId&lt;/code&gt; is set to an empty string &lt;code&gt;''&lt;/code&gt;,
neither description nor subtitle are displayed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="availableActionsPersonalizationText" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Determines the text of personalization link. If this property is set to some string, choosing the personalization link will trigger
the &lt;code&gt;availableActionsPersonalizationPress&lt;/code&gt; event. If this property is not set, the personalization link is not shown.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="source" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Source control for which the popover is displayed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="extraContent" type="xsd:string">
<xsd:annotation>
<xsd:documentation>In addition to main navigation link and available links some additional content can be displayed in the popover.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="component" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The parent component.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="targetsObtained" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The navigation targets that are shown.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="navigate" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired when a link is chosen.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="availableActionsPersonalizationPress" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired when personalization of &lt;code&gt;availableActions&lt;/code&gt; is chosen.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.comp.navpopover.NavigationPopoverHandler'-->
<xsd:complexType name="_NavigationPopoverHandlerType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:attribute name="semanticObject" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Name of semantic object which is used to determine target navigations.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="additionalSemanticObjects" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Names of additional semantic objects which are used to determine target navigations.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="semanticObjectController" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The semantic object controller controls events for several NavigationPopoverHandler controls. If the controller is not set
manually, it tries to find a SemanticObjectController in its parent hierarchy.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="fieldName" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The metadata field name for this NavigationPopoverHandler control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="semanticObjectLabel" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Shown title of semantic object.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="mapFieldToSemanticObject" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to &lt;code&gt;false&lt;/code&gt;, the NavigationPopoverHandler control will not replace its field name with the according
&lt;code&gt;semanticObject&lt;/code&gt; property during the calculation of the semantic attributes. This enables the usage of several
NavigationPopoverHandler on the same semantic object. *</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="contactAnnotationPath" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Navigation property that points from the current to the related entity type where the com.sap.vocabularies.Communication.v1.Contact
annotation is defined, for example, &lt;code&gt;'to_Supplier'&lt;/code&gt;. An empty string means that the related entity type is the
current one.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="enableAvailableActionsPersonalization" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Determines whether the personalization link is shown inside the NavigationPopover control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="control" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The parent control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="beforePopoverOpens" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is fired before the navigation popover opens and before navigation target links are getting retrieved. Event can be used to
change the parameters used to retrieve the navigation targets. In case of NavigationPopoverHandler, the
&lt;code&gt;beforePopoverOpens&lt;/code&gt; is fired after the link has been clicked.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="navigationTargetsObtained" type="xsd:string">
<xsd:annotation>
<xsd:documentation>After the navigation targets are retrieved, &lt;code&gt;navigationTargetsObtained&lt;/code&gt; is fired and provides the possibility to
change the targets.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="innerNavigate" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired after a navigation link on the navigation popover has been clicked. This event is only fired, if the user
left-clicks the link. Right-clicking the link and selecting 'Open in New Window' etc. in the context menu does not fire the event.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.comp.navpopover.SemanticObjectController'-->
<xsd:complexType name="_SemanticObjectControllerType">
<xsd:complexContent>
<xsd:extension base="n0:_ElementType">
<xsd:attribute name="ignoredFields" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Comma-separated list of fields that must not be displayed as links.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="prefetchNavigationTargets" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to &lt;code&gt;true&lt;/code&gt;, the SemanticObjectController will retrieve all navigation targets once and will disable links for
which no targets were found. Setting this value to &lt;code&gt;true&lt;/code&gt; will trigger an additional roundtrip.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="fieldSemanticObjectMap" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Maps the fields to the related semantic objects. When accessing this property for the first time, the mapping will be
calculated from the metadata within the provided model.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="entitySet" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The name of the entity set used. If &lt;code&gt;entitySet&lt;/code&gt; has not been defined, the SemanticObjectController tries to retrieve
the name from its parents. &lt;b&gt;Note:&lt;/b&gt; This is not a dynamic UI5 property.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="contactAnnotationPaths" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Navigation property that points from the current to the related entity type where the
&lt;code&gt;com.sap.vocabularies.Communication.v1.Contact&lt;/code&gt; annotation is defined, for example,
&lt;code&gt; '\{"Supplier":"to_Supplier", "CompanyName":"to_Company"\}' &lt;/code&gt;. An empty string means that the related entity type is
the current one.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="enableAvailableActionsPersonalization" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Determines whether the personalization link is shown inside the NavigationPopover control. For example,
&lt;code&gt; '\{"Supplier":false, "CompanyName":true\}' &lt;/code&gt;.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="mapFieldToSemanticObject" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to &lt;code&gt;false&lt;/code&gt;, the SmartLink control will not replace its field name with the according
&lt;code&gt;semanticObject&lt;/code&gt; property during the calculation of the semantic attributes.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="forceLinkRendering" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Object containing fields for which the corresponding &lt;code&gt;SmartLink&lt;/code&gt; control is rendered as a link even if &lt;code&gt;contactAnnotationPaths&lt;/code&gt;
is not set and navigation targets do not exist. Setting this property to &lt;code&gt;true&lt;/code&gt; allows the application, for example, to modify the
&lt;code&gt;SmartLink&lt;/code&gt; control in the event handler, after the user has clicked on a link and the registered event handler has been called.\n

&lt;b&gt;Note:&lt;/b&gt; The &lt;code&gt;ignoredFields&lt;/code&gt; property and the &lt;code&gt;ignoreLinkRendering&lt;/code&gt; property of the &lt;code&gt;SmartLink&lt;/code&gt; control take precedence
over &lt;code&gt;forceLinkRendering&lt;/code&gt;.\n

Example of usage: &lt;code&gt; '\{"Supplier":"true", "CompanyName":"true"\}' &lt;/code&gt;</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="navigationTargetsObtained" type="xsd:string">
<xsd:annotation>
<xsd:documentation>After the navigation targets have been retrieved, &lt;code&gt;navigationTargetsObtained&lt;/code&gt; is fired and makes it possible you to
change the targets.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="beforePopoverOpens" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is fired before the navigation popover opens and before navigation target links are retrieved. Event can be used to change
the parameters used to retrieve the navigation targets. In case of SmartLink, &lt;code&gt;beforePopoverOpens&lt;/code&gt; is fired after the
link has been clicked.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="navigate" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired after a navigation link on the navigation popover has been clicked. This event is only fired, if the user
left-clicks the link. Right-clicking the link and selecting 'Open in New Window' etc. in the context menu does not fire the event.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="prefetchDone" type="xsd:string">
<xsd:annotation>
<xsd:documentation>If the property &lt;code&gt;prefetchNavigationTargets&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;, event &lt;code&gt;prefetchDone&lt;/code&gt; is fired
after all navigation targets have been retrieved.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.comp.navpopover.SmartLink'-->
<xsd:complexType name="_SmartLinkType">
<xsd:complexContent>
<xsd:extension base="n2:_LinkType">
<xsd:sequence>
<xsd:element name="innerControl" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Control that is displayed instead of SmartLink control, if the SmartLink is disabled (for example, if no navigation targets are
available). If &lt;code&gt;innerControl&lt;/code&gt; is not provided, the SmartLink control tries to create one with property
&lt;code&gt;createControlCallback&lt;/code&gt;.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n0:Control"/>
<xsd:element ref="n0:Fragment"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="semanticObject" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Name of semantic object which is used to fill the navigation popover. &lt;b&gt;Note&lt;/b&gt;: Setting a value triggers an asynchronous
determination, so the effect can be delayed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="additionalSemanticObjects" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Semantic object names which can be used additional to the default &lt;code&gt;semanticObject&lt;/code&gt; property in order to get navigation
targets links.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="semanticObjectController" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The semantic object controller controls events for several SmartLink controls. If the controller is not set manually, it tries to
find a SemanticObjectController in its parent hierarchy.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="fieldName" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The metadata field name for this SmartLink control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="semanticObjectLabel" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Shown label of semantic object.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="createControlCallback" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Function that enables the SmartLink control to create an alternative control, which is displayed if no navigation targets are
available. The function has no parameters and has to return an instance of sap.ui.core.Control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="mapFieldToSemanticObject" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to &lt;code&gt;false&lt;/code&gt;, the SmartLink control will not replace its field name with the according
&lt;code&gt;semanticObject&lt;/code&gt; property during the calculation of the semantic attributes. This enables the usage of several
SmartLink controls on the same semantic object.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="contactAnnotationPath" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Navigation property that points from the current to the related entity type where the com.sap.vocabularies.Communication.v1.Contact
annotation is defined, for example, &lt;code&gt;'to_Supplier'&lt;/code&gt;. An empty string means that the related entity type is the
current one.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ignoreLinkRendering" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to &lt;code&gt;true&lt;/code&gt;, the SmartLink control will render the &lt;code&gt;innerControl&lt;/code&gt; or the control provided by
&lt;code&gt;createControlCallback&lt;/code&gt; instead of the actual link. This is used for example by the SemanticObjectController if this
SmartLink is listed in its &lt;code&gt;ignoredFields&lt;/code&gt; or no navigation targets were found during prefetch.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="enableAvailableActionsPersonalization" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Determines whether the personalization link is shown inside the NavigationPopover control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="forceLinkRendering" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to true, the &lt;code&gt;SmartLink&lt;/code&gt; control is rendered as a link even if &lt;code&gt;contactAnnotationPath&lt;/code&gt; is not set  and navigation targets do not exist.
Setting this property to &lt;code&gt;true&lt;/code&gt; allows the application, for example, to modify the &lt;code&gt;SmartLink&lt;/code&gt; control in the event handler, after the user
has clicked on a link and the registered event handler has been called.

&lt;b&gt;Note:&lt;/b&gt; The &lt;code&gt;ignoreLinkRendering&lt;/code&gt; property and the &lt;code&gt;ignoredFields&lt;/code&gt; property of the associated &lt;code&gt;SemanticObjectController&lt;/code&gt;
take precedence over &lt;code&gt;forceLinkRendering&lt;/code&gt;.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="uom" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Additionally to the &lt;code&gt;text&lt;/code&gt; property the Unit of Measure can be displayed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="beforePopoverOpens" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event is fired before the navigation popover opens and before navigation target links are getting retrieved. Event can be used to
change the parameters used to retrieve the navigation targets. In case of SmartLink control, the &lt;code&gt;beforePopoverOpens&lt;/code&gt;
is fired after the link has been clicked.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="navigationTargetsObtained" type="xsd:string">
<xsd:annotation>
<xsd:documentation>After the navigation targets are retrieved, &lt;code&gt;navigationTargetsObtained&lt;/code&gt; is fired and provides the possibility to
change the targets.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="innerNavigate" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired after a navigation link on the navigation popover has been clicked. This event is only fired, if the user
left-clicks the link. Right-clicking the link and selecting 'Open in New Window' etc. in the context menu does not fire the event.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.comp.smartchart.SmartChart'-->
<xsd:complexType name="_SmartChartType">
<xsd:complexContent>
<xsd:extension base="n2:_VBoxType">
<xsd:sequence>
<xsd:element name="toolbar" minOccurs="0">
<xsd:annotation>
<xsd:documentation>A custom toolbar that can be specified by the user to define their own buttons, icons, etc. If this is added, the SmartChart
control does not create its own toolbar, but uses this one instead. However, if default actions, such as showSemanticNavigation,
showFullScreenButton etc. are set, these actions are added at the left-hand side of the toolbar.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n2:Toolbar"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="semanticObjectController" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The Semantic Object Controller allows the user to specify and overwrite functionality for semantic object navigation.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n9:SemanticObjectController"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="selectionDetailsItemActions" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Actions on item level which can be specified for the selection details popover.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Item"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="selectionDetailsActions" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Actions on footer level which can be specified for the selection details popover.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Item"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="selectionDetailsActionGroups" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Actions on group level which can be specified for the selection details popover.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Item"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="entitySet" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The entity set name from which to fetch data and generate the columns.&lt;br&gt;
&lt;b&gt;Note&lt;/b&gt; This is not a dynamic property.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="smartFilterId" type="xsd:string">
<xsd:annotation>
<xsd:documentation>ID of the corresponding SmartFilter control. If specified, the SmartChart control searches for the SmartFilter control (also in the
closest parent view) and attaches to the relevant events of the SmartFilter control to fetch data, show overlay etc.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ignoredFields" type="xsd:string">
<xsd:annotation>
<xsd:documentation>CSV of fields that must be ignored in the OData metadata by the SmartChart control.&lt;br&gt;
&lt;b&gt;Note:&lt;/b&gt; No validation is done. Please ensure that you do not add spaces or special characters.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="requestAtLeastFields" type="xsd:string">
<xsd:annotation>
<xsd:documentation>CSV of fields that must be always requested by the backend system.&lt;br&gt;
This property is mainly meant to be used if there is no PresentationVariant annotation.&lt;br&gt;
If both this property and the PresentationVariant annotation exist, the select request sent to the backend would be a combination
of both.&lt;br&gt;
&lt;b&gt;Note:&lt;/b&gt; No validation is done. Please ensure that you do not add spaces or special characters. Also, setting this property
during runtime, will delete the current drill-stack and lead to a loss of the drill history.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ignoreFromPersonalisation" type="xsd:string">
<xsd:annotation>
<xsd:documentation>CSV of fields that is not shown in the personalization dialog.&lt;br&gt;
&lt;b&gt;Note:&lt;/b&gt; No validation is done. Please ensure that you do not add spaces or special characters.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="chartType" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Specifies the type of chart to be created by the SmartChart control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ignoredChartTypes" type="xsd:string">
<xsd:annotation>
<xsd:documentation>CSV of fields that is not shown in the list of available chart types.&lt;br&gt;
&lt;b&gt;Note:&lt;/b&gt; No validation is done. Please ensure that you do not add spaces or special characters.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="useVariantManagement" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to &lt;code&gt;true&lt;/code&gt;, variants are used. As a prerequisite, you need to specify the persistencyKey property.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="useChartPersonalisation" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to &lt;code&gt;true&lt;/code&gt;, personalized chart settings are defined. If you want to persist the chart personalization, you need
to specify the persistencyKey property.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="header" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Specifies header text that is shown in the chart.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="persistencyKey" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Key used to access personalization data.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="currentVariantId" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Retrieves or applies the current variant.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="enableAutoBinding" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to &lt;code&gt;true&lt;/code&gt;, this enables automatic binding of the chart using the chartBindingPath (if it exists) or entitySet
property. This happens right after the &lt;code&gt;initialise&lt;/code&gt; event has been fired.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="chartBindingPath" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Specifies the path that is used during the binding of the chart. If not specified, the entitySet property is used instead. (used
only if binding is established internally/automatically - See enableAutoBinding)</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showDrillButtons" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Controls the visibility of the Drill Up and Drill Down buttons.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showZoomButtons" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Controls the visibility of the Zoom In and Zoom Out buttons.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showSemanticNavigationButton" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Controls the visibility of the Navigation button</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showVariantManagement" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Controls the visibility of the Variant Management.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showDownloadButton" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Controls the visibility of the chart download button.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showDetailsButton" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Controls the visibility of the Details button. If set to &lt;code&gt;true&lt;/code&gt;, the datapoint tooltip will be disabled as the
information of selected datapoints will be found in the details popover. This will also set the drill-down button to invisible.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showDrillBreadcrumbs" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Controls the visibility of the Breadcrumbs control for drilling up within the visible dimensions. If set to &lt;code&gt;true&lt;/code&gt;,
the toolbar header will be replaced by the Breadcrumbs control. This will also set the drill-up button to invisible.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showChartTooltip" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Controls the visibility of the chart tooltip. If set to &lt;code&gt;true &lt;/code&gt;, an instance of sap.viz.ui5.controls.VizTooltip will
be created and shown when hovering over a data point.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showLegendButton" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Controls the visibility of the Navigation button</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="legendVisible" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Set chart's legend properties.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="selectionMode" type="n9:_SelectionModeType">
<xsd:annotation>
<xsd:documentation>Chart selection mode. Supported values are {@link sap.ui.comp.smartchart.SelectionMode.Single} or {@link sap.ui.comp.smartchart.SelectionMode.Multi}, case
insensitive, always return in upper case. Unsupported values will be ignored.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showFullScreenButton" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Controls the visibility of the FullScreen button.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="useTooltip" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Specifies weather an instance of {@link sap.viz.ui5.controls.VizTooltip} or {@link sap.viz.ui5.controls.Popover} is used.
If set to &lt;code&gt;true&lt;/code&gt;, a tooltip will be displayed, a popover otherwise.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="useListForChartTypeSelection" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Controls the visualization for chart type selection. If set to &lt;code&gt;true&lt;/code&gt;, the list of available chart types will be
displayed. If set to &lt;code&gt;false&lt;/code&gt; and there are three or fewer available chart types, the chart types will be displayed as
separate buttons in the toolbar. If there are more than three chart types, a list will be shown.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showChartTypeSelectionButton" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Controls the visibility of the chart type selection button.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="noData" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Defines the custom text that will be displayed in case no data is found for the current binding.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showToolbar" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Controls the visibility of the toolbar.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="toolbarStyle" type="n2:_ToolbarStyleType">
<xsd:annotation>
<xsd:documentation>Defines the visual style of the smart charts &lt;code&gt;Toolbar&lt;/code&gt;. &lt;b&gt;Note:&lt;/b&gt; The visual styles are theme-dependent.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showDimensionsTitle" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Controls the visibility of the title in the dimension area of the chart.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showMeasuresTitle" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Controls the visibility of the title in the measure area of the chart.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="smartVariant" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Identifies the SmartVariant control which should be used for the personalization. Will be ignored if the advanced mode is set.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="initialise" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired once the control has been initialized.
&lt;b&gt;Note:&lt;/b&gt; For compatibility reasons the sap.chart library is loaded synchroniously as soon as a event handler for the &lt;code&gt;initialise&lt;/code&gt;
event has been attached. Please use event &lt;code&gt;intialized&lt;/code&gt; instead.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="initialized" type="xsd:string">
<xsd:annotation>
<xsd:documentation>New event, async successor of initialise</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="beforeRebindChart" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired right before the &lt;code&gt;SmartChart&lt;/code&gt; control triggers the binding / rebinding of the inner chart.&lt;br&gt;
&lt;b&gt;Note:&lt;/b&gt; In certain cases the inner chart triggers a rebinding by itself. In these cases, the event is not fired.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="dataReceived" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired when data is received after binding. This event is fired if the binding for the chart is done by the SmartChart
control itself.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="afterVariantInitialise" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired after the variant management in the SmartChart control has been initialized.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="afterVariantSave" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired after a variant has been saved. This event can be used to retrieve the ID of the saved variant.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="afterVariantApply" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired after a variant has been applied.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showOverlay" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired right before the overlay is shown.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="fullScreenToggled" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired right after the full screen mode of the SmartChart control has been changed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="selectionDetailsActionPress" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired when any action in the selection details popover is pressed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="chartDataChanged" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired when &lt;code&gt;SmartChart&lt;/code&gt; control data changes, due to changes in the personalization dialog or drill
operations.&lt;br&gt;
The data can be changed via sorters, filters or drill-ups/drill-downs.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.comp.smartfield.Configuration'-->
<xsd:complexType name="_ConfigurationType">
<xsd:complexContent>
<xsd:extension base="n0:_ElementType">
<xsd:attribute name="controlType" type="n9:_ControlTypeType">
<xsd:annotation>
<xsd:documentation>By default the SmartField chooses the controls it hosts by interpreting OData metadata. This property allows to overwrite the
default behavior to some extent. For example makes it possible to define that an OData property of type Edm.Boolean is displayed as
a combo box.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="displayBehaviour" type="n9:_DisplayBehaviourType">
<xsd:annotation>
<xsd:documentation>The property specifies how value help, that is available for input fields, is presented. For example, it specifies whether the
descriptions of the values shown in the result after a query are displayed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="preventInitialDataFetchInValueHelpDialog" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If there are value help annotations for a smart field, it is possible to specify whether the table in the value help dialog for
this field will be filled initially. The default value is &lt;code&gt;true&lt;/code&gt;, which means the table will not be filled as the
data fetch is prevented.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.comp.smartfield.ControlProposal'-->
<xsd:complexType name="_ControlProposalType">
<xsd:complexContent>
<xsd:extension base="n0:_ElementType">
<xsd:sequence>
<xsd:element name="objectStatus" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Optional definition to further qualify how an object status control should be rendered.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n9:ObjectStatus"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="controlType" type="n9:_ControlProposalTypeType">
<xsd:annotation>
<xsd:documentation>By default the SmartField chooses the controls it hosts by interpreting OData meta data. This property allows to overwrite the default behavior to some
extent; for example this property allows to define that an OData property of type Edm.Boolean is displayed as combo box.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.comp.smartfield.ObjectStatus'-->
<xsd:complexType name="_ObjectStatusType">
<xsd:complexContent>
<xsd:extension base="n0:_ElementType">
<xsd:attribute name="criticality" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Optional attribute to determine the rendered state. Possible values are the numeric representations of the enum members
of annotation &lt;code&gt;com.sap.vocabularies.UI.v1.CriticalityType&lt;/code&gt;:
0: None
1: Error
2: Warning
3: Success</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="criticalityRepresentationType" type="n9:_CriticalityRepresentationTypeType">
<xsd:annotation>
<xsd:documentation>Optional attribute, which can be set to control how the criticality is visualized.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.comp.smartfield.SmartField'-->
<xsd:complexType name="_SmartFieldType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<xsd:element name="configuration" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Optional configuration for &lt;code&gt;SmartField&lt;/code&gt;.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n9:Configuration"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="controlProposal" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Proposes a control to be rendered. The &lt;code&gt;SmartField&lt;/code&gt; control can ignore the proposal.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n9:ControlProposal"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="semanticObjectController" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The Semantic Object Controller allows the user to specify and overwrite functionality for semantic object navigation.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n9:SemanticObjectController"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="value" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The value property keeps the current value of the control. If a binding expression is configured, this is used to determine the
property of an OData entity.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="enabled" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Indicates whether the user can interact with the control or not. &lt;b&gt;Note:&lt;/b&gt; Disabled controls cannot be focused and they are out
of the tab order.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="entitySet" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The name of an entity set for which the control manages values. This is an optional property.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="editable" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Sets the control into an editable mode or a display mode.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="contextEditable" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Notifies the control whether controls using the &lt;code&gt;SmartField&lt;/code&gt; control are editable.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>Defines the width of the control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="textAlign" type="n0:_TextAlignType">
<xsd:annotation>
<xsd:documentation>Horizontal alignment of the text.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="placeholder" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Text shown when no value available.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="name" type="xsd:string">
<xsd:annotation>
<xsd:documentation>To be used in the HTML code (for example, for HTML forms that send data to the server via 'submit').</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="valueState" type="n0:_ValueStateType">
<xsd:annotation>
<xsd:documentation>Visualizes the validation state of the control, e.g. &lt;code&gt;Error&lt;/code&gt;, &lt;code&gt;Warning&lt;/code&gt;, &lt;code&gt;Success&lt;/code&gt;.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="valueStateText" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The text which is shown in the value state message popup.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showValueStateMessage" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Defines whether the value state message is shown or not.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="jsontype" type="n9:_JSONTypeType">
<xsd:annotation>
<xsd:documentation>Data types to be used, if the &lt;code&gt;SmartField&lt;/code&gt; control is interacting with a JSON model. If the value property of the
control is bound to a property of an OData entity set, this property is not taken into consideration.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="mandatory" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to &lt;code&gt;true&lt;/code&gt;, a user input is required.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="maxLength" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Maximum number of characters. Value &lt;code&gt;0&lt;/code&gt; means the feature is switched off.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showSuggestion" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to &lt;code&gt;true&lt;/code&gt;, the suggestion feature for a hosted control is enabled, if the hosted control supports it.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showValueHelp" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to &lt;code&gt;true&lt;/code&gt;, a value help indicator will be displayed inside the hosted control, if the hosted control supports
this.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showLabel" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to &lt;code&gt;false&lt;/code&gt; the label is not displayed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="textLabel" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This property contains the text of an associated &lt;code&gt;SmartLabel&lt;/code&gt;.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="tooltipLabel" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This property contains the tool tip of the associated &lt;code&gt;SmartLabel&lt;/code&gt; control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="uomVisible" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Visible state of the unit, if the &lt;code&gt;SmartField&lt;/code&gt; control addresses unit of measure use cases, for example, an amount and
its associated currency.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="uomEditable" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Editable state of the unit, if the &lt;code&gt;SmartField&lt;/code&gt; control addresses unit of measure use cases, for example, an amount
and its associated currency.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="uomEnabled" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Enabled state of the unit, if the &lt;code&gt;SmartField&lt;/code&gt; control addresses unit of measure use cases, for example, an amount and
its associated currency.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="url" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Contains a URL which is used to render a link. The link is rendered, if the OData property, to which the value property of the
control is bound, is of type &lt;code&gt;Edm.String&lt;/code&gt; and the &lt;code&gt;SmartField&lt;/code&gt; is in display mode.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="uomEditState" type="xsd:int">
<xsd:annotation>
<xsd:documentation>This property is for internal use only.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="controlContext" type="n9:_ControlContextTypeType">
<xsd:annotation>
<xsd:documentation>Defines the context in which the layout of the &lt;code&gt;SmartField&lt;/code&gt; control has to be interpreted.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="proposedControl" type="n9:_ControlProposalTypeType">
<xsd:annotation>
<xsd:documentation>Proposes a control to be rendered. The &lt;code&gt;SmartField&lt;/code&gt; control can ignore the proposal.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="wrapping" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Indicates whether the control break lines (in display mode) to prevent overflow.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="clientSideMandatoryCheck" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Determines if the mandatory check happens on the client side &lt;code&gt;true&lt;/code&gt; or on the server side
&lt;code&gt;false&lt;/code&gt;.

&lt;b&gt;Note:&lt;/b&gt; If the {@link sap.ui.comp.smartfield.SmartField#value} property of the
&lt;code&gt;SmartField&lt;/code&gt; control is bound to an Entity Data Model (EDM) property annotated as
&lt;code&gt;Nullable="false"&lt;/code&gt;, the mandatory validation is performed on the client side regardless of
the &lt;code&gt;clientSideMandatoryCheck&lt;/code&gt; setting.

&lt;i&gt;Example:&lt;/i&gt;

&lt;pre&gt;
    &amp;lt;Property Name=&amp;quot;CategoryID&amp;quot; Type=&amp;quot;Edm.String&amp;quot; Nullable=&amp;quot;false&amp;quot;/&amp;gt;
&lt;/pre&gt;</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="fetchValueListReadOnly" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Indicates whether the value list collection is fetched in display mode from the resource path
specified in the &lt;code&gt;com.sap.vocabularies.Common.v1.ValueList&lt;/code&gt; annotation.

This collection data is used to infer a descriptive text for the value of the &lt;code&gt;SmartField&lt;/code&gt;
control. However, fetching the value list collection for every &lt;code&gt;SmartField&lt;/code&gt; instance
individually may not be ideal in some performance-critical scenarios.
To optimize this default behavior, you can set this property to &lt;code&gt;false&lt;/code&gt; and provide the
&lt;code&gt;com.sap.vocabularies.Common.v1.Text&lt;/code&gt; annotation, which is used to specify the URL path
name to the Entity Data Model (EDM) property from which the descriptive text for the value of the
&lt;code&gt;SmartField&lt;/code&gt; control is fetched, for example, LT (Laptop).

&lt;b&gt;Note:&lt;/b&gt; Setting this property to &lt;code&gt;false&lt;/code&gt; only has an effect if the &lt;code&gt;value&lt;/code&gt;
property of the &lt;code&gt;SmartField&lt;/code&gt; control is bound to an Entity Data Model (EDM) property typed
as &lt;code&gt;Edm.String&lt;/code&gt;. In addition, applications or frameworks have to make sure the descriptive
text is fetched, for example, by expanding a navigation property.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="expandNavigationProperties" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Indicates if entities related to navigation properties inside the metadata are requested.
If set to &lt;code&gt;true&lt;/code&gt;, then these related entities are loaded with an &lt;code&gt;$expand&lt;/code&gt; request.

Annotations that can have navigation properties are the following:
&lt;ul&gt;
	&lt;li&gt; &lt;code&gt;com.sap.vocabularies.Common.v1.Text&lt;/code&gt; for text arrangements
	&lt;li&gt; &lt;code&gt;Org.OData.Measures.V1.Unit&lt;/code&gt; and &lt;code&gt;Org.OData.Measures.V1.ISOCurrency&lt;/code&gt; for units
	&lt;li&gt; &lt;code&gt;com.sap.vocabularies.Common.v1.FieldControl&lt;/code&gt; for field control
&lt;/ul&gt;

&lt;b&gt;Note:&lt;/b&gt; Independent of the &lt;code&gt;fetchValueListReadOnly&lt;/code&gt; value, setting this flag to &lt;code&gt;true&lt;/code&gt;
requests data from the backend.

&lt;b&gt;Note:&lt;/b&gt; The back-end request to expand the navigation properties is sent only if the entity to which
&lt;code&gt;SmartField&lt;/code&gt; is bound is persisted.
For transient entities, there is no back-end request since no such data is available.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="textInEditModeSource" type="n9:_TextInEditModeSourceType">
<xsd:annotation>
<xsd:documentation>Sets the source from which text descriptions for &lt;code&gt;IDs&lt;/code&gt; are fetched in edit mode, for example,
for LT (Laptop).

&lt;b&gt;Note&lt;/b&gt;: The &lt;code&gt;sap.ui.comp.smartfield.TextInEditModeSource.NavigationProperty&lt;/code&gt; and
&lt;code&gt;sap.ui.comp.smartfield.TextInEditModeSource.ValueList&lt;/code&gt; enumeration members are only supported if the
following applies:

&lt;ul&gt;
 &lt;li&gt;The &lt;code&gt;value&lt;/code&gt; property of the &lt;code&gt;SmartField&lt;/code&gt; control instance
is bound to an Entity Data Model (EDM) property typed as &lt;code&gt;Edm.String&lt;/code&gt; or &lt;code&gt;Edm.Guid&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;com.sap.vocabularies.Common.v1.Text&lt;/code&gt; annotation for the bound EDM property is specified in the
service metadata document or annotation file whose &lt;code&gt;Path&lt;/code&gt; attribute points to a navigation EDM property
of a lookup entity set/type whose single key property is the &lt;code&gt;ID&lt;/code&gt;, which contains (among other properties)
the descriptive value.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;com.sap.vocabularies.UI.v1.TextArrangement&lt;/code&gt; annotation for the bound EDM property or entity
type is specified in the (service metadata document/annotation file).&lt;/li&gt;
&lt;li&gt;The binding mode for the &lt;code&gt;value&lt;/code&gt; property of the &lt;code&gt;SmartField&lt;/code&gt; control is the two-way binding
mode.&lt;/li&gt;
&lt;li&gt;The field from which the description is fetch is filterable.&lt;/li&gt;
&lt;/ul&gt;

&lt;b&gt;Note&lt;/b&gt;: In addition, the &lt;code&gt;sap.ui.comp.smartfield.TextInEditModeSource.NavigationProperty&lt;/code&gt; enumeration
member is only supported if the following applies:

&lt;ul&gt;
&lt;li&gt;The navigation EDM property association is defined in the service metadata document.&lt;/li&gt;
	&lt;li&gt;The navigation EDM property association defines a referential constraint that ties values of the dependent editable
entity type/set to the lookup entity type/set in the service metadata document.&lt;/li&gt;
&lt;li&gt;The navigation EDM property association end multiplicity of the lookup entity type/set is defined as &lt;code&gt;1&lt;/code&gt;
in the service metadata document. There must be a single-valued navigation from the editable entity set/type
to the lookup entity set/type.&lt;/li&gt;
&lt;li&gt;The lookup entity type/set from which the descriptive value is fetched contains a single key property.&lt;/li&gt;
&lt;/ul&gt;</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaLabelledBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / IDs which label this control (see WAI-ARIA attribute &lt;code&gt;aria-labelledby&lt;/code&gt;).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="entitySetFound" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The OData entity set is either derived from the control's binding context or from control's entity set property, if a value for it
is specified. In both cases this event is fired.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="change" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The event is fired after the text in the field has been changed and the focus leaves the field, or after the Enter key has been
pressed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="initialise" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The event is fired after the smart field has calculated its metadata.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="visibleChanged" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The event is fired after the visibility of the control has changed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="editableChanged" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The event is fired after the value of editable property of the control has changed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="contextEditableChanged" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The event is fired after the context editable property of the control has changed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="innerControlsCreated" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The event is fired after the inner controls have been created. The created controls can be obtained via oControl.getInnerControls().</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="valueListChanged" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The event is fired when after selection of values with value help or auto-suggest, the model is updated with the selected data.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="press" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Fires when the user triggers the link control or taps/clicks on an active title of the object identifier control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.comp.smartfilterbar.ControlConfiguration'-->
<xsd:complexType name="_ControlConfigurationType">
<xsd:complexContent>
<xsd:extension base="n0:_ElementType">
<xsd:sequence>
<xsd:element name="defaultFilterValues" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Default value for a filter field.
The aggreagtion expects {@link sap.ui.comp.smartfilterbar.SelectOption|SelectOption} instances, where the values' format
(properties &lt;code&gt;low&lt;/code&gt; and &lt;code&gt;high&lt;/code&gt;) match the type of the referneced property and consider also the
given constraints of the property.

Samples for valid formats:
&lt;code&gt;Edm.DateTime&lt;/code&gt; with constraint &lt;code&gt;sap:display-format='Date'&lt;/code&gt;:
"2018-12-24" (you optionally can provide a time-part and timezone, too, (2018-12-24T00:00:00Z) but this is ignored)

&lt;code&gt;Edm.DateTimeOffset&lt;/code&gt;:
"2018-12-24T13:55:59Z"

&lt;code&gt;Edm.Time&lt;/code&gt;:
"PT12H34M56S"

&lt;code&gt;Edm.Boolean&lt;/code&gt;:
"false"

&lt;code&gt;Edm.Decimal&lt;/code&gt;:
"2983.12"</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n9:SelectOption"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="customControl" minOccurs="0">
<xsd:annotation>
<xsd:documentation>If a custom control is specified, the SmartFilterBar will not create a control but use the custom control. Additional services like
TypeAhead have to implemented manually.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n0:Control"/>
<xsd:element ref="n0:Fragment"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="key" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The key property corresponds to the field name from the OData service $metadata document.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="groupId" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The groupId can be used to move a field from one group to another. The groupId corresponds to the EntityName from the OData
metadata. It is also possible to move a field from the advanced area to the basic area by specifying the groupId _BASIC.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="label" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Using this property it is possible to overwrite the label of a filter field in the SmartFilterBar.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="visible" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Using this flag it is possible to hide fields from the OData metadata.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="hasValueHelpDialog" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Specifies whether a value help dialog is available or not.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="controlType" type="n9:_ControlTypeType">
<xsd:annotation>
<xsd:documentation>The SmartFilterBar calculates which kind of control will be used for a filter fields based on multiple OData Attributes and
annotations. Using this property it is possible to overwrite the OData metadata.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="filterType" type="n9:_FilterTypeType">
<xsd:annotation>
<xsd:documentation>The filter type specifies whether the filter field is of type single value, multi-value, or interval. The filter type is
calculated by the {@link sap.ui.comp.smartfilterbar.SmartFilterBar} control based on the OData metadata. Using this property the filter type can be configured manually.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="index" type="xsd:int">
<xsd:annotation>
<xsd:documentation>The zero based index can be used to specify the initial order of fields (without any variants).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="hasTypeAhead" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Property can be used to enable the TypeAhead service. TypeAhead does not work with all controls, e.g it does not work for
DrodDownListbox</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="mandatory" type="n9:_MandatoryTypeType">
<xsd:annotation>
<xsd:documentation>Property can be used to overwrite the mandatory state of a filter field. Property can only be set during initialization. Changes at
runtime will be ignored.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="width" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The width of the filter field in a CSS compatible format. The width can be set only once during initialization. Changes at runtime
will not be reflected. The width will not be applied to custom controls.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="visibleInAdvancedArea" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to true this field will be added to the advanced area (aka. Dynamic Selection) by default.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="preventInitialDataFetchInValueHelpDialog" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>In case there are value help annotations for this filter field, it is possible to specify whether the table in the value help
dialog for this field will be filled initially. The default value is true, which means the table will not be filled as the data
fetch is prevented.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="displayBehaviour" type="n9:_DisplayBehaviourType">
<xsd:annotation>
<xsd:documentation>The displayBehaviour specifies how the content should be displayed on certain controls. Ex: DescriptionOnly for Combobox (DropDown
text) , Description and ID for MultiInput (token text)</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="conditionType" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The condition Type class name to use for this filter item. Implementation should derive from sap.ui.comp.config.condition.Type</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="change" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Fired when the value of a property, for example isVisible, has changed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.comp.smartfilterbar.GroupConfiguration'-->
<xsd:complexType name="_GroupConfigurationType">
<xsd:complexContent>
<xsd:extension base="n0:_ElementType">
<xsd:attribute name="key" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The key property shall correspond to the name EntityTypeName from the OData service $metadata document.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="index" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Zero based integer index.
The index can be used to specify the order of groups. If no index is specified, the order like in the OData metadata will be used.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="label" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Using this property it is possible to overwrite the label of a group in the advanced area of the SmartFilterBar.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="change" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Fired when the value of a property, for example label, has changed</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.comp.smartfilterbar.SelectOption'-->
<xsd:complexType name="_SelectOptionType">
<xsd:complexContent>
<xsd:extension base="n0:_ElementType">
<xsd:attribute name="sign" type="n9:_SelectOptionSignType">
<xsd:annotation>
<xsd:documentation>The sign for a Select Option. Possible values are I for include or E for exclude.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="operator" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The operator for a select option. The default value is EQ "for equals".</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="low" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The low value for a select option.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="high" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The high value for a select option. The high value is only required for a few operators, e.g. BT (between).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.comp.smartfilterbar.SmartFilterBar'-->
<xsd:complexType name="_SmartFilterBarType">
<xsd:complexContent>
<xsd:extension base="n9:_FilterBarType">
<xsd:sequence>
<xsd:element name="controlConfiguration" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Using control configurations you can add additional configuration to filter fields, for example set custom labels, change the order
of fields, or change the filter field control type. &lt;b&gt;Note:&lt;/b&gt; Changing the values here after the SmartFilter is initialized (&lt;code&gt;initialise&lt;/code&gt;
event was fired) has no effect.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n9:ControlConfiguration"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="groupConfiguration" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Provides the possibility to add additional configuration to groups. Groups are used to show fields in the advanced area of the
SmartFilterBar. With additional configuration, you can for example set custom labels or change the order of groups. &lt;b&gt;Note:&lt;/b&gt;
Changing the values here after the SmartFilter is initialized (&lt;code&gt;initialise&lt;/code&gt; event was fired) has no effect.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n9:GroupConfiguration"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="entityType" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The OData entity type whose metadata is used to create the SmartFilterBar. &lt;b&gt;Note:&lt;/b&gt; Changing this value after the
SmartFilterBar is initialized (&lt;code&gt;initialise&lt;/code&gt; event was fired) has no effect.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="entitySet" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The OData entity set whose metadata is used to create the SmartFilterBar. &lt;b&gt;Note:&lt;/b&gt; Changing this value after the
SmartFilterBar is initialized (&lt;code&gt;initialise&lt;/code&gt; event was fired) has no effect.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="resourceUri" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Optional. The OData service URL. If it is not specified, the service URL from the OData model (this.getModel()) will be used.
&lt;b&gt;Note:&lt;/b&gt; Changing this value after the SmartFilterBar is initialized (initialise event was fired) has no effect.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="basicSearchFieldName" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Name of the field that is the focus of the basic search.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="enableBasicSearch" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Enables the basic search field. The entered value can be accessed with
{@link sap.ui.comp.smartfilterbar.SmartFilterBar#getParameters}. &lt;b&gt;Note:&lt;/b&gt; When the SmartFilterBar control is used with a
{@link sap.ui.comp.smarttable.SmartTable} control the parameters are handled automatically. Therefore, this must only be enabled
for OData service entities that support basic search.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="liveMode" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set the search will be automatically triggered, when a filter value was set via the &lt;B&gt;change&lt;/B&gt; event.&lt;br&gt;
&lt;b&gt;Note:&lt;/b&gt; The liveMode only operates on non-mobile scenarios.&lt;br&gt;
Additionally, if liveMode is set, the following applies:
&lt;ul&gt;
&lt;li&gt;The error messagebox is not displayed, and the &lt;code&gt;showMessages&lt;/code&gt; property is ignored.&lt;/li&gt;
&lt;li&gt;The search is triggered after a variant has been selected.&lt;/li&gt;
&lt;li&gt;Execute on Select for &lt;code&gt;VariantManagement&lt;/code&gt; is not shown and not taken into account&lt;/li&gt;
&lt;/ul&gt;</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showMessages" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to &lt;code&gt;false&lt;/code&gt; eventual errors during the search, will not be displayed in a messagebox.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="considerAnalyticalParameters" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Indicates if the analytical parameters (SelectionVariant) must be taken into consideration.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="useDateRangeType" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to &lt;code&gt;true&lt;/code&gt; all date fields with filter restriction &lt;code&gt;interval&lt;/code&gt; will be treated as
&lt;code&gt;DateTimeRange&lt;/code&gt; filters. The &lt;code&gt;useDateRangeType&lt;/code&gt; can be set only once during initialization. &lt;b&gt;Note:&lt;/b&gt;
If this property is set to &lt;code&gt;true&lt;/code&gt; and any date filters with filter restriction &lt;code&gt;interval&lt;/code&gt; were stored as
part of a variant, the values of these filters cannot be applied. If this property is set to &lt;code&gt;false&lt;/code&gt;, any previously
stored filters which were treated as type &lt;code&gt;DateTimeRange&lt;/code&gt; based on the former setting, cannot be converted back to the
standard date interval.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="suppressSelection" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to &lt;code&gt;true&lt;/code&gt; all search requests will be ignored. This functionality is only intended to be used internally to
enable an optimal solution when the filter bar is controlled by the smart templates. NOTE: As long as this property is set to
&lt;code&gt;true&lt;/code&gt;, all search requests will be neglected.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="considerSelectionVariants" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Indicates if the annotation &lt;code&gt;com.sap.vocabularies.UI.v1.SelectionVariant&lt;/code&gt; is taken into account.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="defaultSelectionVariantName" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Determines one specific variant that is based on the &lt;code&gt;com.sap.vocabularies.UI.v1.SelectionVariant&lt;/code&gt; annotation, which
is then used as the default variant.&lt;br&gt;
This property is only relevant in case &lt;code&gt;considerSelectionVariants&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt; and will only be
applied if there is no user-defined default variant specified.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="useProvidedNavigationProperties" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to &lt;code&gt;true&lt;/code&gt;, only the navigation properties mentioned in property
{@link sap.ui.comp.smartfilterbar.SmartFilterBarl#getNavigationProperties} are checked for further filters.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="navigationProperties" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This property is only evaluated if the property
{@link sap.ui.comp.smartfilterbar.SmartFilterBar#getUseProvidedNavigationProperties} is set to &lt;code&gt;true&lt;/code&gt;. It contains a
comma-separated list of navigation property names which are checked for filters.&lt;br&gt;</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="smartVariant" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Identifies the SmartVariant control which should be used for the personalization.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="pendingChange" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired after the pending state of the &lt;code&gt;FilterBar&lt;/code&gt; control changes.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.comp.smartform.ColumnLayout'-->
<xsd:complexType name="_ColumnLayoutType">
<xsd:complexContent>
<xsd:extension base="n0:_ElementType">
<xsd:attribute name="columnsXL" type="n7:_ColumnsXLType">
<xsd:annotation>
<xsd:documentation>Number of columns for extra-large size.

The number of columns for extra-large size must not be smaller than the number of columns for large size.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="columnsL" type="n7:_ColumnsLType">
<xsd:annotation>
<xsd:documentation>Number of columns for large size.

The number of columns for large size must not be smaller than the number of columns for medium size.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="columnsM" type="n7:_ColumnsMType">
<xsd:annotation>
<xsd:documentation>Number of columns for medium size.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="labelCellsLarge" type="n7:_ColumnCellsType">
<xsd:annotation>
<xsd:documentation>Defines how many cells a label uses if the column is large.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="emptyCellsLarge" type="n7:_EmptyCellsType">
<xsd:annotation>
<xsd:documentation>Defines how many cells are empty at the end of a row.
This could be used to keep the fields small on large screens.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.comp.smartform.Group'-->
<xsd:complexType name="_GroupType">
<xsd:complexContent>
<xsd:extension base="n7:_FormContainerType">
<xsd:sequence>
<!--default aggregation 'groupElements'-->
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n9:GroupElement"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
<xsd:element name="groupElements" minOccurs="0">
<xsd:annotation>
<xsd:documentation>A &lt;code&gt;GroupElement&lt;/code&gt; is a combination of one label and different controls associated to this label.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n9:GroupElement"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="layout" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Layout to specify how the group shall be rendered (e.g. span and line-break)

&lt;b&gt;Note:&lt;/b&gt; Do not use &lt;code&gt;layout&lt;/code&gt; and &lt;code&gt;layoutData&lt;/code&gt; aggregations combined.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n7:GridData"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="useHorizontalLayout" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Specifies whether the groups are rendered in a &lt;code&gt;ResponsiveLayout&lt;/code&gt; with label on top of the group element. Each group will be
rendered in a new line.

&lt;b&gt;Note:&lt;/b&gt; If &lt;code&gt;Group&lt;/code&gt; is assigned to a &lt;code&gt;SmartForm&lt;/code&gt; control,
this property is inherited from the &lt;code&gt;SmartForm&lt;/code&gt; control.

So don't set it to a different value from the one in the &lt;code&gt;SmartForm&lt;/code&gt; control. For performance reasons it might
make sense to set it manually to the same value as the one in the &lt;code&gt;SmartForm&lt;/code&gt; control when creating the &lt;code&gt;Group&lt;/code&gt; element.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="horizontalLayoutGroupElementMinWidth" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Specifies the minimal size in pixels of all group elements of the form if horizontal Layout is used.

&lt;b&gt;Note:&lt;/b&gt; If &lt;code&gt;Group&lt;/code&gt; is assigned to a &lt;code&gt;SmartForm&lt;/code&gt; control,
this property is inherited from the &lt;code&gt;SmartForm&lt;/code&gt; control. So don't set it manually.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="label" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Label for the group.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.comp.smartform.GroupElement'-->
<xsd:complexType name="_GroupElementType">
<xsd:complexContent>
<xsd:extension base="n7:_FormElementType">
<xsd:sequence>
<!--default aggregation 'elements'-->
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control"/>
<xsd:element ref="n0:Fragment"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
<xsd:element name="elements" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Aggregation of controls to be displayed together with a label.

&lt;b&gt;Warning:&lt;/b&gt; Do not put any layout or other container controls in here.
This could damage the visual layout, keyboard support and screen-reader support.
Only form controls are allowed. Views are also not supported.
Allowed controls implement the interface &lt;code&gt;sap.ui.core.IFormContent&lt;/code&gt;.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Control"/>
<xsd:element ref="n0:Fragment"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="useHorizontalLayout" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Specifies whether the groups shall be rendered in a &lt;code&gt;ResponsiveLayout&lt;/code&gt; with label on top of the group element.
Each group will be rendered in a new line.

&lt;b&gt;Note:&lt;/b&gt; If &lt;code&gt;Group&lt;/code&gt; is assigned to a &lt;code&gt;SmartForm&lt;/code&gt; control,
this property is inherited from the &lt;code&gt;SmartForm&lt;/code&gt; control.

So don't set it to a different value from the one in the &lt;code&gt;SmartForm&lt;/code&gt; control. For performance reasons it might
make sense to set it manually to the same value as the one in the &lt;code&gt;SmartForm&lt;/code&gt; control when creating the &lt;code&gt;GroupElement&lt;/code&gt; element.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="horizontalLayoutGroupElementMinWidth" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Specifies the minimal size in pixels of all group elements of the form if horizontal Layout is used.

&lt;b&gt;Note:&lt;/b&gt; If &lt;code&gt;Group&lt;/code&gt; is assigned to a &lt;code&gt;SmartForm&lt;/code&gt; control,
this property is inherited from the &lt;code&gt;SmartForm&lt;/code&gt; control. So don't set it manually.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="elementForLabel" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Index of element to be used for label determination</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="visibleChanged" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The event is fired after the visibility of the control has changed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.comp.smartform.Layout'-->
<xsd:complexType name="_LayoutType">
<xsd:complexContent>
<xsd:extension base="n0:_ElementType">
<xsd:attribute name="labelSpanXL" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Default span for labels in extra large size.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="labelSpanL" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Default span for labels in large size. This span is only used if more than 1 container is in one line, if only 1 container is in
the line the &lt;code&gt;labelSpanM&lt;/code&gt; value is used.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="labelSpanM" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Default span for labels in medium size. This property is used for full size containers. If more than one Container is in one line,
&lt;code&gt;labelSpanL&lt;/code&gt; is used.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="labelSpanS" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Default span for labels in small size.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="emptySpanXL" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Number of grid cells that are empty at the end of each line on extra large size.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="emptySpanL" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Number of grid cells that are empty at the end of each line on large size.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="emptySpanM" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Number of grid cells that are empty at the end of each line on medium size.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="emptySpanS" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Number of grid cells that are empty at the end of each line on small size.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="columnsXL" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Number of columns for extra large size.&lt;br&gt;
The number of columns for extra large size must not be smaller than the number of columns for large size.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="columnsL" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Number of columns for large size.&lt;br&gt;
The number of columns for large size must not be smaller than the number of columns for medium size.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="columnsM" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Number of columns for medium size.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="singleGroupFullSize" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If the &lt;code&gt;SmartForm&lt;/code&gt; contains only one single Group and this property is set, the Group is displayed using the full size of the
&lt;code&gt;SmartForm&lt;/code&gt;. In this case the properties &lt;code&gt;columnsL&lt;/code&gt; and &lt;code&gt;columnsM&lt;/code&gt; are ignored.&lt;br&gt;
In all other cases the Group is displayed in the size of one column.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="breakpointXL" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Breakpoint (in pixel) between large size and extra large (XL) size.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="breakpointL" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Breakpoint (in pixel) between Medium size and Large size.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="breakpointM" type="xsd:int">
<xsd:annotation>
<xsd:documentation>reakpoint (in pixel) between Small size and Medium size.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="gridDataSpan" type="n7:_GridSpanType">
<xsd:annotation>
<xsd:documentation>A string type that represents Grid's span values for large, medium and small screens. Allowed values are separated by space Letters
L, M or S followed by number of columns from 1 to 12 that the container has to take, for example: "L2 M4 S6", "M12", "s10" or "l4
m4". Note that the parameters has to be provided in the order large medium small.&lt;br&gt;
The value set here will be set to all group elements when used with horizontal layout (&lt;code&gt;SmartForm&lt;/code&gt; property &lt;code&gt;useHorizontalLayout&lt;/code&gt;)</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.comp.smartform.SmartForm'-->
<xsd:complexType name="_SmartFormType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation 'groups'-->
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n9:Group"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
<xsd:element name="groups" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Groups are used to group form elements.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n9:Group"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="layout" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Layout settings to adjust the used layout.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n0:Control"/>
<xsd:element ref="n0:Fragment"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="semanticObjectController" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The Semantic Object Controller allows the user to specify and overwrite functionality for semantic object navigation.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n9:SemanticObjectController"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="customToolbar" minOccurs="0">
<xsd:annotation>
<xsd:documentation>An additional toolbar that can be added by the users, which can contain further custom buttons, controls, etc.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n2:Toolbar"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="title" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Title of the form.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="useHorizontalLayout" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Specifies whether the groups are rendered in a {@link sap.ui.layout.form.ResponsiveLayout ResponsiveLayout}
with the label above the field. Each group is rendered in a new line.

&lt;b&gt;Note&lt;/b&gt; The value of this property will be passed on to the &lt;code&gt;useHorizontalLayout&lt;/code&gt;
property of all &lt;code&gt;Group&lt;/code&gt; and &lt;code&gt;GroupElement&lt;/code&gt; elements.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="horizontalLayoutGroupElementMinWidth" type="xsd:int">
<xsd:annotation>
<xsd:documentation>Specifies the minimal size in pixels of all group elements of the form if the horizontal layout is used.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="checkButton" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Specifies whether a check button is added to the toolbar.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="entityType" type="xsd:string">
<xsd:annotation>
<xsd:documentation>CSV of entity types for which the flexibility features are available.&lt;br&gt;
For more information about SAPUI5 flexibility, refer to the Developer Guide.&lt;br&gt;
&lt;b&gt;Note:&lt;/b&gt;
No validation is done. Please ensure that you do not add spaces or special characters.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="expandable" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Specifies whether the control is expandable. Per default the control is not rendered as expanded.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="expanded" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If expandable, this property indicates whether the state is expanded or not. If expanded, then the toolbar (if available) and the
content is rendered; if expanded is false, then only the headerText/headerToolbar is rendered.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="editTogglable" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to &lt;code&gt;true&lt;/code&gt;, a button to toggle the &lt;code&gt;editable&lt;/code&gt; property is shown in the toolbar.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="editable" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Specifies whether the form is editable.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ignoredFields" type="xsd:string">
<xsd:annotation>
<xsd:documentation>CSV of fields that must be ignored in the OData metadata by the SmartForm control.&lt;br&gt;
&lt;b&gt;Note:&lt;/b&gt;&lt;br&gt;
No validation is done. Please ensure that you do not add spaces or special characters.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="flexEnabled" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Specifies whether the form enables flexibility features, such as adding new fields.&lt;br&gt;
For more information about SAPUI5 flexibility, refer to the Developer Guide.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaLabelledBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Association to controls / IDs that label this control (see WAI-ARIA attribute &lt;code&gt;aria-labelledby&lt;/code&gt;).</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="editToggled" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired when the editable property is toggled.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="checked" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired after check was performed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.comp.smartlist.SmartList'-->
<xsd:complexType name="_SmartListType">
<xsd:complexContent>
<xsd:extension base="n2:_VBoxType">
<xsd:sequence>
<xsd:element name="listItemTemplate" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Specifies the template that is used for the inner &lt;code&gt;List&lt;/code&gt; or &lt;code&gt;Tree&lt;/code&gt; control.&lt;br&gt;
&lt;b&gt;Note:&lt;/b&gt;&lt;br&gt;
This template is used when binding the &lt;code&gt;items&lt;/code&gt; of &lt;code&gt;sap.m.List&lt;/code&gt; or &lt;code&gt;sap.m.Tree&lt;/code&gt; control, and
will not be available in the &lt;code&gt;SmartList&lt;/code&gt; control once the binding has been done.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n2:ListItemBase"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="entitySet" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The entity set name from which to fetch data.&lt;br&gt;
&lt;i&gt;Note:&lt;/i&gt;&lt;br&gt;
This is not a dynamic UI5 property.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="selectFields" type="xsd:string">
<xsd:annotation>
<xsd:documentation>CSV of fields that must be selected when request is sent to the backend.&lt;br&gt;
&lt;i&gt;Note:&lt;/i&gt;&lt;br&gt;
No validation is done. Please ensure that you do not add spaces or special characters.&lt;br&gt;
This property is only needed when used together with an &lt;code&gt;ODataModel&lt;/code&gt;.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="expandFields" type="xsd:string">
<xsd:annotation>
<xsd:documentation>CSV of fields that must be expanded when request is sent to the backend.&lt;br&gt;
&lt;i&gt;Note:&lt;/i&gt;&lt;br&gt;
No validation is done. Please ensure that you do not add spaces or special characters.&lt;br&gt;
This property is only needed when used together with an &lt;code&gt;ODataModel&lt;/code&gt;.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showRowCount" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to &lt;code&gt;true&lt;/code&gt; (default), the number of rows is shown along with the header text.&lt;br&gt;
If set to &lt;code&gt;false&lt;/code&gt;, the number of rows will not be shown on the user interface.&lt;br&gt;
&lt;i&gt;Note:&lt;/i&gt;&lt;br&gt;
To avoid sending dedicated OData requests in order to improve your application's performance, you must configure the binding of the
list as required.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="header" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Specifies header text that is shown in list.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="enableAutoBinding" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>When set to &lt;code&gt;true&lt;/code&gt;, this enables automatic binding of the list using the &lt;code&gt;listBindingPath&lt;/code&gt; (if it
exists) or &lt;code&gt;entitySet&lt;/code&gt; property. This happens right after the &lt;code&gt;initialise&lt;/code&gt; event has been fired.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="listBindingPath" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Specifies the path that is used during the binding of the list. If not specified, the &lt;code&gt;entitySet&lt;/code&gt; property is used
instead. (used only if binding is done automatically or when using &lt;code&gt;rebindList&lt;/code&gt;)</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="listType" type="n9:_ListTypeType">
<xsd:annotation>
<xsd:documentation>Specifies the type of list to be created in the &lt;code&gt;SmartList&lt;/code&gt; control.&lt;br&gt;
&lt;i&gt;Note:&lt;/i&gt;&lt;br&gt;
If you add a &lt;code&gt;List&lt;/code&gt; or &lt;code&gt;Tree&lt;/code&gt; to the content of the &lt;code&gt;SmartList&lt;/code&gt; control in the view, this
property has no effect.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showFullScreenButton" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Controls the visibility of the full screen button.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="smartFilter" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The &lt;code&gt;SmartFilterBar&lt;/code&gt; control to be linked to the &lt;code&gt;SmartList&lt;/code&gt; control. Some events of the
&lt;code&gt;SmartFilterBar&lt;/code&gt; control are then used to fetch data, show overlay etc.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="initialise" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fired once the control has been initialized.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="beforeRebindList" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fired right before the binding is being done.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="dataReceived" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fired when data is received after binding. The event is usually only fired if the binding for the list is done by the
&lt;code&gt;SmartList&lt;/code&gt; control itself.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.comp.smartmicrochart.SmartAreaMicroChart'-->
<xsd:complexType name="_SmartAreaMicroChartType">
<xsd:complexContent>
<xsd:extension base="n9:_SmartMicroChartBaseType">
<xsd:attribute name="enableAutoBinding" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Only &lt;code&gt;true&lt;/code&gt; value is supported: the chart will be bound to the chartBindingPath or to the entitySet</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.comp.smartmicrochart.SmartBulletMicroChart'-->
<xsd:complexType name="_SmartBulletMicroChartType">
<xsd:complexContent>
<xsd:extension base="n9:_SmartMicroChartBaseType">
<xsd:attribute name="enableAutoBinding" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to &lt;code&gt;true&lt;/code&gt;, this enables automatic binding of the chart using the chartBindingPath (if it exists)
property.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.comp.smartmicrochart.SmartColumnMicroChart'-->
<xsd:complexType name="_SmartColumnMicroChartType">
<xsd:complexContent>
<xsd:extension base="n9:_SmartMicroChartBaseType"/>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.comp.smartmicrochart.SmartComparisonMicroChart'-->
<xsd:complexType name="_SmartComparisonMicroChartType">
<xsd:complexContent>
<xsd:extension base="n9:_SmartMicroChartBaseType"/>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.comp.smartmicrochart.SmartDeltaMicroChart'-->
<xsd:complexType name="_SmartDeltaMicroChartType">
<xsd:complexContent>
<xsd:extension base="n9:_SmartMicroChartBaseType">
<xsd:attribute name="enableAutoBinding" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to &lt;code&gt;true&lt;/code&gt;, this enables automatic data binding using the &lt;code&gt;chartBindingPath&lt;/code&gt; property
, if such a property exists.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.comp.smartmicrochart.SmartHarveyBallMicroChart'-->
<xsd:complexType name="_SmartHarveyBallMicroChartType">
<xsd:complexContent>
<xsd:extension base="n9:_SmartMicroChartBaseType">
<xsd:attribute name="enableAutoBinding" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to &lt;code&gt;true&lt;/code&gt;, the chart is automatically bound using the &lt;code&gt;chartBindingPath&lt;/code&gt;
property, if it is specified.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="freeText" type="xsd:string">
<xsd:annotation>
<xsd:documentation>If the associated control is provided, its &lt;code&gt;text&lt;/code&gt; property is set to
the free text provided by annotations. The &lt;code&gt;Value&lt;/code&gt; property of the &lt;code&gt;DataPoint&lt;/code&gt;
annotation should be annotated with this free text. The &lt;code&gt;Label&lt;/code&gt; annotation from the
&lt;code&gt;OData Common&lt;/code&gt; vocabulary can be used.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.comp.smartmicrochart.SmartLineMicroChart'-->
<xsd:complexType name="_SmartLineMicroChartType">
<xsd:complexContent>
<xsd:extension base="n9:_SmartMicroChartBaseType"/>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.comp.smartmicrochart.SmartMicroChart'-->
<xsd:complexType name="_SmartMicroChartType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation '_chart'-->
<xsd:choice minOccurs="0">
<xsd:element ref="n0:Control"/>
<xsd:element ref="n0:Fragment"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
<xsd:attribute name="entitySet" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The entity set name to fetch data and create the internal chart representation from.
Note that this is not a dynamic UI5 property.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showLabel" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Determines if any label is shown or not</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="enableAutoBinding" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to &lt;code&gt;true&lt;/code&gt;, this enables automatic binding of the chart using the chartBindingPath (if it exists) or entitySet
property.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="chartBindingPath" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This attribute can be used to specify the path that
is used during the binding of the chart. If not
specified, the entitySet attribute is used instead and also stored in this property.
Calling &lt;code&gt;bindElement&lt;/code&gt; binds the control and sets this property.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="chartType" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Specifies the type of chart. Note that this property is read-only.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>The width of the chart. Overrides the width specified in the &lt;code&gt;size&lt;/code&gt; property.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="height" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>The height of the chart. Overrides the height specified in the &lt;code&gt;size&lt;/code&gt; property.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="size" type="n2:_SizeType">
<xsd:annotation>
<xsd:documentation>The size of the microchart. If not set, the default size is applied based on the size of the device tile.
Responsive size takes width and height of the parent container where the micro chart is included.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="isResponsive" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If this set to true, width and height of the control are determined by the width and height of the container in which the control is placed or by the width and height property.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="chartTitle" type="xsd:string">
<xsd:annotation>
<xsd:documentation>If the associated control is provided, its &lt;code&gt;text&lt;/code&gt; property is set to the Title property of the Chart annotation.
Title property of the DataPoint annotation is ignored.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="chartDescription" type="xsd:string">
<xsd:annotation>
<xsd:documentation>If the associated control is provided, its &lt;code&gt;text&lt;/code&gt; property is set to the Description property of the Chart annotation.
Description property of the DataPoint annotation is ignored.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="unitOfMeasure" type="xsd:string">
<xsd:annotation>
<xsd:documentation>If the associated control is provided, its &lt;code&gt;text&lt;/code&gt; property is set to the Unit of Measure. The Value property of the DataPoint annotation should be annotated with this Unit of Measure. It can be either ISOCurrency or Unit from the OData Measures annotations.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="freeText" type="xsd:string">
<xsd:annotation>
<xsd:documentation>If the associated control is provided, its &lt;code&gt;text&lt;/code&gt; property is set to the free text provided by annotations.
The Value property of the DataPoint annotation should be annotated with this free text.
As of 1.42.0, this association is only available for chart type 'Donut'.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaLabelledBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Controls or IDs that label this control. Can be used by screen reader software.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="initialize" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Event fired once the control has been initialized.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.comp.smartmicrochart.SmartMicroChartBase'-->
<xsd:complexType name="_SmartMicroChartBaseType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation '_chart'-->
<xsd:choice minOccurs="0">
<xsd:element ref="n0:Control"/>
<xsd:element ref="n0:Fragment"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
<xsd:attribute name="entitySet" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The OData entity set bound to the smart line micro chart.&lt;br&gt;
This entity set is used to pull data into the micro chart and create its internal representation.&lt;br&gt;
Please note that this property cannot be updated dynamically.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="chartType" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Specifies the type of chart. Note that this property is read-only.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="chartBindingPath" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This property can be used to specify a relative path (without '/') to an entity set (not a single entity)
that is used during the binding of the chart.&lt;br&gt;
For example, it can be a navigation property that will be added to the context path.&lt;br&gt;
If not specified, the &lt;code&gt;entitySet&lt;/code&gt; property is used instead.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showLabel" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Determines if any label is shown or not.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="width" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>The width of the chart. Overrides the width specified in the &lt;code&gt;size&lt;/code&gt; property.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="height" type="n0:_CSSSizeType">
<xsd:annotation>
<xsd:documentation>The height of the chart. Overrides the height specified in the &lt;code&gt;size&lt;/code&gt; property.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="size" type="n2:_SizeType">
<xsd:annotation>
<xsd:documentation>The size of the microchart. If not set, the default size is applied based on the size of the device tile.
Responsive size takes width and height of the parent container where the micro chart is included.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="isResponsive" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If this set to true, width and height of the control are determined by the width and height of the container in which the control is placed or by the width and height property.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="chartTitle" type="xsd:string">
<xsd:annotation>
<xsd:documentation>If the associated control is provided, its &lt;code&gt;Text&lt;/code&gt; property is set to the &lt;code&gt;Title&lt;/code&gt; property of the Chart annotation.
The &lt;code&gt;Title&lt;/code&gt; property of the DataPoint annotation is ignored.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="chartDescription" type="xsd:string">
<xsd:annotation>
<xsd:documentation>If the associated control is provided, its &lt;code&gt;Text&lt;/code&gt; property is set to the &lt;code&gt;Description&lt;/code&gt; property of the Chart annotation.
The &lt;code&gt;Description&lt;/code&gt; property of the DataPoint annotation is ignored.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="unitOfMeasure" type="xsd:string">
<xsd:annotation>
<xsd:documentation>If the associated control is provided, its &lt;code&gt;Text&lt;/code&gt; property is set to the &lt;code&gt;Unit of Measure&lt;/code&gt; property of the Chart annotation.
The &lt;code&gt;Value&lt;/code&gt; property of the DataPoint annotation should be annotated with this unit of measurement. It can be either ISOCurrency or Unit from the OData Measures annotations.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ariaLabelledBy" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Controls or IDs that label this control. Can be used by screen reader software.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="initialize" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired after the control has been initialized.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.comp.smartmicrochart.SmartRadialMicroChart'-->
<xsd:complexType name="_SmartRadialMicroChartType">
<xsd:complexContent>
<xsd:extension base="n9:_SmartMicroChartBaseType">
<xsd:attribute name="enableAutoBinding" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to &lt;code&gt;true&lt;/code&gt;, this enables automatic binding of the chart using the chartBindingPath (if it exists)
property.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="freeText" type="xsd:string">
<xsd:annotation>
<xsd:documentation>If the associated control is provided, its &lt;code&gt;text&lt;/code&gt; property is set to
the free text provided by annotations. The Value property of the DataPoint
annotation should be annotated with this free text. The Label annotation from the
OData Common vocabulary can be used.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.comp.smartmicrochart.SmartStackedBarMicroChart'-->
<xsd:complexType name="_SmartStackedBarMicroChartType">
<xsd:complexContent>
<xsd:extension base="n9:_SmartMicroChartBaseType"/>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.comp.smartmultiedit.Container'-->
<xsd:complexType name="_ContainerType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation 'layout'-->
<xsd:choice minOccurs="0">
<xsd:element ref="n9:SmartForm"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
<xsd:element name="layout" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The form that contains smart multi edit fields ({@link sap.ui.comp.smartmultiedit.Field} controls).</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n9:SmartForm"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="entitySet" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The entity set name to fetch metadata for. This entity set should have &lt;code&gt;sap:creatable&lt;/code&gt; annotation set to &lt;code&gt;true&lt;/code&gt;
as this control needs to create an entry internally for a short period of time.&lt;br&gt;
Please note that this is not a dynamic SAP UI5 property: setting it twice will not result in an update of the property.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="contexts" type="">
<xsd:annotation>
<xsd:documentation>The binding contexts relevant to this mass editing operation.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.comp.smarttable.SmartTable'-->
<xsd:complexType name="_SmartTableType">
<xsd:complexContent>
<xsd:extension base="n2:_VBoxType">
<xsd:sequence>
<xsd:element name="customToolbar" minOccurs="0">
<xsd:annotation>
<xsd:documentation>A toolbar that can be added by the user to define their own custom buttons, icons, etc. If this is specified, the SmartTable
control does not create an additional toolbar, but makes use of this one.&lt;br&gt;
&lt;i&gt;Note:&lt;/i&gt;&lt;br&gt;
The CSS class sapMTBHeader-CTX is applied on the given toolbar.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n2:Toolbar"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="semanticObjectController" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The Semantic Object Controller allows the user to specify and overwrite functionality for semantic object navigation.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n9:SemanticObjectController"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="noData" minOccurs="0">
<xsd:annotation>
<xsd:documentation>The value for the noData aggregation can be either a string value or a control instance.&lt;br&gt;
The control is shown, in case there is no data for the Table available. In case of a string value this will simply replace the no
data text.&lt;br&gt;
Currently the Responsive Table only supports string values.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n0:Control"/>
<xsd:element ref="n0:Fragment"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="semanticKeyAdditionalControl" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Allows users to specify an additional control that will be added to a VBox for the first semantic key field.&lt;br&gt;
&lt;i&gt;Note:&lt;/i&gt;&lt;br&gt;
This property is not meant for public use.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n0:Control"/>
<xsd:element ref="n0:Fragment"/>
<xsd:any processContents="lax" namespace="http://www.w3.org/1999/xhtml"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="entitySet" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The entity set name from which to fetch data and generate the columns. Note that this is not a dynamic UI5 property</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="smartFilterId" type="xsd:string">
<xsd:annotation>
<xsd:documentation>ID of the corresponding SmartFilter control; When specified, the SmartTable searches for the SmartFilter (also in the closest
parent View) and attaches to the relevant events of the SmartFilter; to fetch data, show overlay etc.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ignoredFields" type="xsd:string">
<xsd:annotation>
<xsd:documentation>CSV of fields that must be ignored in the OData metadata by the SmartTable control.&lt;br&gt;
&lt;i&gt;Note:&lt;/i&gt;&lt;br&gt;
No validation is done. Please ensure that you do not add spaces or special characters.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="initiallyVisibleFields" type="xsd:string">
<xsd:annotation>
<xsd:documentation>CSV of fields that must be shown initially in the SmartTable as visible columns and in the order specified.&lt;br&gt;
This property is mainly meant to be used when no LineItem annotation exists.&lt;br&gt;
If you have fields in the XMLView they are always shown first; then, the columns are added based on the LineItem annotation and
finally based on this property.&lt;br&gt;
&lt;i&gt;Note:&lt;/i&gt;&lt;br&gt;
If both this property and the LineItem annotation exist, the order of fields cannot be guaranteed to be as mentioned here.&lt;br&gt;
No validation is done. Please ensure that you do not add spaces or special characters.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="requestAtLeastFields" type="xsd:string">
<xsd:annotation>
<xsd:documentation>CSV of fields that must be always requested from the backend&lt;br&gt;
This property is mainly meant to be used when there is no PresentationVariant annotation.&lt;br&gt;
If both this property and the PresentationVariant annotation exist, the select request sent to the backend would be a combination
of both.&lt;br&gt;
&lt;i&gt;Note:&lt;/i&gt;&lt;br&gt;
For &lt;code&gt;AnalyticalTable&lt;/code&gt; (supported since 1.54), the following restrictions apply:
&lt;ul&gt;
&lt;li&gt;The property name(s) must not point to a new dimension or a measure.&lt;/li&gt;
&lt;li&gt;The property name(s) must not point to a navigationProperty/association path, as this might not supported by analytical
services.&lt;/li&gt;
&lt;/ul&gt;
No validation is done. Please ensure that you do not add spaces or special characters.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ignoreFromPersonalisation" type="xsd:string">
<xsd:annotation>
<xsd:documentation>CSV of fields that is not shown in the personalization dialog.&lt;br&gt;
&lt;i&gt;Note:&lt;/i&gt;&lt;br&gt;
No validation is done. Please ensure that you do not add spaces or special characters.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="tableType" type="n9:_TableTypeType">
<xsd:annotation>
<xsd:documentation>Specifies the type of table to be created in the SmartTable control.&lt;br&gt;
&lt;i&gt;Note:&lt;/i&gt;&lt;br&gt;
If you add a table to the content of the SmartTable in the view, this property has no effect.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="useVariantManagement" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>The useVariantManagement attribute can be set to true or false depending on whether you want to use variants. As a prerequisite you
need to specify the persistencyKey property.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showVariantManagement" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>The showVariantManagement attribute can be set to true or false for controlling the visibility of VariantManagement button.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="useExportToExcel" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Can be set to true or false depending on whether you want to export data to a spreadsheet application, for example Microsoft Excel.&lt;br&gt;
&lt;i&gt;Note:&lt;/i&gt;&lt;br&gt;
If &lt;code&gt;exportType&lt;/code&gt; is &lt;code&gt;sap.ui.comp.smarttable.ExportType.GW&lt;/code&gt;, any $expand parameters are removed when
sending the request to generate the spreadsheet.&lt;br&gt;
As of UI5 version 1.56: If &lt;code&gt;exportType&lt;/code&gt; is &lt;code&gt;sap.ui.comp.smarttable.ExportType.UI5Client&lt;/code&gt; and
&lt;code&gt;TreeTable&lt;/code&gt; is used, the &lt;code&gt;worksheet.hierarchyLevel&lt;/code&gt; property (see {@link sap.ui.export.Spreadsheet}) is
filled from the binding, if the relevant information is available there for exporting hierarchical data in the spreadsheet.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="exportType" type="n9:_ExportTypeType">
<xsd:annotation>
<xsd:documentation>Specifies the type of export to be used in the &lt;code&gt;SmartTable&lt;/code&gt; control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="useTablePersonalisation" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>The useTablePersonalisation attribute can be set to true or false depending on whether you want to define personalized table
settings. If you want to persist the table personalization, you need to specify the persistencyKey property.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showTablePersonalisation" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>The showTablePersonalisation attribute can be set to true or false for controlling the visibility of the TablePersonalisation
button.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showRowCount" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to &lt;code&gt;true&lt;/code&gt; (default), the number of rows is shown along with the header text.&lt;br&gt;
If set to &lt;code&gt;false&lt;/code&gt;, the number of rows will not be shown on the user interface.&lt;br&gt;
&lt;i&gt;Note:&lt;/i&gt;&lt;br&gt;
To avoid sending dedicated OData requests in order to improve your application's performance, you must configure the binding of the
table as required.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="header" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Specifies header text that is shown in table</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="toolbarStyleClass" type="xsd:string">
<xsd:annotation>
<xsd:documentation>A style class which is defined for the toolbar of the table.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="enableCustomFilter" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Can be used to override the filter behavior. If set to true (default), instead of the filter input box a button is rendered. When
pressing this button, the SmartTable control opens the filter panel directly in the table personalization dialog.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="persistencyKey" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Key used to access personalization data.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="useOnlyOneSolidToolbar" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to true, the standard toolbar and custom toolbar will be merged into one toolbar. The combined toolbar will have a solid
style.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="placeToolbarInTable" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Specifies whether the &lt;code&gt;Toolbar&lt;/code&gt; control of the &lt;code&gt;SmartTable&lt;/code&gt; is placed inside the corresponding
aggregation of the inner UI5 table control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="currentVariantId" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Retrieves or sets the current variant.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="editable" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>This attribute can be used to specify if the controls created by the SmartTable control are editable. (The automatic toggle of
controls works only for the SmartField/SmartToggle scenario)</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="enableAutoBinding" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>When set to true, this enables automatic binding of the table using the tableBindingPath (if it exists) or entitySet property. This
happens just after the &lt;code&gt;initialise&lt;/code&gt; event has been fired.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="tableBindingPath" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This attribute can be used to specify the path that is used during the binding of the table. If not specified, the entitySet
attribute is used instead. (used only if binding is established internally/automatically - See enableAutoBinding)</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="editTogglable" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Specifies whether the editable property can be toggled via a button on the toolbar. (The automatic toggle of controls works only
for the SmartField/SmartToggle scenario)</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="demandPopin" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>The demandPopin attribute can be set to true or false depending on whether you want to display columns as popins on the responsive
table</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showFullScreenButton" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Controls the visibility of the FullScreen button.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="initialNoDataText" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The text shown initially before the control is bound and initialized. The special values &lt;code&gt;$FILTERBAR&lt;/code&gt; or
&lt;code&gt;$NO_FILTERBAR&lt;/code&gt; can be specified to make the &lt;code&gt;SmartTable&lt;/code&gt; control show the initial text as if the
&lt;code&gt;SmartFilterBar&lt;/code&gt; control were associated with it. If nothing is specified, the default behavior is to show the initial
text based on whether the &lt;code&gt;SmartFilterBar&lt;/code&gt; control is actually associated with the &lt;code&gt;SmartTable&lt;/code&gt; control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="smartVariant" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Identifies the SmartVariant control which should be used for the personalization. Will be ignored if the advanced mode is set.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="initialise" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired once the control has been initialized.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="beforeRebindTable" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired just before the binding is being done.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="editToggled" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired when display/edit button is clicked.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="dataRequested" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired when data is requested after binding. The event is fired if the binding for the table is done by the SmartTable
itself.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="dataReceived" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired when data is received after binding. The event is fired if the binding for the table is done by the SmartTable
itself.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="afterVariantInitialise" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired after variant management in the SmartTable has been initialized.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="afterVariantSave" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired after a variant has been saved. This event can be used to retrieve the ID of the saved variant.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="afterVariantApply" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired after a variant has been applied.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showOverlay" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired just before the overlay is being shown.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="fieldChange" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired when an editable field, created internally by the SmartTable control, is changed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="fullScreenToggled" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired right after the full screen mode of the SmartTable control has been changed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="beforeExport" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired just before export is triggered.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="beforePaste" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired just before the paste event is triggered and can be used to prevent the default paste behavior.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="paste" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired when paste is triggered.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.comp.smartvariants.PersonalizableInfo'-->
<xsd:complexType name="_PersonalizableInfoType">
<xsd:complexContent>
<xsd:extension base="n0:_ElementType">
<xsd:attribute name="type" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Describes the type of variant management.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="dataSource" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Name of the data service</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="keyName" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Defines the property name of the personalization key.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="control" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Contains the control that can be personalized.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.comp.smartvariants.SmartVariantManagement'-->
<xsd:complexType name="_SmartVariantManagementType">
<xsd:complexContent>
<xsd:extension base="n9:_VariantManagementType">
<xsd:sequence>
<xsd:element name="personalizableControls" minOccurs="0">
<xsd:annotation>
<xsd:documentation>All controls that rely on variant handling have to be added to this aggregation.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n9:PersonalizableInfo"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="persistencyKey" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Key used to access personalization data.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="entitySet" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The OData entity set whose metadata is used to create the variant items based on the SelectionPresentationVariant annotation.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="initialise" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired when the SmartVariantManagement control is initialized.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="save" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired after a variant has been saved.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="afterSave" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired after all changes are successfully stored.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.comp.smartvariants.SmartVariantManagementAdapter'-->
<xsd:complexType name="_SmartVariantManagementAdapterType">
<xsd:complexContent>
<xsd:extension base="n0:_ElementType">
<xsd:attribute name="selectionPresentationVariants" type="xsd:string">
<xsd:annotation>
<xsd:documentation>assign an array of selectionPresentationVariants annotations.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.comp.smartvariants.SmartVariantManagementUi2'-->
<xsd:complexType name="_SmartVariantManagementUi2Type">
<xsd:complexContent>
<xsd:extension base="n9:_VariantManagementType">
<xsd:sequence>
<xsd:element name="personalizableControl" minOccurs="0">
<xsd:annotation>
<xsd:documentation>All controls that rely on variant handling have to be added to this aggregation. The only consumer currently known is the
&lt;code&gt;FilterBar&lt;/code&gt; control.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n9:PersonalizableInfo"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="initialise" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Once the &lt;code&gt;SmartVariantManagementUi2&lt;/code&gt; control has been initialized, and especially after retrieving the variants via
the UI2 personalization service, the registered consumer will be notified that this phase has completed</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="afterSave" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Fired after a variant is saved. This event can be used to retrieve the id of the saved variant.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.comp.state.UIState'-->
<xsd:complexType name="_UIStateType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:attribute name="presentationVariant" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Object representing the presentation variant. The structure looks like:

&lt;pre&gt;&lt;code&gt;
{
	ContextUrl: {string},
	MaxItems: {int},
 SortOrder: [],
	GroupBy: [],
	Total: [],
	RequestAtLeast: [],
	Visualizations: []
}
&lt;/code&gt;&lt;/pre&gt;

&lt;b&gt;Note:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt; &lt;code&gt;PresentationVariantID&lt;/code&gt; property is not provided&lt;/li&gt;
&lt;li&gt; &lt;code&gt;Text&lt;/code&gt; property is not provided because it is translated text&lt;/li&gt;
&lt;li&gt; &lt;code&gt;TotalBy&lt;/code&gt; is not supported yet&lt;/li&gt;
&lt;li&gt; &lt;code&gt;IncludeGrandTotal&lt;/code&gt; is not supported yet&lt;/li&gt;
&lt;li&gt; &lt;code&gt;InitialExpansionLevel&lt;/code&gt; is not supported yet&lt;/li&gt;
&lt;li&gt; &lt;code&gt;Title&lt;/code&gt; of &lt;code&gt;Visualizations.Content&lt;/code&gt; property is not provided because it is translated text&lt;/li&gt;
&lt;li&gt; &lt;code&gt;Description&lt;/code&gt; of &lt;code&gt;Visualizations.Content&lt;/code&gt; property is not provided because it is translated text&lt;/li&gt;
&lt;li&gt; &lt;code&gt;VariantName&lt;/code&gt; property is not part of specified DataSuiteFormat yet
&lt;/ul&gt;</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="selectionVariant" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Object representing the selection variant. The structure looks like:

&lt;pre&gt;&lt;code&gt;
{
 SelectionVariant: {
     SelectionVariantID: {string},
		Parameters: [],
		SelectOptions: []
}
&lt;/code&gt;&lt;/pre&gt;</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="variantName" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Variant name.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="valueTexts" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Structure containing filter value keys and its corresponding descriptions.

&lt;pre&gt;&lt;code&gt;
{
	Texts: [
		{
			Language: string,
			ContextUrl: string,
			PropertyTexts: [
				{
					PropertyName: string,
					ValueTexts: [
						{
							PropertyValue: string,
							Text: string
						}
					]
				}
			]
		}
	]
}
&lt;/code&gt;&lt;/pre&gt;</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.comp.valuehelpdialog.ValueHelpDialog'-->
<xsd:complexType name="_ValueHelpDialogType">
<xsd:complexContent>
<xsd:extension base="n2:_DialogType">
<xsd:sequence>
<xsd:element name="filterBar" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Allows you to add a {@link sap.ui.comp.filterbar.FilterBar FilterBar} or
{@link sap.ui.comp.smartfilterbar.SmartFilterBar SmartFilterBar} control to the value help dialog.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0">
<xsd:element ref="n9:FilterBar"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="basicSearchText" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Defines the value for the basic search field. The value is set into the basic search field of the filter bar used.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="supportMultiselect" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Enables multi-selection in the table used.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="supportRanges" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Enables the ranges (conditions) feature in the dialog.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="supportRangesOnly" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If this property is set to &lt;code&gt;true&lt;/code&gt;, the value help dialog only supports the ranges (conditions) feature.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="key" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Defines the key of the column used for the internal key handling. The value of the column is used for the token key and also to
identify the row in the table.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="keys" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Defines the list of additional keys of the column used for the internal key handling.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="descriptionKey" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Defines the key of the column used for the token text.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="maxIncludeRanges" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Defines the maximum number of include ranges.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="maxExcludeRanges" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Defines the maximum number of exclude ranges.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="displayFormat" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Represents the display format of the range values. With the &lt;code&gt;displayFormat&lt;/code&gt; value UpperCase, the entered value of the
range (condition) is converted to uppercase letters.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="tokenDisplayBehaviour" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Represents how the item token text should be displayed in ValueHelpDialog. Use one of the valid
&lt;code&gt;sap.ui.comp.smartfilterbar.DisplayBehaviour&lt;/code&gt; values.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="filterMode" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Sets the dialog into a filter mode, which only shows ranges (conditions) and hides the tokens.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="ok" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired when the OK button is pressed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="cancel" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired when the Cancel button is pressed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="selectionChange" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired when the user selects an item in the items table.

&lt;b&gt;Note:&lt;/b&gt; The event will only be raised when the dialog gets a table
instance from outside via &lt;code&gt;setTable&lt;/code&gt;.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="tokenRemove" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired when the user removes one or multiple existing token(s) from the dialog.

&lt;b&gt;Note:&lt;/b&gt; The event will only be raised when the dialog gets a table
instance from outside via &lt;code&gt;setTable&lt;/code&gt;.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="updateSelection" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired when the table gets an update and all existing tokens must be selected in the table.

&lt;b&gt;Note:&lt;/b&gt; The event will only be raised when the dialog gets a table
instance from outside via &lt;code&gt;setTable&lt;/code&gt;.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.comp.variants.EditableVariantItem'-->
<xsd:complexType name="_EditableVariantItemType">
<xsd:complexContent>
<xsd:extension base="n2:_ColumnListItemType">
<xsd:attribute name="key" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Key of the List Item</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="global" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Indicator if a variant is visible for all users.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="lifecyclePackage" type="xsd:string">
<xsd:annotation>
<xsd:documentation>ABAP Package the variant is assigned. Used for transport functionality</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="lifecycleTransportId" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Identifier of the transport object the variant is assigned to.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="namespace" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Variant namespace</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="readOnly" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Indication if variant can be changed</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="accessOptions" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Flags for a variant to indicate why it might be read-only</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="labelReadOnly" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Indicates if the variant label can be changed</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="author" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Author of the variant</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="favorite" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Indicates if favorites can be created.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.comp.variants.VariantItem'-->
<xsd:complexType name="_VariantItemType">
<xsd:complexContent>
<xsd:extension base="n0:_ItemType">
<xsd:attribute name="executeOnSelection" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Attribute for usage in &lt;code&gt;SmartFilterBar&lt;/code&gt;</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="readOnly" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>If set to &lt;code&gt;false&lt;/code&gt;, the user is allowed to change the item's data</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="lifecycleTransportId" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Identifier of the transport object the variant is assigned to.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="global" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Indicator if a variant is visible for all users.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="lifecyclePackage" type="xsd:string">
<xsd:annotation>
<xsd:documentation>ABAP package the variant is assigned to. Used for transport functionality.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="namespace" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Variant namespace</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="accessOptions" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Flags for a variant to indicate why it might be read-only.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="labelReadOnly" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Indicates if the variant title can be changed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="author" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Author of the variant</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="favorite" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Indicates if favorites can be created.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="change" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired when one of the properties is changed.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<!--type definition for UIElement 'sap.ui.comp.variants.VariantManagement'-->
<xsd:complexType name="_VariantManagementType">
<xsd:complexContent>
<xsd:extension base="n0:_ControlType">
<xsd:sequence>
<!--default aggregation 'items'-->
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Item"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
<xsd:element name="items" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Items displayed by the &lt;code&gt;VariantManagement&lt;/code&gt; control.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n0:Item"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
<xsd:element name="variantItems" minOccurs="0">
<xsd:annotation>
<xsd:documentation>Variant items displayed by the &lt;code&gt;VariantManagement&lt;/code&gt; control.</xsd:documentation>
</xsd:annotation>
<xsd:complexType>
<xsd:sequence>
<xsd:choice minOccurs="0" maxOccurs="unbounded">
<xsd:element ref="n9:VariantItem"/>
<xsd:element ref="n0:Fragment"/>
</xsd:choice>
</xsd:sequence>
</xsd:complexType>
</xsd:element>
</xsd:sequence>
<xsd:attribute name="initialSelectionKey" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Enables the setting of the initially selected variant.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="enabled" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Can be set to true or false depending on whether you want to enable or disable the control.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="defaultVariantKey" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Provides a string value to set the default variant. Used for the save dialog. Has no effect on the selected variant.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="selectionKey" type="xsd:string">
<xsd:annotation>
<xsd:documentation>The key of the currently selected item. Returns null if the default item list is selected.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showCreateTile" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Indicates that a Create Tile is visible in the Create dialog.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showExecuteOnSelection" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Indicates that Execute on Selection is visible in the Save Variant and the Manage Variants dialogs.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showShare" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Indicates that the Public checkbox is visible in the Save View and the Manage Views dialogs. Selecting this checkbox allows you to
share variants with other users.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="showSetAsDefault" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Indicates that set as default is visible in the Save Variant and the Manage Variants dialogs.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="lifecycleSupport" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Enables the lifecycle support. If set to true, the VariantManagement control handles the transport information for shared variants.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="standardItemText" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Overwrites the default Standard variant title.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="useFavorites" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Indicates that the 'Favorites' feature is used. Only variants marked as favorites will be displayed in the variant list.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="inErrorState" type="xsd:boolean">
<xsd:annotation>
<xsd:documentation>Indicates that the control is in error state. If set to &lt;code&gt;true&lt;/code&gt; error message will be displayed whenever the variant is
opened.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="save" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired when the Save Variant dialog is closed with OK for a variant.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="manage" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired when users apply changes to variants in the Manage Variants dialog.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
<xsd:attribute name="select" type="xsd:string">
<xsd:annotation>
<xsd:documentation>This event is fired when a new variant is selected.</xsd:documentation>
</xsd:annotation>
</xsd:attribute>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<xsd:simpleType name="_TextArrangementTypeType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="TextFirst">
<xsd:annotation>
<xsd:documentation>Text comes first, followed by the ID.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="TextLast">
<xsd:annotation>
<xsd:documentation>ID comes first, followed by the description.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="TextSeparate">
<xsd:annotation>
<xsd:documentation>ID and description are represented separately.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="TextOnly">
<xsd:annotation>
<xsd:documentation>Only description is represented, ID is hidden (for example, for &lt;code&gt;UUIDs&lt;/code&gt;).</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_ChangeHandlerTypeType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="addLink">
<xsd:annotation>
<xsd:documentation>Change handler creating a change for an added link.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="removeLink">
<xsd:annotation>
<xsd:documentation>Change handler creating a change for a removed link.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="moveLink">
<xsd:annotation>
<xsd:documentation>Change handler creating a change for a moved link.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_AggregationRoleType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Dimension">
<xsd:annotation>
<xsd:documentation>Dimension role.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Measure">
<xsd:annotation>
<xsd:documentation>Measure role.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="NotDimeasure">
<xsd:annotation>
<xsd:documentation>Role which is neither dimension nor measure.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_ChangeTypeType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Unchanged">
<xsd:annotation>
<xsd:documentation>Not changed</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="ModelChanged">
<xsd:annotation>
<xsd:documentation>Change is applied to model but not applied to table</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="TableChanged">
<xsd:annotation>
<xsd:documentation>Change is applied to model and to table</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_ColumnTypeType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="ResponsiveColumn">
<xsd:annotation>
<xsd:documentation>Represents &lt;code&gt;sap.m.Column&lt;/code&gt;.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="TableColumn">
<xsd:annotation>
<xsd:documentation>Represents &lt;code&gt;sap.ui.table.Column&lt;/code&gt;.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="ColumnWrapper">
<xsd:annotation>
<xsd:documentation>Represents &lt;code&gt;sap.ui.comp.personalization.ColumnWrapper&lt;/code&gt;.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_ResetTypeType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="ResetFull">
<xsd:annotation>
<xsd:documentation>Reset back to Restore (i.e. the version of the table with which the controller was instantiated or via setter updated) was triggered
(either via API or via reset button)</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="ResetPartial">
<xsd:annotation>
<xsd:documentation>Reset back to the CurrentVariant was triggered</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_TableTypeType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="ResponsiveTable">
<xsd:annotation>
<xsd:documentation>Represents &lt;code&gt;sap.m.Table&lt;/code&gt;.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Table">
<xsd:annotation>
<xsd:documentation>Represents &lt;code&gt;sap.ui.table.Table&lt;/code&gt;.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="AnalyticalTable">
<xsd:annotation>
<xsd:documentation>Represents &lt;code&gt;sap.ui.table.AnalyticalTable&lt;/code&gt;.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="TreeTable">
<xsd:annotation>
<xsd:documentation>Represents &lt;code&gt;sap.ui.table.TreeTable&lt;/code&gt;.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="ChartWrapper">
<xsd:annotation>
<xsd:documentation>Represents &lt;code&gt;sap.ui.comp.personalization.ChartWrapper&lt;/code&gt;.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="SelectionWrapper">
<xsd:annotation>
<xsd:documentation>Represents &lt;code&gt;sap.ui.comp.personalization.SelectionWrapper&lt;/code&gt;.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_SelectionModeType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Multi">
<xsd:annotation>
<xsd:documentation>Multi selection mode, multiple sets of data points can be selected at once.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Single">
<xsd:annotation>
<xsd:documentation>Single selection mode, only one set of data points can be selected at once.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="None">
<xsd:annotation>
<xsd:documentation>None selection mode, no data points can be selected.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_ControlContextTypeType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="None">
<xsd:annotation>
<xsd:documentation>No special context is selected. The Smart Field applies its internal defaults.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="ResponsiveTable">
<xsd:annotation>
<xsd:documentation>Also the UoM layout is influenced.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Form">
<xsd:annotation>
<xsd:documentation>Behaves currently exactly like &lt;code&gt;sap.ui.comp.smartfield.ControlContextType.None&lt;/code&gt;.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Table">
<xsd:annotation>
<xsd:documentation>If this is selected the UoM layout is influenced.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="SmartFormGrid">
<xsd:annotation>
<xsd:documentation>If this is selected the UoM layout is influenced.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_ControlProposalTypeType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="None">
<xsd:annotation>
<xsd:documentation>No special context is selected. The Smart Field applies its internal defaults.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="ObjectNumber">
<xsd:annotation>
<xsd:documentation>If this is selected, the sap.m.ObjectNumber control is used to display units of measure. If the value property of the Smart Field is not
bound to a unit of measure, the property is ignored.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="ObjectIdentifier">
<xsd:annotation>
<xsd:documentation>If this is selected, the sap.m.ObjectIdentifier control is used to display IDs, if they are not editable. The current OData property is
assumed to have a text annotation. Otherwise the configuration is ignored.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_ControlTypeType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="auto">
<xsd:annotation>
<xsd:documentation>The &lt;code&gt;SmartField&lt;/code&gt; control chooses the control to be displayed.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="dropDownList">
<xsd:annotation>
<xsd:documentation>The &lt;code&gt;SmartField&lt;/code&gt; control displays a combo box control.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="input">
<xsd:annotation>
<xsd:documentation>The &lt;code&gt;SmartField&lt;/code&gt; control displays a text input field control.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="datePicker">
<xsd:annotation>
<xsd:documentation>The &lt;code&gt;SmartField&lt;/code&gt; control displays a date picker control.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="checkBox">
<xsd:annotation>
<xsd:documentation>The &lt;code&gt;SmartField&lt;/code&gt; control displays a check box control.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="selection">
<xsd:annotation>
<xsd:documentation>The &lt;code&gt;SmartField&lt;/code&gt; control displays a select control.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_CriticalityRepresentationTypeType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="WithoutIcon">
<xsd:annotation>
<xsd:documentation>If this is selected, the sap.m.ObjectStatus control does not visualize the criticality using an icon.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="WithIcon">
<xsd:annotation>
<xsd:documentation>If this is selected, the sap.m.ObjectStatus control visualizes the criticality using an icon.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_DisplayBehaviourType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="auto">
<xsd:annotation>
<xsd:documentation>The SmartField chooses the display behavior.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="descriptionOnly">
<xsd:annotation>
<xsd:documentation>Only the description of the available values is displayed.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="descriptionAndId">
<xsd:annotation>
<xsd:documentation>Description and ID are displayed for available values.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="idAndDescription">
<xsd:annotation>
<xsd:documentation>ID and description are displayed for available values.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="idOnly">
<xsd:annotation>
<xsd:documentation>Shows the ID only.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="TrueFalse">
<xsd:annotation>
<xsd:documentation>Shows Boolean value as True/False</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="OnOff">
<xsd:annotation>
<xsd:documentation>Shows Boolean value as On/Off</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="YesNo">
<xsd:annotation>
<xsd:documentation>Shows Boolean value as Yes/No</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_JSONTypeType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="String">
<xsd:annotation>
<xsd:documentation>The JavaScript primary type String</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Date">
<xsd:annotation>
<xsd:documentation>The JavaScript Date Object</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Float">
<xsd:annotation>
<xsd:documentation>Float type</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Integer">
<xsd:annotation>
<xsd:documentation>Integer type</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Boolean">
<xsd:annotation>
<xsd:documentation>Boolean Type</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="DateTime">
<xsd:annotation>
<xsd:documentation>Date Time Type</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_TextInEditModeSourceType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="None">
<xsd:annotation>
<xsd:documentation>The &lt;code&gt;com.sap.vocabularies.UI.v1.TextArrangement&lt;/code&gt; annotation and the value of the &lt;code&gt;displayBehaviour&lt;/code&gt; property of
the &lt;code&gt;configuration&lt;/code&gt; aggregation are not evaluated.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="NavigationProperty">
<xsd:annotation>
<xsd:documentation>The text is fetched from the OData model property specified in the &lt;code&gt;Path&lt;/code&gt; attribute of the
&lt;code&gt;com.sap.vocabularies.Common.v1.Text&lt;/code&gt; annotation.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="ValueList">
<xsd:annotation>
<xsd:documentation>The text is fetched from the OData model property specified in the &lt;code&gt;Path&lt;/code&gt; attribute of the
&lt;code&gt;com.sap.vocabularies.Common.v1.Text&lt;/code&gt; annotation of the associated value list entity.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_ControlTypeType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="auto">
<xsd:annotation>
<xsd:documentation>Shows field based on metadata.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="input">
<xsd:annotation>
<xsd:documentation>Shows an input field.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="dropDownList">
<xsd:annotation>
<xsd:documentation>Shows a drop down list field.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="date">
<xsd:annotation>
<xsd:documentation>Shows a date picker field.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="dateTimePicker">
<xsd:annotation>
<xsd:documentation>Shows a date time picker field.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_DisplayBehaviourType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="auto">
<xsd:annotation>
<xsd:documentation>Shows values based on metadata.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="descriptionOnly">
<xsd:annotation>
<xsd:documentation>Shows only the description for values.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="descriptionAndId">
<xsd:annotation>
<xsd:documentation>Shows description and then an id in values.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="idAndDescription">
<xsd:annotation>
<xsd:documentation>Shows id and then a description in values.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="idOnly">
<xsd:annotation>
<xsd:documentation>Shows only the id for values.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_FilterTypeType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="auto">
<xsd:annotation>
<xsd:documentation>Restrict filter based on metadata.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="single">
<xsd:annotation>
<xsd:documentation>Restrict filter to a single entry.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="multiple">
<xsd:annotation>
<xsd:documentation>Restrict filter to multiple entries.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="interval">
<xsd:annotation>
<xsd:documentation>Restrict filter to an interval.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_MandatoryTypeType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="auto">
<xsd:annotation>
<xsd:documentation>Shows values based on metadata.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="mandatory">
<xsd:annotation>
<xsd:documentation>Shows field as mandatory.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="notMandatory">
<xsd:annotation>
<xsd:documentation>Shows field as not mandatory.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_SelectOptionSignType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="I">
<xsd:annotation>
<xsd:documentation>Sign Include</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="include">
<xsd:annotation>
<xsd:documentation>Sign Include</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="E">
<xsd:annotation>
<xsd:documentation>Sign Exclude</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="exclude">
<xsd:annotation>
<xsd:documentation>Sign Exclude</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_ListTypeType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="List">
<xsd:annotation>
<xsd:documentation>A list (sap.m.List) control shall be created as the content of the SmartList, if no list already exists (default)</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="Tree">
<xsd:annotation>
<xsd:documentation>A tree (sap.m.Tree) control shall be created as the content of the SmartList, if no list/tree already exists</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_ExportTypeType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="GW">
<xsd:annotation>
<xsd:documentation>Gateway backend spreadsheet export service is used</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="UI5Client">
<xsd:annotation>
<xsd:documentation>UI5 client-side spreadsheet export service is used (default as of UI5 version 1.52)</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_TableTypeType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Table">
<xsd:annotation>
<xsd:documentation>A table (sap.ui.table.Table) control shall be created as the content of the SmartTable, if no table already exists (default)</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="ResponsiveTable">
<xsd:annotation>
<xsd:documentation>A responsive table (sap.m.Table) control that can be used on mobile devices shall be created as the content of the SmartTable, if no table
already exists</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="AnalyticalTable">
<xsd:annotation>
<xsd:documentation>An analytical table (sap.ui.table.AnalyticalTable) control shall be created as the content of the SmartTable, if no table already exists</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="TreeTable">
<xsd:annotation>
<xsd:documentation>A tree table (sap.ui.table.TreeTable) control shall be created as the content of the SmartTable, if no table already exists</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
<xsd:simpleType name="_ChangeHandlerTypeType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="addFavorite">
<xsd:annotation>
<xsd:documentation>Change handler creating a change for an added favorite.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
<xsd:enumeration value="removeFavorite">
<xsd:annotation>
<xsd:documentation>Change handler creating a change for a removed favorite.</xsd:documentation>
</xsd:annotation>
</xsd:enumeration>
</xsd:restriction>
</xsd:simpleType>
</xsd:schema>
